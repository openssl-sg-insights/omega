{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9ad8\u901f\u5206\u5e03\u5f0f\u672c\u5730\u884c\u60c5\u670d\u52a1\u5668 \u7b80\u4ecb \u00b6 Omega\u4e3a\u5927\u5bcc\u7fc1(Zillionare)\u667a\u80fd\u91cf\u5316\u4ea4\u6613\u5e73\u53f0\u63d0\u4f9b\u6570\u636e\u670d\u52a1\u3002\u5b83\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u3001\u9ad8\u6027\u80fd\u7684\u884c\u60c5\u670d\u52a1\u5668\uff0c\u6838\u5fc3\u529f\u80fd\u6709\uff1a \u5e76\u53d1\u5bf9\u63a5\u591a\u4e2a\u4e0a\u6e38\u6570\u636e\u6e90\uff0c\u5982\u679c\u6570\u636e\u6e90\u8fd8\u652f\u6301\u591a\u8d26\u6237\u548c\u591a\u4e2a\u5e76\u53d1\u4f1a\u8bdd\u7684\u8bdd\uff0cOmega\u4e5f\u80fd\u5145\u5206\u5229\u7528\u8fd9\u79cd\u80fd\u529b\uff0c\u4ece\u800c\u4eab\u53d7\u5230\u6700\u5feb\u7684\u5b9e\u65f6\u884c\u60c5\u3002\u76ee\u524d\u5b98\u65b9\u5df2\u63d0\u4f9bJoinQuant\u7684\u6570\u636e\u6e90\u9002\u914d\u3002 \u9ad8\u6027\u80fd\u548c\u5c42\u6b21\u5316\u7684\u6570\u636e\u672c\u5730\u5316\u5b58\u50a8\uff0c\u5728\u6700\u4f73\u6027\u80fd\u548c\u5b58\u50a8\u7a7a\u95f4\u4e0a\u5de7\u5999\u5e73\u8861\u3002\u5728\u9700\u8981\u88ab\u9ad8\u9891\u8c03\u7528\u7684\u884c\u60c5\u6570\u636e\u90e8\u5206\uff0cOmega\u76f4\u63a5\u4f7f\u7528Redis\u5b58\u50a8\u6570\u636e\uff1b\u8d22\u52a1\u6570\u636e\u4e00\u4e2a\u5b63\u5ea6\u624d\u4f1a\u53d8\u52a8\u4e00\u6b21\uff0c\u56e0\u800c\u8bfb\u53d6\u9891\u7387\u4e5f\u4e0d\u4f1a\u592a\u9ad8\uff0c\u6240\u4ee5\u5b58\u653e\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u3002\u8fd9\u79cd\u5b89\u6392\u4e3a\u5404\u79cd\u4ea4\u6613\u98ce\u683c\u90fd\u63d0\u4f9b\u4e86\u6700\u4f73\u8ba1\u7b97\u6027\u80fd\u3002 \u4f18\u79c0\u7684\u53ef\u4f38\u7f29\u90e8\u7f72(scalability)\u7279\u6027\u3002Omega\u53ef\u4ee5\u6839\u636e\u60a8\u5bf9\u6570\u636e\u541e\u5410\u91cf\u7684\u9700\u6c42\uff0c\u6309\u9700\u90e8\u7f72\u5728\u5355\u673a\u6216\u8005\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u4ece\u800c\u6ee1\u8db3\u4e2a\u4eba\u3001\u5de5\u4f5c\u5ba4\u5230\u5927\u578b\u56e2\u961f\u7684\u6570\u636e\u9700\u6c42\u3002 \u81ea\u5e26\u6570\u636e(Battery included)\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4ece2015\u5e74\u4ee5\u6765\u768430\u5206\u949fk\u7ebf\u4ee5\u4e0a\u6570\u636e\uff0c\u5e76\u4e14\u901a\u8fc7CDN\u8fdb\u884c\u9ad8\u901f\u5206\u53d1\u3002\u5b89\u88c5\u597dOmega\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u6700\u5feb\u5728\u5341\u591a\u5206\u949f\u5185\u5c06\u8fd9\u6837\u5de8\u91cf\u7684\u6570\u636e\u540c\u6b65\u5230\u672c\u5730\u6570\u636e\u5e93\u3002 \u5e2e\u52a9\u6587\u6863 \u9e23\u8c22 \u00b6 Zillionare-Omega\u91c7\u7528\u4ee5\u4e0b\u6280\u672f\u6784\u5efa: Pycharm\u5f00\u6e90\u9879\u76ee\u652f\u6301\u8ba1\u5212","title":"\u7b80\u4ecb"},{"location":"#\u7b80\u4ecb","text":"Omega\u4e3a\u5927\u5bcc\u7fc1(Zillionare)\u667a\u80fd\u91cf\u5316\u4ea4\u6613\u5e73\u53f0\u63d0\u4f9b\u6570\u636e\u670d\u52a1\u3002\u5b83\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u3001\u9ad8\u6027\u80fd\u7684\u884c\u60c5\u670d\u52a1\u5668\uff0c\u6838\u5fc3\u529f\u80fd\u6709\uff1a \u5e76\u53d1\u5bf9\u63a5\u591a\u4e2a\u4e0a\u6e38\u6570\u636e\u6e90\uff0c\u5982\u679c\u6570\u636e\u6e90\u8fd8\u652f\u6301\u591a\u8d26\u6237\u548c\u591a\u4e2a\u5e76\u53d1\u4f1a\u8bdd\u7684\u8bdd\uff0cOmega\u4e5f\u80fd\u5145\u5206\u5229\u7528\u8fd9\u79cd\u80fd\u529b\uff0c\u4ece\u800c\u4eab\u53d7\u5230\u6700\u5feb\u7684\u5b9e\u65f6\u884c\u60c5\u3002\u76ee\u524d\u5b98\u65b9\u5df2\u63d0\u4f9bJoinQuant\u7684\u6570\u636e\u6e90\u9002\u914d\u3002 \u9ad8\u6027\u80fd\u548c\u5c42\u6b21\u5316\u7684\u6570\u636e\u672c\u5730\u5316\u5b58\u50a8\uff0c\u5728\u6700\u4f73\u6027\u80fd\u548c\u5b58\u50a8\u7a7a\u95f4\u4e0a\u5de7\u5999\u5e73\u8861\u3002\u5728\u9700\u8981\u88ab\u9ad8\u9891\u8c03\u7528\u7684\u884c\u60c5\u6570\u636e\u90e8\u5206\uff0cOmega\u76f4\u63a5\u4f7f\u7528Redis\u5b58\u50a8\u6570\u636e\uff1b\u8d22\u52a1\u6570\u636e\u4e00\u4e2a\u5b63\u5ea6\u624d\u4f1a\u53d8\u52a8\u4e00\u6b21\uff0c\u56e0\u800c\u8bfb\u53d6\u9891\u7387\u4e5f\u4e0d\u4f1a\u592a\u9ad8\uff0c\u6240\u4ee5\u5b58\u653e\u5728\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u3002\u8fd9\u79cd\u5b89\u6392\u4e3a\u5404\u79cd\u4ea4\u6613\u98ce\u683c\u90fd\u63d0\u4f9b\u4e86\u6700\u4f73\u8ba1\u7b97\u6027\u80fd\u3002 \u4f18\u79c0\u7684\u53ef\u4f38\u7f29\u90e8\u7f72(scalability)\u7279\u6027\u3002Omega\u53ef\u4ee5\u6839\u636e\u60a8\u5bf9\u6570\u636e\u541e\u5410\u91cf\u7684\u9700\u6c42\uff0c\u6309\u9700\u90e8\u7f72\u5728\u5355\u673a\u6216\u8005\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u4ece\u800c\u6ee1\u8db3\u4e2a\u4eba\u3001\u5de5\u4f5c\u5ba4\u5230\u5927\u578b\u56e2\u961f\u7684\u6570\u636e\u9700\u6c42\u3002 \u81ea\u5e26\u6570\u636e(Battery included)\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u4ece2015\u5e74\u4ee5\u6765\u768430\u5206\u949fk\u7ebf\u4ee5\u4e0a\u6570\u636e\uff0c\u5e76\u4e14\u901a\u8fc7CDN\u8fdb\u884c\u9ad8\u901f\u5206\u53d1\u3002\u5b89\u88c5\u597dOmega\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u6700\u5feb\u5728\u5341\u591a\u5206\u949f\u5185\u5c06\u8fd9\u6837\u5de8\u91cf\u7684\u6570\u636e\u540c\u6b65\u5230\u672c\u5730\u6570\u636e\u5e93\u3002 \u5e2e\u52a9\u6587\u6863","title":"\u7b80\u4ecb"},{"location":"#\u9e23\u8c22","text":"Zillionare-Omega\u91c7\u7528\u4ee5\u4e0b\u6280\u672f\u6784\u5efa: Pycharm\u5f00\u6e90\u9879\u76ee\u652f\u6301\u8ba1\u5212","title":"\u9e23\u8c22"},{"location":"api/","text":"\u00b6 app \u00b6 Author: Aaron-Yang [code@jieyu.ai] Contributors: start ( impl , cfg = None , ** fetcher_params ) \u00b6 \u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b \u4f7f\u7528\u672c\u51fd\u6570\u6765\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b\u3002\u8be5\u8fdb\u7a0b\u53ef\u80fd\u4e0e\u5176\u5b83\u8fdb\u7a0b\u4e00\u6837\uff0c\u4f7f\u7528\u76f8\u540c\u7684impl\u548c\u8d26\u53f7\uff0c\u56e0\u6b64\u6784\u6210\u4e00\u7ec4\u8fdb\u7a0b\u3002 \u901a\u8fc7\u591a\u6b21\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u4f20\u5165\u4e0d\u540c\u7684quotes fetcher impl\u53c2\u6570\uff0c\u5373\u53ef\u542f\u52a8\u591a\u7ec4Omega\u670d\u52a1\u3002 \u5982\u679c\u6307\u5b9a\u4e86 fetcher_params \uff0c\u5219 start \u5c06\u4f7f\u7528impl, fetcher_params\u6765\u542f\u52a8\u5355\u4e2aOmega\u670d\u52a1\uff0c\u4f7f \u7528impl\u6307\u5b9a\u7684fetcher\u3002\u5426\u5219\uff0c\u5c06\u4f7f\u7528 cfg.quotes_fetcher \u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u521b\u5efaOmega. \u5982\u679c cfg \u4e0d\u4e3aNone\uff0c\u5219\u5e94\u8be5\u6307\u5b9a\u4e3a\u5408\u6cd5\u7684json string\uff0c\u5176\u5185\u5bb9\u5c06\u8986\u76d6\u672c\u5730cfg\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u76ee\u524d\u7684\u4e3b\u8981 \u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u5355\u5143\u6d4b\u8bd5\u3002 Parameters: Name Type Description Default impl str quotes fetcher implementor required cfg dict the cfg in json string None fetcher_params contains info required by creating quotes fetcher {} Source code in omega/app.py def start ( impl : str , cfg : dict = None , ** fetcher_params ): \"\"\"\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b \u4f7f\u7528\u672c\u51fd\u6570\u6765\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b\u3002\u8be5\u8fdb\u7a0b\u53ef\u80fd\u4e0e\u5176\u5b83\u8fdb\u7a0b\u4e00\u6837\uff0c\u4f7f\u7528\u76f8\u540c\u7684impl\u548c\u8d26\u53f7\uff0c\u56e0\u6b64\u6784\u6210\u4e00\u7ec4\u8fdb\u7a0b\u3002 \u901a\u8fc7\u591a\u6b21\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u4f20\u5165\u4e0d\u540c\u7684quotes fetcher impl\u53c2\u6570\uff0c\u5373\u53ef\u542f\u52a8\u591a\u7ec4Omega\u670d\u52a1\u3002 \u5982\u679c\u6307\u5b9a\u4e86`fetcher_params`\uff0c\u5219`start`\u5c06\u4f7f\u7528impl, fetcher_params\u6765\u542f\u52a8\u5355\u4e2aOmega\u670d\u52a1\uff0c\u4f7f \u7528impl\u6307\u5b9a\u7684fetcher\u3002\u5426\u5219\uff0c\u5c06\u4f7f\u7528`cfg.quotes_fetcher`\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u521b\u5efaOmega. \u5982\u679c`cfg`\u4e0d\u4e3aNone\uff0c\u5219\u5e94\u8be5\u6307\u5b9a\u4e3a\u5408\u6cd5\u7684json string\uff0c\u5176\u5185\u5bb9\u5c06\u8986\u76d6\u672c\u5730cfg\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u76ee\u524d\u7684\u4e3b\u8981 \u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u5355\u5143\u6d4b\u8bd5\u3002 Args: impl (str): quotes fetcher implementor cfg: the cfg in json string fetcher_params: contains info required by creating quotes fetcher \"\"\" port = fetcher_params . get ( \"port\" , 3181 ) omega = Omega ( impl , cfg , ** fetcher_params ) app . register_listener ( omega . init , \"before_server_start\" ) logger . info ( \"starting sanic group listen on %s with %s workers\" , port , 1 ) app . run ( host = \"0.0.0.0\" , port = port , workers = 1 , register_sys_signals = True , protocol = WebSocketProtocol , ) logger . info ( \"sanic stopped.\" ) cli \u00b6 \u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u671f\u3001\u5168\u5c40\u5bf9\u8c61\u3001\u4efb\u52a1\u3001\u5168\u5c40\u6d88\u606f\u54cd\u5e94 bin_cut ( arr , n ) \u00b6 \u5c06\u6570\u7ec4arr\u5207\u5206\u6210n\u4efd Parameters: Name Type Description Default arr list [description] required n int [description] required Returns: Type Description [type] [description] Source code in omega/cli.py def bin_cut ( arr : list , n : int ): \"\"\"\u5c06\u6570\u7ec4arr\u5207\u5206\u6210n\u4efd Args: arr ([type]): [description] n ([type]): [description] Returns: [type]: [description] \"\"\" result = [[] for i in range ( n )] for i , e in enumerate ( arr ): result [ i % n ] . append ( e ) return [ e for e in result if len ( e )] config_fetcher ( settings ) \u00b6 \u914d\u7f6ejq_fetcher \u4e3aOmega\u5b89\u88c5jqdatasdk, zillionare-omega-adaptors-jq, \u914d\u7f6ejqdata\u8bbf\u95ee\u8d26\u53f7 Source code in omega/cli.py def config_fetcher ( settings ): \"\"\"\u914d\u7f6ejq_fetcher \u4e3aOmega\u5b89\u88c5jqdatasdk, zillionare-omega-adaptors-jq, \u914d\u7f6ejqdata\u8bbf\u95ee\u8d26\u53f7 \"\"\" msg = \"\"\" Omega\u9700\u8981\u914d\u7f6e\u4e0a\u6e38\u884c\u60c5\u670d\u52a1\u5668\u3002\u5f53\u524d\u652f\u6301\u7684\u4e0a\u6e38\u670d\u52a1\u5668\u6709: \\\\ n [1] \u805a\u5bbd`<joinquant>` \\\\ n \"\"\" print ( format_msg ( msg )) more_account = True workers = [] port = 3181 while more_account : account = get_input ( \"\u8bf7\u8f93\u5165\u8d26\u53f7:\" , None , os . environ . get ( \"JQ_ACCOUNT\" ) or \"\" ) password = get_input ( \"\u8bf7\u8f93\u5165\u5bc6\u7801:\" , None , os . environ . get ( \"JQ_PASSWORD\" ) or \"\" ) sessions = get_input ( \"\u8bf7\u8f93\u5165\u5e76\u53d1\u4f1a\u8bdd\u6570\" , None , 1 , \"\u9ed8\u8ba4\u503c[1]\" ) workers . append ( { \"account\" : account , \"password\" : password , \"sessions\" : sessions , \"port\" : port , } ) port += 1 more_account = input ( \"\u7ee7\u7eed\u914d\u7f6e\u65b0\u7684\u8d26\u53f7[y|N]? \\n \" ) . upper () == \"Y\" settings [ \"quotes_fetchers\" ] = [] append_fetcher ( settings , { \"impl\" : \"jqadaptor\" , \"workers\" : workers }) config_postgres ( settings ) async \u00b6 \u914d\u7f6e\u6570\u636e\u8fde\u63a5\u5e76\u8fdb\u884c\u6d4b\u8bd5 Source code in omega/cli.py async def config_postgres ( settings ): \"\"\"\u914d\u7f6e\u6570\u636e\u8fde\u63a5\u5e76\u8fdb\u884c\u6d4b\u8bd5\"\"\" msg = \"\"\" \u914d\u7f6e\u6570\u636e\u5e93\u5e76\u975e\u5fc5\u987b\u3002\u5982\u679c\u60a8\u4ec5\u9650\u4e8e\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f7f\u7528Zillionare-omega\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u914d\u7f6e \u6570\u636e\u5e93\u66f4\u591a\u4fe1\u606f\uff0c \\\\ n\u8bf7\u53c2\u9605https://readthedocs.org/projects/zillionare-omega/ \\\\ n\u8df3\u8fc7\u6b64\u9879[S], \u4efb\u610f\u952e\u7ee7\u7eed: \"\"\" choice = input ( format_msg ( msg )) if choice . upper () == \"S\" : return action = \"R\" while action == \"R\" : host = get_input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668\u5730\u5740\uff0c\" , None , os . environ . get ( \"POSTGRES_HOST\" ) or \"localhost\" ) port = get_input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668\u7aef\u53e3\uff0c\" , is_valid_port , os . environ . get ( \"POSTGRES_PORT\" ) or 5432 ) account = get_input ( \"\u8bf7\u8f93\u5165\u8d26\u53f7,\" , None , os . environ . get ( \"POSTGRES_USER\" )) password = get_input ( \"\u8bf7\u8f93\u5165\u5bc6\u7801,\" , None , os . environ . get ( \"POSTGRES_PASSWORD\" )) dbname = get_input ( \"\u8bf7\u8f93\u5165\u6570\u636e\u5e93\u540d,\" , None , os . environ . get ( \"POSTGRES_DB\" ) or \"zillionare\" ) print ( \"\u6b63\u5728\u6d4b\u8bd5Postgres\u8fde\u63a5...\" ) dsn = f \"postgres:// { account } : { password } @ { host } : { port } / { dbname } \" if await check_postgres ( dsn ): update_config ( settings , \"postgres.dsn\" , dsn ) update_config ( settings , \"postgres.enabled\" , True ) print ( f \"[ { colored ( 'PASS' , 'green' ) } ] \u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\uff0c\u5e76\u6210\u529f\u521d\u59cb\u5316\uff01\" ) return True else : hint = f \"[ { colored ( 'FAIL' , 'red' ) } ] \u5ffd\u7565\u9519\u8bef[C]\uff0c\u91cd\u65b0\u8f93\u5165[R]\uff0c\u9000\u51fa[Q]\" action = choose_action ( hint ) find_fetcher_processes () async \u00b6 \u4eceredis\u4e2d\u67e5\u627e\u5df2\u542f\u52a8\u7684fetcher\u8fdb\u7a0b \u8fd4\u56de f\"{impl}:{gid}\" -> (pid, port, alive) Source code in omega/cli.py async def find_fetcher_processes (): \"\"\"\u4eceredis\u4e2d\u67e5\u627e\u5df2\u542f\u52a8\u7684fetcher\u8fdb\u7a0b \u8fd4\u56de f\"{impl}:{gid}\" -> (pid, port, alive) \"\"\" results = [] keys = await cache . sys . keys ( \"process.fetchers.*\" ) for key in keys : info = await cache . sys . hgetall ( key ) heartbeat = float ( info [ \"heartbeat\" ]) group = f \" { info [ 'impl' ] } : { info [ 'gid' ] } \" pid = int ( info [ \"pid\" ]) port = int ( info [ \"port\" ]) alive = time . time () - heartbeat < 10 results . append (( pid , port , alive , group )) return results format_msg ( msg ) \u00b6 \u683c\u5f0f\u5316msg\u5e76\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u672c\u51fd\u6570\u5141\u8bb8\u5728\u5199\u4ee3\u7801\u65f6\u6309\u683c\u5f0f\u8981\u6c42\u8fdb\u884c\u7f29\u8fdb\u548c\u6392\u7248\uff0c\u4f46\u5728\u8f93\u51fa\u65f6\uff0c\u8fd9\u4e9b\u683c\u5f0f\u90fd\u4f1a\u88ab\u79fb\u9664\uff1b\u5bf9\u8f83\u957f\u7684\u6587\u672c\uff0c \u6309\u6bcf80\u4e2a\u5b57\u7b26\u4e3a\u4e00\u884c\u8fdb\u884c\u8f93\u51fa\u3002 \u5982\u679c\u9700\u8981\u5728msg\u4e2d\u63d2\u5165\u6362\u884c\u6216\u8005\u5236\u8868\u7b26\uff0c\u4f7f\u7528 \\n \u548c \\t \u3002 Parameters: Name Type Description Default msg str required Source code in omega/cli.py def format_msg ( msg : str ): \"\"\"\u683c\u5f0f\u5316msg\u5e76\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u672c\u51fd\u6570\u5141\u8bb8\u5728\u5199\u4ee3\u7801\u65f6\u6309\u683c\u5f0f\u8981\u6c42\u8fdb\u884c\u7f29\u8fdb\u548c\u6392\u7248\uff0c\u4f46\u5728\u8f93\u51fa\u65f6\uff0c\u8fd9\u4e9b\u683c\u5f0f\u90fd\u4f1a\u88ab\u79fb\u9664\uff1b\u5bf9\u8f83\u957f\u7684\u6587\u672c\uff0c \u6309\u6bcf80\u4e2a\u5b57\u7b26\u4e3a\u4e00\u884c\u8fdb\u884c\u8f93\u51fa\u3002 \u5982\u679c\u9700\u8981\u5728msg\u4e2d\u63d2\u5165\u6362\u884c\u6216\u8005\u5236\u8868\u7b26\uff0c\u4f7f\u7528`\\\\n`\u548c`\\\\t`\u3002 args: msg: returns: \"\"\" msg = re . sub ( r \"\\n\\s+\" , \"\" , msg ) msg = re . sub ( r \"[\\t\\n]\" , \"\" , msg ) msg = msg . replace ( \" \\\\ t\" , \" \\t \" ) . replace ( \" \\\\ n\" , \" \\n \" ) lines = msg . split ( \" \\n \" ) msg = [] for line in lines : for i in range ( int ( len ( line ) / 80 + 1 )): msg . append ( line [ i * 80 : min ( len ( line ), ( i + 1 ) * 80 )]) return \" \\n \" . join ( msg ) setup ( reset_factory = False , force = False ) async \u00b6 \u5b89\u88c5\u521d\u59cb\u5316\u5165\u53e3 Parameters: Name Type Description Default reset_factory reset to factory settings False force if true, force setup no matter if run already False Source code in omega/cli.py async def setup ( reset_factory = False , force = False ): \"\"\"\u5b89\u88c5\u521d\u59cb\u5316\u5165\u53e3 Args: reset_factory: reset to factory settings force: if true, force setup no matter if run already Returns: \"\"\" msg = \"\"\" Zillionare-omega (\u5927\u5bcc\u7fc1) \\\\ n ------------------------- \\\\ n \u611f\u8c22\u4f7f\u7528Zillionare-omega -- \u9ad8\u901f\u5206\u5e03\u5f0f\u884c\u60c5\u670d\u52a1\u5668\uff01 \\\\ n \"\"\" print ( format_msg ( msg )) if not force : config_file = os . path . join ( get_config_dir (), \"defaults.yaml\" ) if os . path . exists ( config_file ): print ( f \" { colored ( '[PASS]' , 'green' ) } \u5b89\u88c5\u7a0b\u5e8f\u5df2\u5728\u672c\u673a\u4e0a\u6210\u529f\u8fd0\u884c\" ) return if reset_factory : import sh dst = get_config_dir () os . makedirs ( dst , exist_ok = True ) src = os . path . join ( factory_config_dir (), \"defaults.yaml\" ) dst = os . path . join ( get_config_dir (), \"defaults.yaml\" ) sh . cp ( \"-r\" , src , dst ) print_title ( \"Step 1. \u68c0\u6d4b\u5b89\u88c5\u73af\u5883...\" ) settings = load_factory_settings () if not check_environment (): return print_title ( \"Step 2. \u914d\u7f6e\u65e5\u5fd7\" ) config_logging ( settings ) print_title ( \"Step 3. \u914d\u7f6e\u4e0a\u6e38\u670d\u52a1\u5668\" ) config_fetcher ( settings ) print_title ( \"Step 4. \u914d\u7f6eRedis\u670d\u52a1\u5668\" ) await config_redis ( settings ) print_title ( \"Step 5. \u914d\u7f6ePostgres\u670d\u52a1\u5668\" ) await config_postgres ( settings ) save_config ( settings ) print_title ( \"Step 6. \u4e0b\u8f7d\u5386\u53f2\u6570\u636e\" ) config_dir = get_config_dir () cfg4py . init ( config_dir , False ) remove_console_log_handler () await start ( \"fetcher\" ) await download_archive ( None ) print_title ( \"\u914d\u7f6e\u5df2\u5b8c\u6210\u3002\u73b0\u5728\u4e3a\u60a8\u542f\u52a8Omega,\u5f00\u542f\u8d22\u5bcc\u4e4b\u65c5\uff01\" ) await start ( \"jobs\" ) await status () start ( service = '' ) async \u00b6 \u542f\u52a8omega\u4e3b\u8fdb\u7a0b\u6216\u8005\u4efb\u52a1\u7ba1\u7406\u8fdb\u7a0b Parameters: Name Type Description Default service str if service is '', then starts fetcher processes. '' Source code in omega/cli.py async def start ( service : str = \"\" ): \"\"\"\u542f\u52a8omega\u4e3b\u8fdb\u7a0b\u6216\u8005\u4efb\u52a1\u7ba1\u7406\u8fdb\u7a0b Args: service: if service is '', then starts fetcher processes. Returns: \"\"\" print ( f \"\u6b63\u5728\u542f\u52a8zillionare-omega { colored ( service , 'green' ) } ...\" ) config_dir = get_config_dir () cfg4py . init ( config_dir , False ) if service == \"\" : await _start_jobs () await _start_fetcher_processes () elif service == \"jobs\" : return await _start_jobs () elif service == \"fetcher\" : return await _start_fetcher_processes () else : print ( \"\u4e0d\u652f\u6301\u7684\u670d\u52a1\" ) sync_bars ( frame = None , codes = None ) async \u00b6 \u7acb\u5373\u540c\u6b65\u884c\u60c5\u6570\u636e \u5982\u679c frame , codes \u6ca1\u6709\u63d0\u4f9b\uff0c\u5219\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default frame str None codes str None Source code in omega/cli.py async def sync_bars ( frame : str = None , codes : str = None ): \"\"\"\u7acb\u5373\u540c\u6b65\u884c\u60c5\u6570\u636e \u5982\u679c`frame`, `codes`\u6ca1\u6709\u63d0\u4f9b\uff0c\u5219\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5173\u4fe1\u606f Args: frame: codes: Returns: \"\"\" await _init () if frame : frame_type = FrameType ( frame ) params = syncjobs . load_sync_params ( frame_type ) if codes : params [ \"cat\" ] = None params [ \"include\" ] = codes await syncjobs . trigger_bars_sync ( params , force = True ) logger . info ( \"request %s , %s send to workers.\" , params , codes ) else : for frame_type in itertools . chain ( tf . day_level_frames , tf . minute_level_frames ): params = syncjobs . load_sync_params ( frame_type ) if not params : continue if codes : params [ \"cat\" ] = None params [ \"include\" ] = codes await syncjobs . trigger_bars_sync ( params , force = True ) logger . info ( \"request %s , %s send to workers.\" , params , codes ) sync_calendar () async \u00b6 \u53d1\u8d77\u540c\u6b65\u4ea4\u6613\u65e5\u5386\u8bf7\u6c42 Source code in omega/cli.py async def sync_calendar (): \"\"\"\u53d1\u8d77\u540c\u6b65\u4ea4\u6613\u65e5\u5386\u8bf7\u6c42\"\"\" await _init () await syncjobs . trigger_single_worker_sync ( \"calendar\" ) sync_sec_list () async \u00b6 \u53d1\u8d77\u540c\u6b65\u8bc1\u5238\u5217\u8868\u8bf7\u6c42 Source code in omega/cli.py async def sync_sec_list (): \"\"\"\u53d1\u8d77\u540c\u6b65\u8bc1\u5238\u5217\u8868\u8bf7\u6c42\"\"\" await _init () await syncjobs . trigger_single_worker_sync ( \"security_list\" ) config special \u00b6 Author: Aaron-Yang [code@jieyu.ai] Contributors: core special \u00b6 Author: Aaron-Yang [code@jieyu.ai] Contributors: accelerate \u00b6 Author: Aaron-Yang [code@jieyu.ai] Contributors: things need speed merge ( left , right , by ) \u00b6 merge two numpy structured arrays by by key njit fail if one of left, right contains object, not plain type, but the loop is very fast, cost 0.0001 seconds Parameters: Name Type Description Default left [type] [description] required right [type] [description] required by [type] [description] required Returns: Type Description [type] [description] Source code in omega/core/accelerate.py def merge ( left , right , by ): \"\"\"merge two numpy structured arrays by `by` key njit fail if one of left, right contains object, not plain type, but the loop is very fast, cost 0.0001 seconds Args: left ([type]): [description] right ([type]): [description] by ([type]): [description] Returns: [type]: [description] \"\"\" i , j = 0 , 0 while j < len ( right ) and i < len ( left ): if right [ j ][ by ] < left [ by ][ i ]: j += 1 elif right [ j ][ by ] == left [ by ][ i ]: left [ i ] = right [ j ] i += 1 j += 1 else : i += 1 return left sanity \u00b6 Author: Aaron-Yang [code@jieyu.ai] Contributors: calc_checksums ( day , codes ) async \u00b6 Parameters: Name Type Description Default day date required codes List required Returns: Type Description dict \u8fd4\u56de\u503c\u4e3a\u4ee5code\u4e3a\u952e\uff0c\u8be5\u8bc1\u5238\u5bf9\u5e94\u7684{\u5468\u671f\uff1achecksum}\u7684\u96c6\u5408\u4e3a\u503c\u7684\u96c6\u5408 Source code in omega/core/sanity.py async def calc_checksums ( day : datetime . date , codes : List ) -> dict : \"\"\" Args: day: codes: Returns: \u8fd4\u56de\u503c\u4e3a\u4ee5code\u4e3a\u952e\uff0c\u8be5\u8bc1\u5238\u5bf9\u5e94\u7684{\u5468\u671f\uff1achecksum}\u7684\u96c6\u5408\u4e3a\u503c\u7684\u96c6\u5408 \"\"\" end_time = arrow . get ( day , tzinfo = cfg . tz ) . replace ( hour = 15 ) checksums = {} for i , code in enumerate ( codes ): try : checksum = {} d = await cache . get_bars_raw_data ( code , day , 1 , FrameType . DAY ) if d : checksum [ f \" { FrameType . DAY . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 240 , FrameType . MIN1 ) if d : checksum [ f \" { FrameType . MIN1 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 48 , FrameType . MIN5 ) if d : checksum [ f \" { FrameType . MIN5 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 16 , FrameType . MIN15 ) if d : checksum [ f \" { FrameType . MIN15 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 8 , FrameType . MIN30 ) if d : checksum [ f \" { FrameType . MIN30 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 4 , FrameType . MIN60 ) if d : checksum [ f \" { FrameType . MIN60 . value } \" ] = xxhash . xxh32_hexdigest ( d ) checksums [ code ] = checksum except Exception as e : logger . exception ( e ) if ( i + 1 ) % 500 == 0 : logger . info ( \"calc checksum progress: %s / %s \" , i + 1 , len ( codes )) return checksums do_validation ( secs = None , start = None , end = None ) async \u00b6 \u5bf9\u5217\u8868secs\u4e2d\u6307\u5b9a\u7684\u8bc1\u5238\u884c\u60c5\u6570\u636e\u6309start\u5230end\u6307\u5b9a\u7684\u65f6\u95f4\u8303\u56f4\u8fdb\u884c\u6821\u9a8c Parameters: Name Type Description Default secs List[str] [description]. Defaults to None. None start str [description]. Defaults to None. None end str [description]. Defaults to None. None Returns: Type Description [type] [description] Source code in omega/core/sanity.py async def do_validation ( secs : List [ str ] = None , start : str = None , end : str = None ): \"\"\"\u5bf9\u5217\u8868secs\u4e2d\u6307\u5b9a\u7684\u8bc1\u5238\u884c\u60c5\u6570\u636e\u6309start\u5230end\u6307\u5b9a\u7684\u65f6\u95f4\u8303\u56f4\u8fdb\u884c\u6821\u9a8c Args: secs (List[str], optional): [description]. Defaults to None. start (str, optional): [description]. Defaults to None. end (str, optional): [description]. Defaults to None. Returns: [type]: [description] \"\"\" logger . info ( \"start validation...\" ) report = logging . getLogger ( \"validation_report\" ) cfg = cfg4py . init ( get_config_dir (), False ) await emit . start ( engine = emit . Engine . REDIS , dsn = cfg . redis . dsn , start_server = True ) await omicron . init () start = int ( start or await cache . sys . get ( \"jobs.bars_validation.range.start\" )) if end is None : end = tf . date2int ( arrow . now () . date ()) else : end = int ( end or await cache . sys . get ( \"jobs.bars_validation.range.stop\" )) if secs is None : async def get_sec (): return await cache . sys . lpop ( \"jobs.bars_validation.scope\" ) else : async def get_sec (): return secs . pop () if len ( secs ) else None errors = 0 while code := await get_sec (): try : for day in tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )]: expected = await get_checksum ( day ) if expected and expected . get ( code ): actual = await calc_checksums ( tf . int2date ( day ), [ code ]) d1 = actual . get ( code ) d2 = expected . get ( code ) missing1 = d2 . keys () - d1 # local has no checksum missing2 = d1 . keys () - d2 # remote has no checksum mismatch = { k for k in d1 . keys () & d2 if d1 [ k ] != d2 [ k ]} for k in missing1 : info = ( ValidationError . LOCAL_MISS , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) for k in missing2 : info = ( ValidationError . REMOTE_MISS , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) for k in mismatch : info = ( ValidationError . MISMATCH , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) else : logger . error ( \"checksum for %s not found.\" , day ) info = ( ValidationError . NO_CHECKSUM , day , None , None , None , None ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) except Exception as e : logger . exception ( e ) errors += 1 await emit . emit ( Events . OMEGA_VALIDATION_ERROR , ( ValidationError . UNKNOWN , errors )) logger . warning ( \"do_validation meet %s unknown errors\" , errors ) on_validation_error ( report ) async \u00b6 Parameters: Name Type Description Default report tuple object like ::(reason, day, code, frame, local, remote) required Source code in omega/core/sanity.py async def on_validation_error ( report : tuple ): \"\"\" Args: report: object like ::(reason, day, code, frame, local, remote) Returns: \"\"\" global validation_errors , no_validation_error_days # todo: raise no checksum issue if report [ 0 ] == ValidationError . UNKNOWN : no_validation_error_days = set () else : validation_errors . append ( report ) if report [ 1 ] is not None : no_validation_error_days -= { report [ 1 ]} start_validation () async \u00b6 \u5c06\u5f85\u6821\u9a8c\u7684\u8bc1\u5238\u6309CPU\u4e2a\u6570\u5747\u5300\u5212\u5206\uff0c\u521b\u5efa\u4e0eCPU\u4e2a\u6570\u76f8\u540c\u7684\u5b50\u8fdb\u7a0b\u6765\u6267\u884c\u6821\u9a8c\u3002\u6821\u9a8c\u7684\u8d77\u59cb\u65f6\u95f4\u7531\u6570\u636e \u5e93\u4e2djobs.bars_validation.range.start\u548cjobs.bars_validation.range.stop\u6765\u51b3\u5b9a\uff0c\u6bcf\u6b21\u6821\u9a8c \u7ed3\u675f\u540e\uff0c\u5c06jobs.bars_validation.range.start\u66f4\u65b0\u4e3a\u6821\u9a8c\u622a\u6b62\u7684\u6700\u540e\u4ea4\u6613\u65e5\u3002\u5982\u679c\u5404\u4e2a\u5b50\u8fdb\u7a0b\u62a5\u544a \u7684\u622a\u6b62\u4ea4\u6613\u65e5\u4e0d\u4e00\u6837\uff08\u6bd4\u5982\u53d1\u751f\u4e86\u5f02\u5e38\uff09\uff0c\u5219\u4f7f\u7528\u6700\u5c0f\u7684\u4ea4\u6613\u65e5\u3002 Source code in omega/core/sanity.py async def start_validation (): \"\"\" \u5c06\u5f85\u6821\u9a8c\u7684\u8bc1\u5238\u6309CPU\u4e2a\u6570\u5747\u5300\u5212\u5206\uff0c\u521b\u5efa\u4e0eCPU\u4e2a\u6570\u76f8\u540c\u7684\u5b50\u8fdb\u7a0b\u6765\u6267\u884c\u6821\u9a8c\u3002\u6821\u9a8c\u7684\u8d77\u59cb\u65f6\u95f4\u7531\u6570\u636e \u5e93\u4e2djobs.bars_validation.range.start\u548cjobs.bars_validation.range.stop\u6765\u51b3\u5b9a\uff0c\u6bcf\u6b21\u6821\u9a8c \u7ed3\u675f\u540e\uff0c\u5c06jobs.bars_validation.range.start\u66f4\u65b0\u4e3a\u6821\u9a8c\u622a\u6b62\u7684\u6700\u540e\u4ea4\u6613\u65e5\u3002\u5982\u679c\u5404\u4e2a\u5b50\u8fdb\u7a0b\u62a5\u544a \u7684\u622a\u6b62\u4ea4\u6613\u65e5\u4e0d\u4e00\u6837\uff08\u6bd4\u5982\u53d1\u751f\u4e86\u5f02\u5e38\uff09\uff0c\u5219\u4f7f\u7528\u6700\u5c0f\u7684\u4ea4\u6613\u65e5\u3002 \"\"\" global validation_errors , no_validation_error_days validation_errors = [] secs = Securities () cpu_count = psutil . cpu_count () # to check if the range is right pl = cache . sys . pipeline () pl . get ( \"jobs.bars_validation.range.start\" ) pl . get ( \"jobs.bars_validation.range.end\" ) start , end = await pl . execute () if start is None : if cfg . omega . validation . start is None : logger . warning ( \"start of validation is not specified, validation aborted.\" ) return else : start = tf . date2int ( arrow . get ( cfg . omega . validation . start )) else : start = int ( start ) if end is None : end = tf . date2int ( tf . floor ( arrow . now () . date (), FrameType . DAY )) else : end = int ( end ) assert start <= end no_validation_error_days = set ( tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )] ) # fixme: do validation per frame_type # fixme: test fail. Rewrite this before 0.6 releases codes = secs . choose ( cfg . omega . sync ) await cache . sys . delete ( \"jobs.bars_validation.scope\" ) await cache . sys . lpush ( \"jobs.bars_validation.scope\" , * codes ) logger . info ( \"start validation %s secs from %s to %s .\" , len ( codes ), start , end ) emit . register ( Events . OMEGA_VALIDATION_ERROR , on_validation_error ) t0 = time . time () code = ( \"from omega.core.sanity import do_validation_process_entry; \" \"do_validation_process_entry()\" ) procs = [] for i in range ( cpu_count ): proc = subprocess . Popen ([ sys . executable , \"-c\" , code ], env = os . environ ) procs . append ( proc ) timeout = 3600 while timeout > 0 : await asyncio . sleep ( 2 ) timeout -= 2 for proc in procs : proc . poll () if all ([ proc . returncode is not None for proc in procs ]): break if timeout <= 0 : for proc in procs : try : os . kill ( proc . pid , signal . SIGTERM ) except Exception : pass # set next start point validation_days = set ( tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )] ) diff = validation_days - no_validation_error_days if len ( diff ): last_no_error_day = min ( diff ) else : last_no_error_day = end await cache . sys . set ( \"jobs.bars_validation.range.start\" , last_no_error_day ) elapsed = time . time () - t0 logger . info ( \"Validation cost %s seconds, validation will start at %s next time\" , elapsed , last_no_error_day , ) fetcher special \u00b6 quotes fetcher abstract_quotes_fetcher \u00b6 This is a awesome python script! AbstractQuotesFetcher \u00b6 get_all_trade_days () async classmethod \u00b6 \u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_all_trade_days ( cls ): days = await cls . get_instance () . get_all_trade_days () await cache . save_calendar ( \"day_frames\" , map ( tf . date2int , days )) return days get_bars ( sec , end , n_bars , frame_type , include_unclosed = True ) async classmethod \u00b6 \u83b7\u53d6\u884c\u60c5\u6570\u636e\uff0c\u5e76\u5c06\u5df2\u7ed3\u675f\u7684\u5468\u671f\u6570\u636e\u5b58\u5165\u7f13\u5b58\u3002 \u5404\u79cd\u60c5\u51b5\uff1a 1. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\uff0c\u76d8\u4e2d\u3002\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u4e14 include_unclosed \u4e3a True \uff1a get_bars ( \"000001.XSHE\" , None , 1 , FrameType . DAY ) \u5f97\u5230\u7684\u6570\u636e\u53ef\u80fd\u5982\u4e0b\uff1a [(datetime.date(2021, 2, 24), 3638.9358, 3645.5288, 3617.44, 3620.3542, ...)] \u5728\u6536\u76d8\u524d\u4e0d\u540c\u65f6\u95f4\u8c03\u7528\uff0c\u5f97\u5230\u7684\u6570\u636e\u9664\u5f00\u76d8\u4ef7\u5916\uff0c\u5176\u5b83\u90fd\u5b9e\u65f6\u5728\u53d8\u52a8\u3002 \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-23\u65e5\uff0c\u76d8\u540e\uff0c\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u5c06\u5f97\u5230\u6536\u76d8\u540e\u56fa\u5b9a\u7684\u4ef7\u683c\u3002 \u4e0a\u8ff0\u8bf7\u6c42\u4e2d\uff0c include_unclosed \u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c( True )\u3002\u5982\u679c\u53d6\u4e3a False \uff0c\u4ecd\u4ee5\u793a\u4f8b1 \u6307\u5b9a\u7684\u573a\u666f\u4e3a\u4f8b\uff0c\u5219: get_bars ( \"000001.XSHG\" , None , 1 , FrameType . DAY , False ) \u56e0\u4e3a2021-2-24\u65e5\u672a\u6536\u76d8\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u6700\u540e\u4e00\u6761\u6570\u636e\u662f2021-2-23\u65e5\u7684\u3002 \u540c\u6837\u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\u76d8\u4e2d\uff0c\u5468\u4e09\u3002\u6b64\u65f6\u83b7\u53d6\u5468K\u7ebf\u3002\u5728 include_unclosed \u5206\u522b\u4e3a True \u548c False \u7684\u60c5\u51b5\u4e0b\uff1a [(datetime.date(2021, 2, 24), 3707.19, 3717.27, 3591.3647, 3592.3977, ...)] [(datetime.date(2021, 2, 19), 3721.09, 3731.69, 3634.01, 3696.17, ...)] \u6ce8\u610f\u8fd9\u91cc\u5f53 include_unclosed \u4e3aTrue\u65f6\uff0c\u8fd4\u56de\u7684\u5468K\u7ebf\u662f\u4ee52021-2-24\u4e3aFrame\u7684\u3002\u540c\u6837\uff0c\u5728\u76d8\u4e2d \u7684\u4e0d\u540c\u65f6\u95f4\u53d6\u8fd9\u4e2a\u6570\u636e\uff0c\u9664\u4e86 open \u6570\u503c\u4e4b\u5916\uff0c\u5176\u5b83\u90fd\u662f\u5b9e\u65f6\u53d8\u5316\u7684\u3002 \u5982\u679c\u5728\u5df2\u7ed3\u675f\u7684\u5468\u671f\u4e2d\uff0c\u5305\u542b\u505c\u724c\u6570\u636e\uff0c\u5219\u4f1a\u5bf9\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u8fdb\u884cnan\u586b\u5145\uff0c\u4ee5\u65b9\u4fbf\u6570\u636e\u4f7f\u7528 \u8005\u53ef\u4ee5\u8f83\u5bb9\u6613\u5730\u5206\u8fa8\u51fa\u6570\u636e\u4e0d\u8fde\u8d2f\u7684\u539f\u56e0\uff1a\u54ea\u4e9b\u662f\u505c\u724c\u9020\u6210\u7684\uff0c\u54ea\u4e9b\u662f\u975e\u4ea4\u6613\u65e5\u9020\u6210\u7684\u3002\u8fd9\u79cd\u5904\u7406 \u4f1a\u7565\u5fae\u964d\u4f4e\u6570\u636e\u83b7\u53d6\u901f\u5ea6\uff0c\u5e76\u589e\u52a0\u5b58\u50a8\u7a7a\u95f4\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42: get_bars ( \"000029.XSHE\" , datetime . date ( 2020 , 8 , 18 ), 10 , FrameType . DAY ) \u5c06\u83b7\u53d6\u52302020-8-5\u52302020-8-18\u95f4\u517110\u6761\u6570\u636e\u3002\u4f46\u7531\u4e8e\u671f\u95f4000029\u8fd9\u652f\u80a1\u7968\u5904\u4e8e\u505c\u724c\u671f\uff0c\u6240\u4ee5\u8fd4\u56de \u768410\u6761\u6570\u636e\u4e2d\uff0c\u6570\u503c\u90e8\u5206\u5168\u90e8\u586b\u5145\u4e3anp.nan\u3002 \u6ce8\u610f\u5982\u679c\u53d6\u5468\u7ebf\u548c\u6708\u7ebf\u6570\u636e\uff0c\u5982\u679c\u5f53\u5929\u505c\u724c\uff0c\u4f46\u53ea\u8981\u5468\u7ebf\u6709\u6570\u636e\uff0c\u5219\u4ecd\u80fd\u53d6\u5230\u3002\u5468\u7ebf\uff08\u6216\u8005\u6708\u7ebf\uff09\u7684 frame \u5c06\u662f\u505c\u724c\u524d\u4e00\u4ea4\u6613\u65e5\u3002\u6bd4\u5982\uff0c sec = \"600721.XSHG\" frame_type = FrameType . WEEK end = arrow . get ( \"2020-4-29 15:00\" ) . datetime bars = await aq . get_bars ( sec , end , 3 , FrameType . WEEK ) print ( bars ) 2020\u5e744\u670830\u65e5\u662f\u8be5\u5468\u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\u3002\u80a1\u7968600721\u57284\u670829\u65e5\u505c\u724c\u4e00\u5929\u3002\u4e0a\u8ff0\u8bf7\u6c42\u5c06\u5f97\u5230\u5982\u4e0b\u6570 \u636e\uff1a [(datetime.date(2020, 4, 17), 6.02, 6.69, 5.84, 6.58, ...) (datetime.date(2020, 4, 24), 6.51, 6.57, 5.68, 5.72, ...) (datetime.date(2020, 4, 28), 5.7, 5.71, 5.17, 5.36, ...)] \u505c\u724c\u53d1\u751f\u5728\u65e5\u7ebf\u7ea7\u522b\u4e0a\uff0c\u4f46\u6211\u4eec\u7684\u8bf7\u6c42\u53d1\u751f\u5728\u5468\u7ebf\u7ea7\u522b\u4e0a\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf94/29\u65e5\u8fdb\u884c\u586b\u5145\uff0c\u800c\u662f\u8fd4\u56de \u622a\u6b62\u52304\u670829\u65e5\u7684\u6570\u636e\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Union[datetime.date, datetime.datetime] \u6570\u636e\u622a\u6b62\u65e5 required n_bars int \u5f85\u83b7\u53d6\u7684\u6570\u636e\u6761\u6570 required frame_type FrameType \u6570\u636e\u6240\u5c5e\u7684\u5468\u671f required include_unclosed \u5982\u679c\u4e3a\u771f\uff0c\u5219\u4f1a\u5305\u542b\u5f53end\u6240\u5904\u7684\u90a3\u4e2aFrame\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5f53\u524d\u5b83\u8fd8\u672a\u7ed3\u675f True Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_bars ( cls , sec : str , end : Frame , n_bars : int , frame_type : FrameType , include_unclosed = True , ) -> np . ndarray : \"\"\"\u83b7\u53d6\u884c\u60c5\u6570\u636e\uff0c\u5e76\u5c06\u5df2\u7ed3\u675f\u7684\u5468\u671f\u6570\u636e\u5b58\u5165\u7f13\u5b58\u3002 \u5404\u79cd\u60c5\u51b5\uff1a 1. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\uff0c\u76d8\u4e2d\u3002\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u4e14`include_unclosed`\u4e3a `True`\uff1a ```python get_bars(\"000001.XSHE\", None, 1, FrameType.DAY) ``` \u5f97\u5230\u7684\u6570\u636e\u53ef\u80fd\u5982\u4e0b\uff1a ``` [(datetime.date(2021, 2, 24), 3638.9358, 3645.5288, 3617.44, 3620.3542, ...)] ``` \u5728\u6536\u76d8\u524d\u4e0d\u540c\u65f6\u95f4\u8c03\u7528\uff0c\u5f97\u5230\u7684\u6570\u636e\u9664\u5f00\u76d8\u4ef7\u5916\uff0c\u5176\u5b83\u90fd\u5b9e\u65f6\u5728\u53d8\u52a8\u3002 2. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-23\u65e5\uff0c\u76d8\u540e\uff0c\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u5c06\u5f97\u5230\u6536\u76d8\u540e\u56fa\u5b9a\u7684\u4ef7\u683c\u3002 3. \u4e0a\u8ff0\u8bf7\u6c42\u4e2d\uff0c`include_unclosed`\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c(`True`)\u3002\u5982\u679c\u53d6\u4e3a`False`\uff0c\u4ecd\u4ee5\u793a\u4f8b1 \u6307\u5b9a\u7684\u573a\u666f\u4e3a\u4f8b\uff0c\u5219: ```python get_bars(\"000001.XSHG\", None, 1, FrameType.DAY, False) ``` \u56e0\u4e3a2021-2-24\u65e5\u672a\u6536\u76d8\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u6700\u540e\u4e00\u6761\u6570\u636e\u662f2021-2-23\u65e5\u7684\u3002 4. \u540c\u6837\u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\u76d8\u4e2d\uff0c\u5468\u4e09\u3002\u6b64\u65f6\u83b7\u53d6\u5468K\u7ebf\u3002\u5728`include_unclosed`\u5206\u522b\u4e3a `True`\u548c`False`\u7684\u60c5\u51b5\u4e0b\uff1a ``` [(datetime.date(2021, 2, 24), 3707.19, 3717.27, 3591.3647, 3592.3977, ...)] [(datetime.date(2021, 2, 19), 3721.09, 3731.69, 3634.01, 3696.17, ...)] ``` \u6ce8\u610f\u8fd9\u91cc\u5f53`include_unclosed`\u4e3aTrue\u65f6\uff0c\u8fd4\u56de\u7684\u5468K\u7ebf\u662f\u4ee52021-2-24\u4e3aFrame\u7684\u3002\u540c\u6837\uff0c\u5728\u76d8\u4e2d \u7684\u4e0d\u540c\u65f6\u95f4\u53d6\u8fd9\u4e2a\u6570\u636e\uff0c\u9664\u4e86`open`\u6570\u503c\u4e4b\u5916\uff0c\u5176\u5b83\u90fd\u662f\u5b9e\u65f6\u53d8\u5316\u7684\u3002 5. \u5982\u679c\u5728\u5df2\u7ed3\u675f\u7684\u5468\u671f\u4e2d\uff0c\u5305\u542b\u505c\u724c\u6570\u636e\uff0c\u5219\u4f1a\u5bf9\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u8fdb\u884cnan\u586b\u5145\uff0c\u4ee5\u65b9\u4fbf\u6570\u636e\u4f7f\u7528 \u8005\u53ef\u4ee5\u8f83\u5bb9\u6613\u5730\u5206\u8fa8\u51fa\u6570\u636e\u4e0d\u8fde\u8d2f\u7684\u539f\u56e0\uff1a\u54ea\u4e9b\u662f\u505c\u724c\u9020\u6210\u7684\uff0c\u54ea\u4e9b\u662f\u975e\u4ea4\u6613\u65e5\u9020\u6210\u7684\u3002\u8fd9\u79cd\u5904\u7406 \u4f1a\u7565\u5fae\u964d\u4f4e\u6570\u636e\u83b7\u53d6\u901f\u5ea6\uff0c\u5e76\u589e\u52a0\u5b58\u50a8\u7a7a\u95f4\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42: ```python get_bars(\"000029.XSHE\", datetime.date(2020,8,18), 10, FrameType.DAY) ``` \u5c06\u83b7\u53d6\u52302020-8-5\u52302020-8-18\u95f4\u517110\u6761\u6570\u636e\u3002\u4f46\u7531\u4e8e\u671f\u95f4000029\u8fd9\u652f\u80a1\u7968\u5904\u4e8e\u505c\u724c\u671f\uff0c\u6240\u4ee5\u8fd4\u56de \u768410\u6761\u6570\u636e\u4e2d\uff0c\u6570\u503c\u90e8\u5206\u5168\u90e8\u586b\u5145\u4e3anp.nan\u3002 \u6ce8\u610f\u5982\u679c\u53d6\u5468\u7ebf\u548c\u6708\u7ebf\u6570\u636e\uff0c\u5982\u679c\u5f53\u5929\u505c\u724c\uff0c\u4f46\u53ea\u8981\u5468\u7ebf\u6709\u6570\u636e\uff0c\u5219\u4ecd\u80fd\u53d6\u5230\u3002\u5468\u7ebf\uff08\u6216\u8005\u6708\u7ebf\uff09\u7684 `frame`\u5c06\u662f\u505c\u724c\u524d\u4e00\u4ea4\u6613\u65e5\u3002\u6bd4\u5982\uff0c ```python sec = \"600721.XSHG\" frame_type = FrameType.WEEK end = arrow.get(\"2020-4-29 15:00\").datetime bars = await aq.get_bars(sec, end, 3, FrameType.WEEK) print(bars) ``` 2020\u5e744\u670830\u65e5\u662f\u8be5\u5468\u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\u3002\u80a1\u7968600721\u57284\u670829\u65e5\u505c\u724c\u4e00\u5929\u3002\u4e0a\u8ff0\u8bf7\u6c42\u5c06\u5f97\u5230\u5982\u4e0b\u6570 \u636e\uff1a ``` [(datetime.date(2020, 4, 17), 6.02, 6.69, 5.84, 6.58, ...) (datetime.date(2020, 4, 24), 6.51, 6.57, 5.68, 5.72, ...) (datetime.date(2020, 4, 28), 5.7, 5.71, 5.17, 5.36, ...)] ``` \u505c\u724c\u53d1\u751f\u5728\u65e5\u7ebf\u7ea7\u522b\u4e0a\uff0c\u4f46\u6211\u4eec\u7684\u8bf7\u6c42\u53d1\u751f\u5728\u5468\u7ebf\u7ea7\u522b\u4e0a\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf94/29\u65e5\u8fdb\u884c\u586b\u5145\uff0c\u800c\u662f\u8fd4\u56de \u622a\u6b62\u52304\u670829\u65e5\u7684\u6570\u636e\u3002 args: sec: \u8bc1\u5238\u4ee3\u7801 end: \u6570\u636e\u622a\u6b62\u65e5 n_bars: \u5f85\u83b7\u53d6\u7684\u6570\u636e\u6761\u6570 frame_type: \u6570\u636e\u6240\u5c5e\u7684\u5468\u671f include_unclosed: \u5982\u679c\u4e3a\u771f\uff0c\u5219\u4f1a\u5305\u542b\u5f53end\u6240\u5904\u7684\u90a3\u4e2aFrame\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5f53\u524d\u5b83\u8fd8\u672a\u7ed3\u675f \"\"\" now = arrow . now ( tz = cfg . tz ) end = end or now . datetime # \u5982\u679cend\u8d85\u51fa\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5982\u679c\u7528\u6237\u60f3\u53d6\u5230\u6700\u65b0\u7684\u6570\u636e\uff0c\u5e94\u8be5\u4f20\u5165None if type ( end ) == datetime . date : if end > now . date (): return None elif type ( end ) == datetime . datetime : if end > now : return None bars = await cls . get_instance () . get_bars ( sec , end , n_bars , frame_type . value , include_unclosed ) if len ( bars ) == 0 : return # \u6839\u636e\u6307\u5b9a\u7684end\uff0c\u8ba1\u7b97\u7ed3\u675f\u65f6\u7684frame last_closed_frame = tf . floor ( end , frame_type ) last_frame = bars [ - 1 ][ \"frame\" ] # \u8ba1\u7b97\u6709\u591a\u5c11\u6839k\u7ebf\u662f\u5df2\u7ed3\u675f\u7684 n_closed = n_bars - 1 if frame_type == FrameType . DAY : # \u76d8\u540e\u53d6\u65e5\u7ebf\uff0c\u8fd4\u56de\u7684\u4e00\u5b9a\u662f\u5168\u90e8\u90fd\u5df2closed\u7684\u6570\u636e # \u76d8\u4e2d\u53d6\u65e5\u7ebf\uff0c\u8fd4\u56de\u7684last_frame\u4f1a\u662f\u5f53\u5929\u7684\u65e5\u671f\uff0c\u4f46\u8be5\u65e5\u7ebf\u5e76\u672a\u7ed3\u675f if now . datetime . hour >= 15 or last_frame < now . date (): n_closed = n_bars else : # \u5982\u679clast_frame <= end\u7684\u4e0a\u9650\uff0c\u5219\u8fd4\u56de\u7684\u4e5f\u4e00\u5b9a\u662f\u5168\u90e8\u90fdclosed\u7684\u6570\u636e if last_frame <= tf . floor ( end , frame_type ): n_closed = n_bars remainder = [ bars [ - 1 ]] if n_closed < n_bars else None closed_bars = cls . _fill_na ( bars , n_closed , last_closed_frame , frame_type ) # \u53ea\u4fdd\u5b58\u5df2\u7ed3\u675f\u7684bar await cache . save_bars ( sec , closed_bars , frame_type ) if remainder is None : return closed_bars else : return np . concatenate ([ closed_bars , remainder ]) get_security_list () async classmethod \u00b6 \u6309\u5982\u4e0b\u683c\u5f0f\u8fd4\u56de\u8bc1\u5238\u5217\u8868\u3002 code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock Returns: Type Description Optional[numpy.ndarray] Union[None, np.ndarray]: [description] Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_security_list ( cls ) -> Union [ None , np . ndarray ]: \"\"\"\u6309\u5982\u4e0b\u683c\u5f0f\u8fd4\u56de\u8bc1\u5238\u5217\u8868\u3002 code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock Returns: Union[None, np.ndarray]: [description] \"\"\" securities = await cls . get_instance () . get_security_list () if securities is None or len ( securities ) == 0 : logger . warning ( \"failed to update securities. %s is returned.\" , securities ) return securities key = \"securities\" pipeline = cache . security . pipeline () pipeline . delete ( key ) for code , display_name , name , start , end , _type in securities : pipeline . rpush ( key , f \" { code } , { display_name } , { name } , { start } ,\" f \" { end } , { _type } \" ) await pipeline . execute () return securities get_valuation ( code , day , fields = None , n = 1 ) async classmethod \u00b6 \u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day date [description] required Returns: Type Description ndarray numpy.ndarray: [description] Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_valuation ( cls , code : Union [ str , List [ str ]], day : datetime . date , fields : List [ str ] = None , n : int = 1 , ) -> np . ndarray : valuation = await cls . get_instance () . get_valuation ( code , day , n ) await Valuation . save ( valuation ) if fields is None : return valuation if isinstance ( fields , str ): fields = [ fields ] mapping = dict ( valuation . dtype . descr ) fields = [( name , mapping [ name ]) for name in fields ] return rfn . require_fields ( valuation , fields ) archive \u00b6 adjust_range ( batch = 500 ) async \u00b6 adjust secs's range after archive bars imported Source code in omega/fetcher/archive.py async def adjust_range ( batch : int = 500 ): \"\"\"adjust secs's range after archive bars imported\"\"\" cur = b \"0\" key = \"archive.ranges.*\" logger . info ( \"start adjust range\" ) while cur : cur , keys = await cache . sys . scan ( cur , match = key , count = batch ) if not keys : continue pl = cache . security . pipeline () for item in keys : try : values = [ int ( v ) for v in await cache . sys . lrange ( item , 0 , - 1 )] values . sort () arc_head , arc_tail = values [ 0 ], values [ - 1 ] code_frame_key = item . replace ( \"archive.ranges.\" , \"\" ) head , tail = await cache . security . hmget ( code_frame_key , \"head\" , \"tail\" ) head = int ( head ) if head is not None else None tail = int ( tail ) if tail is not None else None # head, tail, arc_head, arc_tail should be all frame-aligned if head is None or tail is None : head , tail = arc_head , arc_tail elif arc_tail < head or arc_head > tail : head , tail = arc_head , arc_tail else : head = min ( arc_head , head ) tail = max ( arc_tail , tail ) pl . hset ( code_frame_key , \"head\" , head ) pl . hset ( code_frame_key , \"tail\" , tail ) except Exception as e : logger . exception ( e ) logger . warning ( \"failed to set range for %s \" , code_frame_key ) await pl . execute () clear_range () async \u00b6 clear cached secs's range before/after import archive bars Source code in omega/fetcher/archive.py async def clear_range (): \"\"\"clear cached secs's range before/after import archive bars\"\"\" key = \"archive.ranges.*\" keys = await cache . sys . keys ( key ) if keys : await cache . sys . delete ( * keys ) main ( months , cats , archive_server = None ) \u00b6 \u5141\u8bb8\u5c06\u672c\u6a21\u5757\u4ee5\u72ec\u7acb\u8fdb\u7a0b\u8fd0\u884c\uff0c\u4ee5\u652f\u6301\u591a\u8fdb\u7a0b Parameters: Name Type Description Default months str \u9017\u53f7\u5206\u9694\u7684\u6708\u5217\u8868\u3002\u683c\u5f0f\u5982202012 required cats str \u9017\u53f7\u5206\u9694\u7684\u7c7b\u522b\u5217\u8868\uff0c\u5982\"stock,index\" required Source code in omega/fetcher/archive.py def main ( months : str , cats : str , archive_server : str = None ): \"\"\"\u5141\u8bb8\u5c06\u672c\u6a21\u5757\u4ee5\u72ec\u7acb\u8fdb\u7a0b\u8fd0\u884c\uff0c\u4ee5\u652f\u6301\u591a\u8fdb\u7a0b Args: months (str): \u9017\u53f7\u5206\u9694\u7684\u6708\u5217\u8868\u3002\u683c\u5f0f\u5982202012 cats (str): \u9017\u53f7\u5206\u9694\u7684\u7c7b\u522b\u5217\u8868\uff0c\u5982\"stock,index\" \"\"\" config_dir = get_config_dir () cfg = cfg4py . init ( config_dir , False ) if archive_server : cfg . omega . urls . archive = archive_server months = str ( months ) months = [ int ( x ) for x in months . split ( \",\" ) if x ] cats = [ x for x in cats . split ( \",\" )] asyncio . run ( _main ( months , cats )) quotes_fetcher \u00b6 Interface for quotes fetcher QuotesFetcher \u00b6 get_all_trade_days ( self ) async \u00b6 \u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in omega/fetcher/quotes_fetcher.py async def get_all_trade_days ( self ): \"\"\" \u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError get_bars ( self , sec , end , n_bars , frame_type , allow_unclosed = True ) async \u00b6 \u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Union[datetime.date, datetime.datetime] required n_bars int required frame_type FrameType required allow_unclosed bool \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 True Returns: Type Description ndarray a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not Source code in omega/fetcher/quotes_fetcher.py async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError get_security_list ( self ) async \u00b6 fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: Type Description ndarray Source code in omega/fetcher/quotes_fetcher.py async def get_security_list ( self ) -> numpy . ndarray : \"\"\" fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: \"\"\" raise NotImplementedError get_valuation ( self , code , day ) async \u00b6 \u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day Union[datetime.date, datetime.datetime] [description] required Returns: Type Description ndarray numpy.ndarray: [description] Source code in omega/fetcher/quotes_fetcher.py async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError jobs special \u00b6 syncjobs \u00b6 closing_quotation_sync_bars ( all_params ) async \u00b6 \u6536\u76d8\u4e4b\u540e\u4ece\u65b0\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708 Returns: Type Description { \"frame\" \"1m\", \"start\": \"2020-01-02\", \"stop\": \"2020-01-02\", \"delay\": 3, \"cat\": [], \"include\": \"000001.XSHE\", \"exclude\": \"000001.XSHG\", }, Source code in omega/jobs/syncjobs.py async def closing_quotation_sync_bars ( all_params ): \"\"\" \u6536\u76d8\u4e4b\u540e\u4ece\u65b0\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708 Returns: { \"frame\": \"1m\", \"start\": \"2020-01-02\", \"stop\": \"2020-01-02\", \"delay\": 3, \"cat\": [], \"include\": \"000001.XSHE\", \"exclude\": \"000001.XSHG\", }, \"\"\" logger . info ( \"\u6b63\u5728\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708\" ) for params in all_params : codes , frame_type , start , stop , delay = parse_sync_params ( ** params ) start_date = await reset_tail ( codes , frame_type ) params [ \"start\" ] = start_date logger . info ( params ) await trigger_bars_sync ( params ) load_sync_params ( frame_type ) \u00b6 \u6839\u636e\u6307\u5b9a\u7684frame_type\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u540c\u6b65\u53c2\u6570 Parameters: Name Type Description Default frame_type FrameType [description] required Returns: Type Description dict dict: see @[omega.jobs.syncjobs.parse_sync_params] Source code in omega/jobs/syncjobs.py def load_sync_params ( frame_type : FrameType ) -> dict : \"\"\"\u6839\u636e\u6307\u5b9a\u7684frame_type\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u540c\u6b65\u53c2\u6570 Args: frame_type (FrameType): [description] Returns: dict: see @[omega.jobs.syncjobs.parse_sync_params] \"\"\" for item in cfg . omega . sync . bars : if item . get ( \"frame\" ) == frame_type . value : try : secs , frame_type , start , stop , delay = parse_sync_params ( ** item ) return item except Exception as e : logger . exception ( e ) logger . warning ( \"failed to parse %s \" , item ) return None return None parse_sync_params ( frame , cat = None , start = None , stop = None , delay = 0 , include = '' , exclude = '' ) \u00b6 \u6309\u7167 \u4f7f\u7528\u624b\u518c \u4e2d\u7684\u89c4\u5219\uff0c\u89e3\u6790\u548c\u8865\u5168\u540c\u6b65\u53c2\u6570\u3002 \u5982\u679c frame_type \u4e3a\u5206\u949f\u7ea7\uff0c\u5219\u5f53 start \u6307\u5b9a\u4e3a date \u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u8d77\u59cb\u5e27\uff1b \u5f53 stop \u4e3a date \u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u6700\u540e\u4e00\u5e27\u3002 Parameters: Name Type Description Default frame Union[str, datetime.date, datetime.datetime] frame type to be sync. The word frame is used here for easy understand by end user. It actually implies \"FrameType\". required cat List[str] which catetories is about to be synced. Should be one of ['stock', 'index']. Defaults to None. None start Union[str, datetime.date] [description]. Defaults to None. None stop Union[str, datetime.date, datetime.datetime] [description]. Defaults to None. None delay int [description]. Defaults to 5. 0 include str which securities should be included, seperated by space, for example, \"000001.XSHE 000004.XSHE\". Defaults to empty string. '' exclude str which securities should be excluded, seperated by a space. Defaults to empty string. '' Returns: Type Description Tuple codes (List[str]): \u5f85\u540c\u6b65\u8bc1\u5238\u5217\u8868 frame_type (FrameType): start (Frame): stop (Frame): delay (int): Source code in omega/jobs/syncjobs.py def parse_sync_params ( frame : Union [ str , Frame ], cat : List [ str ] = None , start : Union [ str , datetime . date ] = None , stop : Union [ str , Frame ] = None , delay : int = 0 , include : str = \"\" , exclude : str = \"\" , ) -> Tuple : \"\"\"\u6309\u7167[\u4f7f\u7528\u624b\u518c](usage.md#22-\u5982\u4f55\u540c\u6b65K\u7ebf\u6570\u636e)\u4e2d\u7684\u89c4\u5219\uff0c\u89e3\u6790\u548c\u8865\u5168\u540c\u6b65\u53c2\u6570\u3002 \u5982\u679c`frame_type`\u4e3a\u5206\u949f\u7ea7\uff0c\u5219\u5f53`start`\u6307\u5b9a\u4e3a`date`\u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u8d77\u59cb\u5e27\uff1b \u5f53`stop`\u4e3a`date`\u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u6700\u540e\u4e00\u5e27\u3002 Args: frame (Union[str, Frame]): frame type to be sync. The word ``frame`` is used here for easy understand by end user. It actually implies \"FrameType\". cat (List[str]): which catetories is about to be synced. Should be one of ['stock', 'index']. Defaults to None. start (Union[str, datetime.date], optional): [description]. Defaults to None. stop (Union[str, Frame], optional): [description]. Defaults to None. delay (int, optional): [description]. Defaults to 5. include (str, optional): which securities should be included, seperated by space, for example, \"000001.XSHE 000004.XSHE\". Defaults to empty string. exclude (str, optional): which securities should be excluded, seperated by a space. Defaults to empty string. Returns: - codes (List[str]): \u5f85\u540c\u6b65\u8bc1\u5238\u5217\u8868 - frame_type (FrameType): - start (Frame): - stop (Frame): - delay (int): \"\"\" frame_type = FrameType ( frame ) if frame_type in tf . minute_level_frames : if stop : stop = arrow . get ( stop , tzinfo = cfg . tz ) if stop . hour == 0 : # \u672a\u6307\u5b9a\u6709\u6548\u7684\u65f6\u95f4\u5e27\uff0c\u4f7f\u7528\u5f53\u65e5\u7ed3\u675f\u5e27 stop = tf . last_min_frame ( tf . day_shift ( stop . date (), 0 ), frame_type ) else : stop = tf . floor ( stop , frame_type ) else : stop = tf . floor ( arrow . now ( tz = cfg . tz ) . datetime , frame_type ) if stop > arrow . now ( tz = cfg . tz ): raise ValueError ( f \"\u8bf7\u52ff\u5c06\u540c\u6b65\u622a\u6b62\u65f6\u95f4\u8bbe\u7f6e\u5728\u672a\u6765: { stop } \" ) if start : start = arrow . get ( start , tzinfo = cfg . tz ) if start . hour == 0 : # \u672a\u6307\u5b9a\u6709\u6548\u7684\u4ea4\u6613\u5e27\uff0c\u4f7f\u7528\u5f53\u65e5\u7684\u8d77\u59cb\u5e27 start = tf . first_min_frame ( tf . day_shift ( start . date (), 0 ), frame_type ) else : start = tf . floor ( start , frame_type ) else : start = tf . shift ( stop , - 999 , frame_type ) else : stop = ( stop and arrow . get ( stop ) . date ()) or arrow . now () . date () if stop == arrow . now () . date (): stop = arrow . now ( tz = cfg . tz ) stop = tf . floor ( stop , frame_type ) start = tf . floor (( start and arrow . get ( start ) . date ()), frame_type ) or tf . shift ( stop , - 1000 , frame_type ) secs = Securities () codes = secs . choose ( cat or []) exclude = map ( lambda x : x , exclude . split ( \" \" )) codes = list ( set ( codes ) - set ( exclude )) include = list ( filter ( lambda x : x , include . split ( \" \" ))) codes . extend ( include ) return codes , frame_type , start , stop , int ( delay ) reset_tail ( codes , frame_type , days =- 1 ) async \u00b6 \u91cd\u7f6etail\u7684\u503c\uff0c\u6765\u540c\u6b65\u6570\u636e Parameters: Name Type Description Default days \u9700\u8981\u91cd\u7f6e\u5230\u591a\u5c11\u5929\u4e4b\u524d -1 codes [] required frame_type FrameType required Source code in omega/jobs/syncjobs.py async def reset_tail ( codes : [], frame_type : FrameType , days =- 1 ): \"\"\" \u91cd\u7f6etail\u7684\u503c\uff0c\u6765\u540c\u6b65\u6570\u636e Args: days: \u9700\u8981\u91cd\u7f6e\u5230\u591a\u5c11\u5929\u4e4b\u524d codes: frame_type: Returns: \"\"\" now = arrow . now () _day = tf . day_shift ( now , days ) if frame_type in [ FrameType . MIN1 , FrameType . MIN5 , FrameType . MIN15 , FrameType . MIN30 , FrameType . MIN60 ]: date = datetime . datetime ( _day . year , _day . month , _day . day , 15 ) tail = tf . time2int ( date ) elif frame_type == FrameType . DAY : date = _day tail = tf . date2int ( date ) elif frame_type == FrameType . WEEK : date = tf . shift ( now , days , FrameType . WEEK ) tail = tf . date2int ( date ) elif frame_type == FrameType . MONTH : date = tf . shift ( now , days , FrameType . MONTH ) tail = tf . date2int ( date ) else : raise Exception ( \"\u4e0d\u652f\u6301\u7684frame_type\" ) # print(f\"reset tail to[m:{m}, day:{day}, week:{week}, month:{month}] \") for code in codes : key = f \" { code } : { frame_type . value } \" resp = await cache . security . hget ( key , \"tail\" ) if resp is None : continue _tail = int ( resp ) print ( _tail ) if _tail > tail : # \u53ea\u6709\u6570\u636e\u5e93\u91cc\u7684\u65f6\u95f4\u5927\u4e8etail \u624d\u53ef\u4ee5 await cache . security . hset ( key , 'tail' , tail ) return date . strftime ( '%Y-%m- %d ' ) sync_bars ( params ) async \u00b6 sync bars on signal OMEGA_DO_SYNC received Parameters: Name Type Description Default params dict composed of the following: { secs (List[str]): \u5f85\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684.\u5982\u679c\u4e3aNone\u6216\u8005\u4e3a\u7a7a\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u8f6e\u8be2 frame_type (FrameType):k\u7ebf\u7684\u5e27\u7c7b\u578b start (Frame): k\u7ebf\u8d77\u59cb\u65f6\u95f4 stop (Frame): k\u7ebf\u7ed3\u675f\u65f6\u95f4 } required Returns: Type Description [type] [description] Source code in omega/jobs/syncjobs.py async def sync_bars ( params : dict ): \"\"\"sync bars on signal OMEGA_DO_SYNC received Args: params (dict): composed of the following: ``` { secs (List[str]): \u5f85\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684.\u5982\u679c\u4e3aNone\u6216\u8005\u4e3a\u7a7a\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u8f6e\u8be2 frame_type (FrameType):k\u7ebf\u7684\u5e27\u7c7b\u578b start (Frame): k\u7ebf\u8d77\u59cb\u65f6\u95f4 stop (Frame): k\u7ebf\u7ed3\u675f\u65f6\u95f4 } ``` Returns: [type]: [description] \"\"\" secs , frame_type , start , stop = ( params . get ( \"secs\" ), params . get ( \"frame_type\" ), params . get ( \"start\" ), params . get ( \"stop\" ), ) if secs is not None : logger . info ( \"sync bars with %s ( %s ~ %s ) for given %s secs\" , frame_type , start , stop , len ( secs ), ) async def get_sec (): return secs . pop () if len ( secs ) else None else : logger . info ( \"sync bars with %s ( %s ~ %s ) in polling mode\" , frame_type , start , stop ) async def get_sec (): return await cache . sys . lpop ( key_scope ) key_scope = f \"jobs.bars_sync.scope. { frame_type . value } \" if start is None or frame_type is None : raise ValueError ( \"you must specify a start date/frame_type for sync\" ) if stop is None : stop = tf . floor ( arrow . now ( tz = cfg . tz ), frame_type ) while code := await get_sec (): try : await sync_bars_for_security ( code , frame_type , start , stop ) except FetcherQuotaError as e : logger . warning ( \"Quota exceeded when syncing %s . Sync aborted.\" , code ) logger . exception ( e ) return # stop the sync except Exception as e : logger . warning ( \"Failed to sync %s \" , code ) logger . exception ( e ) elapsed = await _stop_job_timer ( \"sync\" ) logger . info ( \" %s finished quotes sync in %s seconds\" , os . getpid (), elapsed ) sync_calendar () async \u00b6 \u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u65e5\uff0c\u5e76\u8ba1\u7b97\u51fa\u5468\u7ebf\u5e27\u548c\u6708\u7ebf\u5e27 Source code in omega/jobs/syncjobs.py async def sync_calendar (): \"\"\"\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u65e5\uff0c\u5e76\u8ba1\u7b97\u51fa\u5468\u7ebf\u5e27\u548c\u6708\u7ebf\u5e27 Returns: \"\"\" trade_days = await aq . get_all_trade_days () if trade_days is None or len ( trade_days ) == 0 : logger . warning ( \"failed to fetch trade days.\" ) return None tf . day_frames = [ tf . date2int ( x ) for x in trade_days ] weeks = [] last = trade_days [ 0 ] for cur in trade_days : if cur . weekday () < last . weekday () or ( cur - last ) . days >= 7 : weeks . append ( last ) last = cur if weeks [ - 1 ] < last : weeks . append ( last ) tf . week_frames = [ tf . date2int ( x ) for x in weeks ] await cache . save_calendar ( \"week_frames\" , map ( tf . date2int , weeks )) months = [] last = trade_days [ 0 ] for cur in trade_days : if cur . day < last . day : months . append ( last ) last = cur months . append ( last ) tf . month_frames = [ tf . date2int ( x ) for x in months ] await cache . save_calendar ( \"month_frames\" , map ( tf . date2int , months )) logger . info ( \"trade_days is updated to %s \" , trade_days [ - 1 ]) sync_security_list () async \u00b6 \u66f4\u65b0\u8bc1\u5238\u5217\u8868 \u6ce8\u610f\u8bc1\u5238\u5217\u8868\u5728AbstractQuotesServer\u53d6\u5f97\u65f6\u5c31\u5df2\u4fdd\u5b58\uff0c\u6b64\u5904\u53ea\u662f\u89e6\u53d1 Source code in omega/jobs/syncjobs.py async def sync_security_list (): \"\"\"\u66f4\u65b0\u8bc1\u5238\u5217\u8868 \u6ce8\u610f\u8bc1\u5238\u5217\u8868\u5728AbstractQuotesServer\u53d6\u5f97\u65f6\u5c31\u5df2\u4fdd\u5b58\uff0c\u6b64\u5904\u53ea\u662f\u89e6\u53d1 \"\"\" secs = await aq . get_security_list () logger . info ( \" %s secs are fetched and saved.\" , len ( secs )) trigger_bars_sync ( sync_params = None , force = False ) async \u00b6 \u521d\u59cb\u5316bars_sync\u7684\u4efb\u52a1\uff0c\u53d1\u4fe1\u53f7\u7ed9\u5404quotes_fetcher\u8fdb\u7a0b\u4ee5\u542f\u52a8\u540c\u6b65\u3002 Parameters: Name Type Description Default frame_type FrameType \u8981\u540c\u6b65\u7684\u5e27\u7c7b\u578b required sync_params dict \u540c\u6b65\u53c2\u6570 { start: \u8d77\u59cb\u5e27 stop: \u622a\u6b62\u5e27 frame: \u5e27\u7c7b\u578b delay: \u5ef6\u8fdf\u542f\u52a8\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d cat: \u8bc1\u5238\u5206\u7c7b\uff0c\u5982stock, index\u7b49 delay: seconds for sync to wait. } see more @[omega.jobs.syncjobs.parse_sync_params][] None force \u5373\u4f7f\u5f53\u524d\u4e0d\u662f\u4ea4\u6613\u65e5\uff0c\u662f\u5426\u4e5f\u5f3a\u884c\u8fdb\u884c\u540c\u6b65\u3002 False Source code in omega/jobs/syncjobs.py async def trigger_bars_sync ( sync_params : dict = None , force = False ): \"\"\"\u521d\u59cb\u5316bars_sync\u7684\u4efb\u52a1\uff0c\u53d1\u4fe1\u53f7\u7ed9\u5404quotes_fetcher\u8fdb\u7a0b\u4ee5\u542f\u52a8\u540c\u6b65\u3002 Args: frame_type (FrameType): \u8981\u540c\u6b65\u7684\u5e27\u7c7b\u578b sync_params (dict): \u540c\u6b65\u53c2\u6570 ``` { start: \u8d77\u59cb\u5e27 stop: \u622a\u6b62\u5e27 frame: \u5e27\u7c7b\u578b delay: \u5ef6\u8fdf\u542f\u52a8\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d cat: \u8bc1\u5238\u5206\u7c7b\uff0c\u5982stock, index\u7b49 delay: seconds for sync to wait. } ``` see more @[omega.jobs.syncjobs.parse_sync_params][] force: \u5373\u4f7f\u5f53\u524d\u4e0d\u662f\u4ea4\u6613\u65e5\uff0c\u662f\u5426\u4e5f\u5f3a\u884c\u8fdb\u884c\u540c\u6b65\u3002 Returns: \"\"\" if not force and not tf . is_trade_day ( arrow . now ()): return codes , frame_type , start , stop , delay = parse_sync_params ( ** sync_params ) key_scope = f \"jobs.bars_sync.scope. { frame_type . value } \" if len ( codes ) == 0 : logger . warning ( \"no securities are specified for sync %s \" , frame_type ) return fmt_str = \"sync from %s to %s in frame_type( %s ) for %s secs\" logger . info ( fmt_str , start , stop , frame_type , len ( codes )) # secs are stored into cache, so each fetcher can polling it pl = cache . sys . pipeline () pl . delete ( key_scope ) pl . lpush ( key_scope , * codes ) await pl . execute () await asyncio . sleep ( delay ) await _start_job_timer ( \"sync\" ) await emit . emit ( Events . OMEGA_DO_SYNC , { \"frame_type\" : frame_type , \"start\" : start , \"stop\" : stop } ) fmt_str = \"send trigger sync event to fetchers: from %s to %s in frame_type( %s ) for %s secs\" logger . info ( fmt_str , start , stop , frame_type , len ( codes )) trigger_single_worker_sync ( _type , params = None ) async \u00b6 \u542f\u52a8\u53ea\u9700\u8981\u5355\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u7684\u6570\u636e\u540c\u6b65\u4efb\u52a1 \u6bd4\u5982\u4ea4\u6613\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5982\u679c\u9700\u8981\u540c\u65f6\u542f\u52a8\u591a\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u6570\u636e\u540c\u6b65\u4efb\u52a1\uff0c\u5e94\u8be5\u901a\u8fc7 pyemit\u6765\u53d1\u9001\u5e7f\u64ad\u6d88\u606f\u3002 Parameters: Name Type Description Default _type str the type of data to be synced, either calendar or ecurity_list required Source code in omega/jobs/syncjobs.py async def trigger_single_worker_sync ( _type : str , params : dict = None ): \"\"\"\u542f\u52a8\u53ea\u9700\u8981\u5355\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u7684\u6570\u636e\u540c\u6b65\u4efb\u52a1 \u6bd4\u5982\u4ea4\u6613\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5982\u679c\u9700\u8981\u540c\u65f6\u542f\u52a8\u591a\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u6570\u636e\u540c\u6b65\u4efb\u52a1\uff0c\u5e94\u8be5\u901a\u8fc7 pyemit\u6765\u53d1\u9001\u5e7f\u64ad\u6d88\u606f\u3002 Args: _type: the type of data to be synced, either ``calendar`` or ``ecurity_list`` \"\"\" url = cfg . omega . urls . quotes_server if _type == \"calendar\" : url += \"/jobs/sync_calendar\" elif _type == \"security_list\" : url += \"/jobs/sync_security_list\" else : raise ValueError ( f \" { _type } is not supported sync type.\" ) async with aiohttp . ClientSession () as client : try : async with client . post ( url , data = params ) as resp : if resp . status != 200 : logger . warning ( \"failed to trigger %s sync\" , _type ) else : return await resp . json () except Exception as e : logger . exception ( e )","title":"API\u6587\u6863"},{"location":"api/#omega","text":"","title":"omega"},{"location":"api/#omega.app","text":"Author: Aaron-Yang [code@jieyu.ai] Contributors:","title":"app"},{"location":"api/#omega.app.start","text":"\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b \u4f7f\u7528\u672c\u51fd\u6570\u6765\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b\u3002\u8be5\u8fdb\u7a0b\u53ef\u80fd\u4e0e\u5176\u5b83\u8fdb\u7a0b\u4e00\u6837\uff0c\u4f7f\u7528\u76f8\u540c\u7684impl\u548c\u8d26\u53f7\uff0c\u56e0\u6b64\u6784\u6210\u4e00\u7ec4\u8fdb\u7a0b\u3002 \u901a\u8fc7\u591a\u6b21\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u4f20\u5165\u4e0d\u540c\u7684quotes fetcher impl\u53c2\u6570\uff0c\u5373\u53ef\u542f\u52a8\u591a\u7ec4Omega\u670d\u52a1\u3002 \u5982\u679c\u6307\u5b9a\u4e86 fetcher_params \uff0c\u5219 start \u5c06\u4f7f\u7528impl, fetcher_params\u6765\u542f\u52a8\u5355\u4e2aOmega\u670d\u52a1\uff0c\u4f7f \u7528impl\u6307\u5b9a\u7684fetcher\u3002\u5426\u5219\uff0c\u5c06\u4f7f\u7528 cfg.quotes_fetcher \u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u521b\u5efaOmega. \u5982\u679c cfg \u4e0d\u4e3aNone\uff0c\u5219\u5e94\u8be5\u6307\u5b9a\u4e3a\u5408\u6cd5\u7684json string\uff0c\u5176\u5185\u5bb9\u5c06\u8986\u76d6\u672c\u5730cfg\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u76ee\u524d\u7684\u4e3b\u8981 \u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u5355\u5143\u6d4b\u8bd5\u3002 Parameters: Name Type Description Default impl str quotes fetcher implementor required cfg dict the cfg in json string None fetcher_params contains info required by creating quotes fetcher {} Source code in omega/app.py def start ( impl : str , cfg : dict = None , ** fetcher_params ): \"\"\"\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b \u4f7f\u7528\u672c\u51fd\u6570\u6765\u542f\u52a8\u4e00\u4e2aOmega fetcher\u8fdb\u7a0b\u3002\u8be5\u8fdb\u7a0b\u53ef\u80fd\u4e0e\u5176\u5b83\u8fdb\u7a0b\u4e00\u6837\uff0c\u4f7f\u7528\u76f8\u540c\u7684impl\u548c\u8d26\u53f7\uff0c\u56e0\u6b64\u6784\u6210\u4e00\u7ec4\u8fdb\u7a0b\u3002 \u901a\u8fc7\u591a\u6b21\u8c03\u7528\u672c\u65b9\u6cd5\uff0c\u4f20\u5165\u4e0d\u540c\u7684quotes fetcher impl\u53c2\u6570\uff0c\u5373\u53ef\u542f\u52a8\u591a\u7ec4Omega\u670d\u52a1\u3002 \u5982\u679c\u6307\u5b9a\u4e86`fetcher_params`\uff0c\u5219`start`\u5c06\u4f7f\u7528impl, fetcher_params\u6765\u542f\u52a8\u5355\u4e2aOmega\u670d\u52a1\uff0c\u4f7f \u7528impl\u6307\u5b9a\u7684fetcher\u3002\u5426\u5219\uff0c\u5c06\u4f7f\u7528`cfg.quotes_fetcher`\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u6765\u521b\u5efaOmega. \u5982\u679c`cfg`\u4e0d\u4e3aNone\uff0c\u5219\u5e94\u8be5\u6307\u5b9a\u4e3a\u5408\u6cd5\u7684json string\uff0c\u5176\u5185\u5bb9\u5c06\u8986\u76d6\u672c\u5730cfg\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u76ee\u524d\u7684\u4e3b\u8981 \u8981\u4f5c\u7528\u662f\u65b9\u4fbf\u5355\u5143\u6d4b\u8bd5\u3002 Args: impl (str): quotes fetcher implementor cfg: the cfg in json string fetcher_params: contains info required by creating quotes fetcher \"\"\" port = fetcher_params . get ( \"port\" , 3181 ) omega = Omega ( impl , cfg , ** fetcher_params ) app . register_listener ( omega . init , \"before_server_start\" ) logger . info ( \"starting sanic group listen on %s with %s workers\" , port , 1 ) app . run ( host = \"0.0.0.0\" , port = port , workers = 1 , register_sys_signals = True , protocol = WebSocketProtocol , ) logger . info ( \"sanic stopped.\" )","title":"start()"},{"location":"api/#omega.cli","text":"\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u751f\u547d\u671f\u3001\u5168\u5c40\u5bf9\u8c61\u3001\u4efb\u52a1\u3001\u5168\u5c40\u6d88\u606f\u54cd\u5e94","title":"cli"},{"location":"api/#omega.cli.bin_cut","text":"\u5c06\u6570\u7ec4arr\u5207\u5206\u6210n\u4efd Parameters: Name Type Description Default arr list [description] required n int [description] required Returns: Type Description [type] [description] Source code in omega/cli.py def bin_cut ( arr : list , n : int ): \"\"\"\u5c06\u6570\u7ec4arr\u5207\u5206\u6210n\u4efd Args: arr ([type]): [description] n ([type]): [description] Returns: [type]: [description] \"\"\" result = [[] for i in range ( n )] for i , e in enumerate ( arr ): result [ i % n ] . append ( e ) return [ e for e in result if len ( e )]","title":"bin_cut()"},{"location":"api/#omega.cli.config_fetcher","text":"\u914d\u7f6ejq_fetcher \u4e3aOmega\u5b89\u88c5jqdatasdk, zillionare-omega-adaptors-jq, \u914d\u7f6ejqdata\u8bbf\u95ee\u8d26\u53f7 Source code in omega/cli.py def config_fetcher ( settings ): \"\"\"\u914d\u7f6ejq_fetcher \u4e3aOmega\u5b89\u88c5jqdatasdk, zillionare-omega-adaptors-jq, \u914d\u7f6ejqdata\u8bbf\u95ee\u8d26\u53f7 \"\"\" msg = \"\"\" Omega\u9700\u8981\u914d\u7f6e\u4e0a\u6e38\u884c\u60c5\u670d\u52a1\u5668\u3002\u5f53\u524d\u652f\u6301\u7684\u4e0a\u6e38\u670d\u52a1\u5668\u6709: \\\\ n [1] \u805a\u5bbd`<joinquant>` \\\\ n \"\"\" print ( format_msg ( msg )) more_account = True workers = [] port = 3181 while more_account : account = get_input ( \"\u8bf7\u8f93\u5165\u8d26\u53f7:\" , None , os . environ . get ( \"JQ_ACCOUNT\" ) or \"\" ) password = get_input ( \"\u8bf7\u8f93\u5165\u5bc6\u7801:\" , None , os . environ . get ( \"JQ_PASSWORD\" ) or \"\" ) sessions = get_input ( \"\u8bf7\u8f93\u5165\u5e76\u53d1\u4f1a\u8bdd\u6570\" , None , 1 , \"\u9ed8\u8ba4\u503c[1]\" ) workers . append ( { \"account\" : account , \"password\" : password , \"sessions\" : sessions , \"port\" : port , } ) port += 1 more_account = input ( \"\u7ee7\u7eed\u914d\u7f6e\u65b0\u7684\u8d26\u53f7[y|N]? \\n \" ) . upper () == \"Y\" settings [ \"quotes_fetchers\" ] = [] append_fetcher ( settings , { \"impl\" : \"jqadaptor\" , \"workers\" : workers })","title":"config_fetcher()"},{"location":"api/#omega.cli.config_postgres","text":"\u914d\u7f6e\u6570\u636e\u8fde\u63a5\u5e76\u8fdb\u884c\u6d4b\u8bd5 Source code in omega/cli.py async def config_postgres ( settings ): \"\"\"\u914d\u7f6e\u6570\u636e\u8fde\u63a5\u5e76\u8fdb\u884c\u6d4b\u8bd5\"\"\" msg = \"\"\" \u914d\u7f6e\u6570\u636e\u5e93\u5e76\u975e\u5fc5\u987b\u3002\u5982\u679c\u60a8\u4ec5\u9650\u4e8e\u5728\u67d0\u4e9b\u573a\u666f\u4e0b\u4f7f\u7528Zillionare-omega\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u914d\u7f6e \u6570\u636e\u5e93\u66f4\u591a\u4fe1\u606f\uff0c \\\\ n\u8bf7\u53c2\u9605https://readthedocs.org/projects/zillionare-omega/ \\\\ n\u8df3\u8fc7\u6b64\u9879[S], \u4efb\u610f\u952e\u7ee7\u7eed: \"\"\" choice = input ( format_msg ( msg )) if choice . upper () == \"S\" : return action = \"R\" while action == \"R\" : host = get_input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668\u5730\u5740\uff0c\" , None , os . environ . get ( \"POSTGRES_HOST\" ) or \"localhost\" ) port = get_input ( \"\u8bf7\u8f93\u5165\u670d\u52a1\u5668\u7aef\u53e3\uff0c\" , is_valid_port , os . environ . get ( \"POSTGRES_PORT\" ) or 5432 ) account = get_input ( \"\u8bf7\u8f93\u5165\u8d26\u53f7,\" , None , os . environ . get ( \"POSTGRES_USER\" )) password = get_input ( \"\u8bf7\u8f93\u5165\u5bc6\u7801,\" , None , os . environ . get ( \"POSTGRES_PASSWORD\" )) dbname = get_input ( \"\u8bf7\u8f93\u5165\u6570\u636e\u5e93\u540d,\" , None , os . environ . get ( \"POSTGRES_DB\" ) or \"zillionare\" ) print ( \"\u6b63\u5728\u6d4b\u8bd5Postgres\u8fde\u63a5...\" ) dsn = f \"postgres:// { account } : { password } @ { host } : { port } / { dbname } \" if await check_postgres ( dsn ): update_config ( settings , \"postgres.dsn\" , dsn ) update_config ( settings , \"postgres.enabled\" , True ) print ( f \"[ { colored ( 'PASS' , 'green' ) } ] \u6570\u636e\u5e93\u8fde\u63a5\u6210\u529f\uff0c\u5e76\u6210\u529f\u521d\u59cb\u5316\uff01\" ) return True else : hint = f \"[ { colored ( 'FAIL' , 'red' ) } ] \u5ffd\u7565\u9519\u8bef[C]\uff0c\u91cd\u65b0\u8f93\u5165[R]\uff0c\u9000\u51fa[Q]\" action = choose_action ( hint )","title":"config_postgres()"},{"location":"api/#omega.cli.find_fetcher_processes","text":"\u4eceredis\u4e2d\u67e5\u627e\u5df2\u542f\u52a8\u7684fetcher\u8fdb\u7a0b \u8fd4\u56de f\"{impl}:{gid}\" -> (pid, port, alive) Source code in omega/cli.py async def find_fetcher_processes (): \"\"\"\u4eceredis\u4e2d\u67e5\u627e\u5df2\u542f\u52a8\u7684fetcher\u8fdb\u7a0b \u8fd4\u56de f\"{impl}:{gid}\" -> (pid, port, alive) \"\"\" results = [] keys = await cache . sys . keys ( \"process.fetchers.*\" ) for key in keys : info = await cache . sys . hgetall ( key ) heartbeat = float ( info [ \"heartbeat\" ]) group = f \" { info [ 'impl' ] } : { info [ 'gid' ] } \" pid = int ( info [ \"pid\" ]) port = int ( info [ \"port\" ]) alive = time . time () - heartbeat < 10 results . append (( pid , port , alive , group )) return results","title":"find_fetcher_processes()"},{"location":"api/#omega.cli.format_msg","text":"\u683c\u5f0f\u5316msg\u5e76\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u672c\u51fd\u6570\u5141\u8bb8\u5728\u5199\u4ee3\u7801\u65f6\u6309\u683c\u5f0f\u8981\u6c42\u8fdb\u884c\u7f29\u8fdb\u548c\u6392\u7248\uff0c\u4f46\u5728\u8f93\u51fa\u65f6\uff0c\u8fd9\u4e9b\u683c\u5f0f\u90fd\u4f1a\u88ab\u79fb\u9664\uff1b\u5bf9\u8f83\u957f\u7684\u6587\u672c\uff0c \u6309\u6bcf80\u4e2a\u5b57\u7b26\u4e3a\u4e00\u884c\u8fdb\u884c\u8f93\u51fa\u3002 \u5982\u679c\u9700\u8981\u5728msg\u4e2d\u63d2\u5165\u6362\u884c\u6216\u8005\u5236\u8868\u7b26\uff0c\u4f7f\u7528 \\n \u548c \\t \u3002 Parameters: Name Type Description Default msg str required Source code in omega/cli.py def format_msg ( msg : str ): \"\"\"\u683c\u5f0f\u5316msg\u5e76\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a \u672c\u51fd\u6570\u5141\u8bb8\u5728\u5199\u4ee3\u7801\u65f6\u6309\u683c\u5f0f\u8981\u6c42\u8fdb\u884c\u7f29\u8fdb\u548c\u6392\u7248\uff0c\u4f46\u5728\u8f93\u51fa\u65f6\uff0c\u8fd9\u4e9b\u683c\u5f0f\u90fd\u4f1a\u88ab\u79fb\u9664\uff1b\u5bf9\u8f83\u957f\u7684\u6587\u672c\uff0c \u6309\u6bcf80\u4e2a\u5b57\u7b26\u4e3a\u4e00\u884c\u8fdb\u884c\u8f93\u51fa\u3002 \u5982\u679c\u9700\u8981\u5728msg\u4e2d\u63d2\u5165\u6362\u884c\u6216\u8005\u5236\u8868\u7b26\uff0c\u4f7f\u7528`\\\\n`\u548c`\\\\t`\u3002 args: msg: returns: \"\"\" msg = re . sub ( r \"\\n\\s+\" , \"\" , msg ) msg = re . sub ( r \"[\\t\\n]\" , \"\" , msg ) msg = msg . replace ( \" \\\\ t\" , \" \\t \" ) . replace ( \" \\\\ n\" , \" \\n \" ) lines = msg . split ( \" \\n \" ) msg = [] for line in lines : for i in range ( int ( len ( line ) / 80 + 1 )): msg . append ( line [ i * 80 : min ( len ( line ), ( i + 1 ) * 80 )]) return \" \\n \" . join ( msg )","title":"format_msg()"},{"location":"api/#omega.cli.setup","text":"\u5b89\u88c5\u521d\u59cb\u5316\u5165\u53e3 Parameters: Name Type Description Default reset_factory reset to factory settings False force if true, force setup no matter if run already False Source code in omega/cli.py async def setup ( reset_factory = False , force = False ): \"\"\"\u5b89\u88c5\u521d\u59cb\u5316\u5165\u53e3 Args: reset_factory: reset to factory settings force: if true, force setup no matter if run already Returns: \"\"\" msg = \"\"\" Zillionare-omega (\u5927\u5bcc\u7fc1) \\\\ n ------------------------- \\\\ n \u611f\u8c22\u4f7f\u7528Zillionare-omega -- \u9ad8\u901f\u5206\u5e03\u5f0f\u884c\u60c5\u670d\u52a1\u5668\uff01 \\\\ n \"\"\" print ( format_msg ( msg )) if not force : config_file = os . path . join ( get_config_dir (), \"defaults.yaml\" ) if os . path . exists ( config_file ): print ( f \" { colored ( '[PASS]' , 'green' ) } \u5b89\u88c5\u7a0b\u5e8f\u5df2\u5728\u672c\u673a\u4e0a\u6210\u529f\u8fd0\u884c\" ) return if reset_factory : import sh dst = get_config_dir () os . makedirs ( dst , exist_ok = True ) src = os . path . join ( factory_config_dir (), \"defaults.yaml\" ) dst = os . path . join ( get_config_dir (), \"defaults.yaml\" ) sh . cp ( \"-r\" , src , dst ) print_title ( \"Step 1. \u68c0\u6d4b\u5b89\u88c5\u73af\u5883...\" ) settings = load_factory_settings () if not check_environment (): return print_title ( \"Step 2. \u914d\u7f6e\u65e5\u5fd7\" ) config_logging ( settings ) print_title ( \"Step 3. \u914d\u7f6e\u4e0a\u6e38\u670d\u52a1\u5668\" ) config_fetcher ( settings ) print_title ( \"Step 4. \u914d\u7f6eRedis\u670d\u52a1\u5668\" ) await config_redis ( settings ) print_title ( \"Step 5. \u914d\u7f6ePostgres\u670d\u52a1\u5668\" ) await config_postgres ( settings ) save_config ( settings ) print_title ( \"Step 6. \u4e0b\u8f7d\u5386\u53f2\u6570\u636e\" ) config_dir = get_config_dir () cfg4py . init ( config_dir , False ) remove_console_log_handler () await start ( \"fetcher\" ) await download_archive ( None ) print_title ( \"\u914d\u7f6e\u5df2\u5b8c\u6210\u3002\u73b0\u5728\u4e3a\u60a8\u542f\u52a8Omega,\u5f00\u542f\u8d22\u5bcc\u4e4b\u65c5\uff01\" ) await start ( \"jobs\" ) await status ()","title":"setup()"},{"location":"api/#omega.cli.start","text":"\u542f\u52a8omega\u4e3b\u8fdb\u7a0b\u6216\u8005\u4efb\u52a1\u7ba1\u7406\u8fdb\u7a0b Parameters: Name Type Description Default service str if service is '', then starts fetcher processes. '' Source code in omega/cli.py async def start ( service : str = \"\" ): \"\"\"\u542f\u52a8omega\u4e3b\u8fdb\u7a0b\u6216\u8005\u4efb\u52a1\u7ba1\u7406\u8fdb\u7a0b Args: service: if service is '', then starts fetcher processes. Returns: \"\"\" print ( f \"\u6b63\u5728\u542f\u52a8zillionare-omega { colored ( service , 'green' ) } ...\" ) config_dir = get_config_dir () cfg4py . init ( config_dir , False ) if service == \"\" : await _start_jobs () await _start_fetcher_processes () elif service == \"jobs\" : return await _start_jobs () elif service == \"fetcher\" : return await _start_fetcher_processes () else : print ( \"\u4e0d\u652f\u6301\u7684\u670d\u52a1\" )","title":"start()"},{"location":"api/#omega.cli.sync_bars","text":"\u7acb\u5373\u540c\u6b65\u884c\u60c5\u6570\u636e \u5982\u679c frame , codes \u6ca1\u6709\u63d0\u4f9b\uff0c\u5219\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5173\u4fe1\u606f Parameters: Name Type Description Default frame str None codes str None Source code in omega/cli.py async def sync_bars ( frame : str = None , codes : str = None ): \"\"\"\u7acb\u5373\u540c\u6b65\u884c\u60c5\u6570\u636e \u5982\u679c`frame`, `codes`\u6ca1\u6709\u63d0\u4f9b\uff0c\u5219\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\u76f8\u5173\u4fe1\u606f Args: frame: codes: Returns: \"\"\" await _init () if frame : frame_type = FrameType ( frame ) params = syncjobs . load_sync_params ( frame_type ) if codes : params [ \"cat\" ] = None params [ \"include\" ] = codes await syncjobs . trigger_bars_sync ( params , force = True ) logger . info ( \"request %s , %s send to workers.\" , params , codes ) else : for frame_type in itertools . chain ( tf . day_level_frames , tf . minute_level_frames ): params = syncjobs . load_sync_params ( frame_type ) if not params : continue if codes : params [ \"cat\" ] = None params [ \"include\" ] = codes await syncjobs . trigger_bars_sync ( params , force = True ) logger . info ( \"request %s , %s send to workers.\" , params , codes )","title":"sync_bars()"},{"location":"api/#omega.cli.sync_calendar","text":"\u53d1\u8d77\u540c\u6b65\u4ea4\u6613\u65e5\u5386\u8bf7\u6c42 Source code in omega/cli.py async def sync_calendar (): \"\"\"\u53d1\u8d77\u540c\u6b65\u4ea4\u6613\u65e5\u5386\u8bf7\u6c42\"\"\" await _init () await syncjobs . trigger_single_worker_sync ( \"calendar\" )","title":"sync_calendar()"},{"location":"api/#omega.cli.sync_sec_list","text":"\u53d1\u8d77\u540c\u6b65\u8bc1\u5238\u5217\u8868\u8bf7\u6c42 Source code in omega/cli.py async def sync_sec_list (): \"\"\"\u53d1\u8d77\u540c\u6b65\u8bc1\u5238\u5217\u8868\u8bf7\u6c42\"\"\" await _init () await syncjobs . trigger_single_worker_sync ( \"security_list\" )","title":"sync_sec_list()"},{"location":"api/#omega.config","text":"Author: Aaron-Yang [code@jieyu.ai] Contributors:","title":"config"},{"location":"api/#omega.core","text":"Author: Aaron-Yang [code@jieyu.ai] Contributors:","title":"core"},{"location":"api/#omega.core.accelerate","text":"Author: Aaron-Yang [code@jieyu.ai] Contributors: things need speed","title":"accelerate"},{"location":"api/#omega.core.accelerate.merge","text":"merge two numpy structured arrays by by key njit fail if one of left, right contains object, not plain type, but the loop is very fast, cost 0.0001 seconds Parameters: Name Type Description Default left [type] [description] required right [type] [description] required by [type] [description] required Returns: Type Description [type] [description] Source code in omega/core/accelerate.py def merge ( left , right , by ): \"\"\"merge two numpy structured arrays by `by` key njit fail if one of left, right contains object, not plain type, but the loop is very fast, cost 0.0001 seconds Args: left ([type]): [description] right ([type]): [description] by ([type]): [description] Returns: [type]: [description] \"\"\" i , j = 0 , 0 while j < len ( right ) and i < len ( left ): if right [ j ][ by ] < left [ by ][ i ]: j += 1 elif right [ j ][ by ] == left [ by ][ i ]: left [ i ] = right [ j ] i += 1 j += 1 else : i += 1 return left","title":"merge()"},{"location":"api/#omega.core.sanity","text":"Author: Aaron-Yang [code@jieyu.ai] Contributors:","title":"sanity"},{"location":"api/#omega.core.sanity.calc_checksums","text":"Parameters: Name Type Description Default day date required codes List required Returns: Type Description dict \u8fd4\u56de\u503c\u4e3a\u4ee5code\u4e3a\u952e\uff0c\u8be5\u8bc1\u5238\u5bf9\u5e94\u7684{\u5468\u671f\uff1achecksum}\u7684\u96c6\u5408\u4e3a\u503c\u7684\u96c6\u5408 Source code in omega/core/sanity.py async def calc_checksums ( day : datetime . date , codes : List ) -> dict : \"\"\" Args: day: codes: Returns: \u8fd4\u56de\u503c\u4e3a\u4ee5code\u4e3a\u952e\uff0c\u8be5\u8bc1\u5238\u5bf9\u5e94\u7684{\u5468\u671f\uff1achecksum}\u7684\u96c6\u5408\u4e3a\u503c\u7684\u96c6\u5408 \"\"\" end_time = arrow . get ( day , tzinfo = cfg . tz ) . replace ( hour = 15 ) checksums = {} for i , code in enumerate ( codes ): try : checksum = {} d = await cache . get_bars_raw_data ( code , day , 1 , FrameType . DAY ) if d : checksum [ f \" { FrameType . DAY . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 240 , FrameType . MIN1 ) if d : checksum [ f \" { FrameType . MIN1 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 48 , FrameType . MIN5 ) if d : checksum [ f \" { FrameType . MIN5 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 16 , FrameType . MIN15 ) if d : checksum [ f \" { FrameType . MIN15 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 8 , FrameType . MIN30 ) if d : checksum [ f \" { FrameType . MIN30 . value } \" ] = xxhash . xxh32_hexdigest ( d ) d = await cache . get_bars_raw_data ( code , end_time , 4 , FrameType . MIN60 ) if d : checksum [ f \" { FrameType . MIN60 . value } \" ] = xxhash . xxh32_hexdigest ( d ) checksums [ code ] = checksum except Exception as e : logger . exception ( e ) if ( i + 1 ) % 500 == 0 : logger . info ( \"calc checksum progress: %s / %s \" , i + 1 , len ( codes )) return checksums","title":"calc_checksums()"},{"location":"api/#omega.core.sanity.do_validation","text":"\u5bf9\u5217\u8868secs\u4e2d\u6307\u5b9a\u7684\u8bc1\u5238\u884c\u60c5\u6570\u636e\u6309start\u5230end\u6307\u5b9a\u7684\u65f6\u95f4\u8303\u56f4\u8fdb\u884c\u6821\u9a8c Parameters: Name Type Description Default secs List[str] [description]. Defaults to None. None start str [description]. Defaults to None. None end str [description]. Defaults to None. None Returns: Type Description [type] [description] Source code in omega/core/sanity.py async def do_validation ( secs : List [ str ] = None , start : str = None , end : str = None ): \"\"\"\u5bf9\u5217\u8868secs\u4e2d\u6307\u5b9a\u7684\u8bc1\u5238\u884c\u60c5\u6570\u636e\u6309start\u5230end\u6307\u5b9a\u7684\u65f6\u95f4\u8303\u56f4\u8fdb\u884c\u6821\u9a8c Args: secs (List[str], optional): [description]. Defaults to None. start (str, optional): [description]. Defaults to None. end (str, optional): [description]. Defaults to None. Returns: [type]: [description] \"\"\" logger . info ( \"start validation...\" ) report = logging . getLogger ( \"validation_report\" ) cfg = cfg4py . init ( get_config_dir (), False ) await emit . start ( engine = emit . Engine . REDIS , dsn = cfg . redis . dsn , start_server = True ) await omicron . init () start = int ( start or await cache . sys . get ( \"jobs.bars_validation.range.start\" )) if end is None : end = tf . date2int ( arrow . now () . date ()) else : end = int ( end or await cache . sys . get ( \"jobs.bars_validation.range.stop\" )) if secs is None : async def get_sec (): return await cache . sys . lpop ( \"jobs.bars_validation.scope\" ) else : async def get_sec (): return secs . pop () if len ( secs ) else None errors = 0 while code := await get_sec (): try : for day in tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )]: expected = await get_checksum ( day ) if expected and expected . get ( code ): actual = await calc_checksums ( tf . int2date ( day ), [ code ]) d1 = actual . get ( code ) d2 = expected . get ( code ) missing1 = d2 . keys () - d1 # local has no checksum missing2 = d1 . keys () - d2 # remote has no checksum mismatch = { k for k in d1 . keys () & d2 if d1 [ k ] != d2 [ k ]} for k in missing1 : info = ( ValidationError . LOCAL_MISS , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) for k in missing2 : info = ( ValidationError . REMOTE_MISS , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) for k in mismatch : info = ( ValidationError . MISMATCH , day , code , k , d1 . get ( k ), d2 . get ( k ), ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) else : logger . error ( \"checksum for %s not found.\" , day ) info = ( ValidationError . NO_CHECKSUM , day , None , None , None , None ) report . info ( \" %s , %s , %s , %s , %s , %s \" , * info ) await emit . emit ( Events . OMEGA_VALIDATION_ERROR , info ) except Exception as e : logger . exception ( e ) errors += 1 await emit . emit ( Events . OMEGA_VALIDATION_ERROR , ( ValidationError . UNKNOWN , errors )) logger . warning ( \"do_validation meet %s unknown errors\" , errors )","title":"do_validation()"},{"location":"api/#omega.core.sanity.on_validation_error","text":"Parameters: Name Type Description Default report tuple object like ::(reason, day, code, frame, local, remote) required Source code in omega/core/sanity.py async def on_validation_error ( report : tuple ): \"\"\" Args: report: object like ::(reason, day, code, frame, local, remote) Returns: \"\"\" global validation_errors , no_validation_error_days # todo: raise no checksum issue if report [ 0 ] == ValidationError . UNKNOWN : no_validation_error_days = set () else : validation_errors . append ( report ) if report [ 1 ] is not None : no_validation_error_days -= { report [ 1 ]}","title":"on_validation_error()"},{"location":"api/#omega.core.sanity.start_validation","text":"\u5c06\u5f85\u6821\u9a8c\u7684\u8bc1\u5238\u6309CPU\u4e2a\u6570\u5747\u5300\u5212\u5206\uff0c\u521b\u5efa\u4e0eCPU\u4e2a\u6570\u76f8\u540c\u7684\u5b50\u8fdb\u7a0b\u6765\u6267\u884c\u6821\u9a8c\u3002\u6821\u9a8c\u7684\u8d77\u59cb\u65f6\u95f4\u7531\u6570\u636e \u5e93\u4e2djobs.bars_validation.range.start\u548cjobs.bars_validation.range.stop\u6765\u51b3\u5b9a\uff0c\u6bcf\u6b21\u6821\u9a8c \u7ed3\u675f\u540e\uff0c\u5c06jobs.bars_validation.range.start\u66f4\u65b0\u4e3a\u6821\u9a8c\u622a\u6b62\u7684\u6700\u540e\u4ea4\u6613\u65e5\u3002\u5982\u679c\u5404\u4e2a\u5b50\u8fdb\u7a0b\u62a5\u544a \u7684\u622a\u6b62\u4ea4\u6613\u65e5\u4e0d\u4e00\u6837\uff08\u6bd4\u5982\u53d1\u751f\u4e86\u5f02\u5e38\uff09\uff0c\u5219\u4f7f\u7528\u6700\u5c0f\u7684\u4ea4\u6613\u65e5\u3002 Source code in omega/core/sanity.py async def start_validation (): \"\"\" \u5c06\u5f85\u6821\u9a8c\u7684\u8bc1\u5238\u6309CPU\u4e2a\u6570\u5747\u5300\u5212\u5206\uff0c\u521b\u5efa\u4e0eCPU\u4e2a\u6570\u76f8\u540c\u7684\u5b50\u8fdb\u7a0b\u6765\u6267\u884c\u6821\u9a8c\u3002\u6821\u9a8c\u7684\u8d77\u59cb\u65f6\u95f4\u7531\u6570\u636e \u5e93\u4e2djobs.bars_validation.range.start\u548cjobs.bars_validation.range.stop\u6765\u51b3\u5b9a\uff0c\u6bcf\u6b21\u6821\u9a8c \u7ed3\u675f\u540e\uff0c\u5c06jobs.bars_validation.range.start\u66f4\u65b0\u4e3a\u6821\u9a8c\u622a\u6b62\u7684\u6700\u540e\u4ea4\u6613\u65e5\u3002\u5982\u679c\u5404\u4e2a\u5b50\u8fdb\u7a0b\u62a5\u544a \u7684\u622a\u6b62\u4ea4\u6613\u65e5\u4e0d\u4e00\u6837\uff08\u6bd4\u5982\u53d1\u751f\u4e86\u5f02\u5e38\uff09\uff0c\u5219\u4f7f\u7528\u6700\u5c0f\u7684\u4ea4\u6613\u65e5\u3002 \"\"\" global validation_errors , no_validation_error_days validation_errors = [] secs = Securities () cpu_count = psutil . cpu_count () # to check if the range is right pl = cache . sys . pipeline () pl . get ( \"jobs.bars_validation.range.start\" ) pl . get ( \"jobs.bars_validation.range.end\" ) start , end = await pl . execute () if start is None : if cfg . omega . validation . start is None : logger . warning ( \"start of validation is not specified, validation aborted.\" ) return else : start = tf . date2int ( arrow . get ( cfg . omega . validation . start )) else : start = int ( start ) if end is None : end = tf . date2int ( tf . floor ( arrow . now () . date (), FrameType . DAY )) else : end = int ( end ) assert start <= end no_validation_error_days = set ( tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )] ) # fixme: do validation per frame_type # fixme: test fail. Rewrite this before 0.6 releases codes = secs . choose ( cfg . omega . sync ) await cache . sys . delete ( \"jobs.bars_validation.scope\" ) await cache . sys . lpush ( \"jobs.bars_validation.scope\" , * codes ) logger . info ( \"start validation %s secs from %s to %s .\" , len ( codes ), start , end ) emit . register ( Events . OMEGA_VALIDATION_ERROR , on_validation_error ) t0 = time . time () code = ( \"from omega.core.sanity import do_validation_process_entry; \" \"do_validation_process_entry()\" ) procs = [] for i in range ( cpu_count ): proc = subprocess . Popen ([ sys . executable , \"-c\" , code ], env = os . environ ) procs . append ( proc ) timeout = 3600 while timeout > 0 : await asyncio . sleep ( 2 ) timeout -= 2 for proc in procs : proc . poll () if all ([ proc . returncode is not None for proc in procs ]): break if timeout <= 0 : for proc in procs : try : os . kill ( proc . pid , signal . SIGTERM ) except Exception : pass # set next start point validation_days = set ( tf . day_frames [( tf . day_frames >= start ) & ( tf . day_frames <= end )] ) diff = validation_days - no_validation_error_days if len ( diff ): last_no_error_day = min ( diff ) else : last_no_error_day = end await cache . sys . set ( \"jobs.bars_validation.range.start\" , last_no_error_day ) elapsed = time . time () - t0 logger . info ( \"Validation cost %s seconds, validation will start at %s next time\" , elapsed , last_no_error_day , )","title":"start_validation()"},{"location":"api/#omega.fetcher","text":"quotes fetcher","title":"fetcher"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher","text":"This is a awesome python script!","title":"abstract_quotes_fetcher"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher.AbstractQuotesFetcher","text":"","title":"AbstractQuotesFetcher"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher.AbstractQuotesFetcher.get_all_trade_days","text":"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_all_trade_days ( cls ): days = await cls . get_instance () . get_all_trade_days () await cache . save_calendar ( \"day_frames\" , map ( tf . date2int , days )) return days","title":"get_all_trade_days()"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher.AbstractQuotesFetcher.get_bars","text":"\u83b7\u53d6\u884c\u60c5\u6570\u636e\uff0c\u5e76\u5c06\u5df2\u7ed3\u675f\u7684\u5468\u671f\u6570\u636e\u5b58\u5165\u7f13\u5b58\u3002 \u5404\u79cd\u60c5\u51b5\uff1a 1. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\uff0c\u76d8\u4e2d\u3002\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u4e14 include_unclosed \u4e3a True \uff1a get_bars ( \"000001.XSHE\" , None , 1 , FrameType . DAY ) \u5f97\u5230\u7684\u6570\u636e\u53ef\u80fd\u5982\u4e0b\uff1a [(datetime.date(2021, 2, 24), 3638.9358, 3645.5288, 3617.44, 3620.3542, ...)] \u5728\u6536\u76d8\u524d\u4e0d\u540c\u65f6\u95f4\u8c03\u7528\uff0c\u5f97\u5230\u7684\u6570\u636e\u9664\u5f00\u76d8\u4ef7\u5916\uff0c\u5176\u5b83\u90fd\u5b9e\u65f6\u5728\u53d8\u52a8\u3002 \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-23\u65e5\uff0c\u76d8\u540e\uff0c\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u5c06\u5f97\u5230\u6536\u76d8\u540e\u56fa\u5b9a\u7684\u4ef7\u683c\u3002 \u4e0a\u8ff0\u8bf7\u6c42\u4e2d\uff0c include_unclosed \u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c( True )\u3002\u5982\u679c\u53d6\u4e3a False \uff0c\u4ecd\u4ee5\u793a\u4f8b1 \u6307\u5b9a\u7684\u573a\u666f\u4e3a\u4f8b\uff0c\u5219: get_bars ( \"000001.XSHG\" , None , 1 , FrameType . DAY , False ) \u56e0\u4e3a2021-2-24\u65e5\u672a\u6536\u76d8\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u6700\u540e\u4e00\u6761\u6570\u636e\u662f2021-2-23\u65e5\u7684\u3002 \u540c\u6837\u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\u76d8\u4e2d\uff0c\u5468\u4e09\u3002\u6b64\u65f6\u83b7\u53d6\u5468K\u7ebf\u3002\u5728 include_unclosed \u5206\u522b\u4e3a True \u548c False \u7684\u60c5\u51b5\u4e0b\uff1a [(datetime.date(2021, 2, 24), 3707.19, 3717.27, 3591.3647, 3592.3977, ...)] [(datetime.date(2021, 2, 19), 3721.09, 3731.69, 3634.01, 3696.17, ...)] \u6ce8\u610f\u8fd9\u91cc\u5f53 include_unclosed \u4e3aTrue\u65f6\uff0c\u8fd4\u56de\u7684\u5468K\u7ebf\u662f\u4ee52021-2-24\u4e3aFrame\u7684\u3002\u540c\u6837\uff0c\u5728\u76d8\u4e2d \u7684\u4e0d\u540c\u65f6\u95f4\u53d6\u8fd9\u4e2a\u6570\u636e\uff0c\u9664\u4e86 open \u6570\u503c\u4e4b\u5916\uff0c\u5176\u5b83\u90fd\u662f\u5b9e\u65f6\u53d8\u5316\u7684\u3002 \u5982\u679c\u5728\u5df2\u7ed3\u675f\u7684\u5468\u671f\u4e2d\uff0c\u5305\u542b\u505c\u724c\u6570\u636e\uff0c\u5219\u4f1a\u5bf9\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u8fdb\u884cnan\u586b\u5145\uff0c\u4ee5\u65b9\u4fbf\u6570\u636e\u4f7f\u7528 \u8005\u53ef\u4ee5\u8f83\u5bb9\u6613\u5730\u5206\u8fa8\u51fa\u6570\u636e\u4e0d\u8fde\u8d2f\u7684\u539f\u56e0\uff1a\u54ea\u4e9b\u662f\u505c\u724c\u9020\u6210\u7684\uff0c\u54ea\u4e9b\u662f\u975e\u4ea4\u6613\u65e5\u9020\u6210\u7684\u3002\u8fd9\u79cd\u5904\u7406 \u4f1a\u7565\u5fae\u964d\u4f4e\u6570\u636e\u83b7\u53d6\u901f\u5ea6\uff0c\u5e76\u589e\u52a0\u5b58\u50a8\u7a7a\u95f4\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42: get_bars ( \"000029.XSHE\" , datetime . date ( 2020 , 8 , 18 ), 10 , FrameType . DAY ) \u5c06\u83b7\u53d6\u52302020-8-5\u52302020-8-18\u95f4\u517110\u6761\u6570\u636e\u3002\u4f46\u7531\u4e8e\u671f\u95f4000029\u8fd9\u652f\u80a1\u7968\u5904\u4e8e\u505c\u724c\u671f\uff0c\u6240\u4ee5\u8fd4\u56de \u768410\u6761\u6570\u636e\u4e2d\uff0c\u6570\u503c\u90e8\u5206\u5168\u90e8\u586b\u5145\u4e3anp.nan\u3002 \u6ce8\u610f\u5982\u679c\u53d6\u5468\u7ebf\u548c\u6708\u7ebf\u6570\u636e\uff0c\u5982\u679c\u5f53\u5929\u505c\u724c\uff0c\u4f46\u53ea\u8981\u5468\u7ebf\u6709\u6570\u636e\uff0c\u5219\u4ecd\u80fd\u53d6\u5230\u3002\u5468\u7ebf\uff08\u6216\u8005\u6708\u7ebf\uff09\u7684 frame \u5c06\u662f\u505c\u724c\u524d\u4e00\u4ea4\u6613\u65e5\u3002\u6bd4\u5982\uff0c sec = \"600721.XSHG\" frame_type = FrameType . WEEK end = arrow . get ( \"2020-4-29 15:00\" ) . datetime bars = await aq . get_bars ( sec , end , 3 , FrameType . WEEK ) print ( bars ) 2020\u5e744\u670830\u65e5\u662f\u8be5\u5468\u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\u3002\u80a1\u7968600721\u57284\u670829\u65e5\u505c\u724c\u4e00\u5929\u3002\u4e0a\u8ff0\u8bf7\u6c42\u5c06\u5f97\u5230\u5982\u4e0b\u6570 \u636e\uff1a [(datetime.date(2020, 4, 17), 6.02, 6.69, 5.84, 6.58, ...) (datetime.date(2020, 4, 24), 6.51, 6.57, 5.68, 5.72, ...) (datetime.date(2020, 4, 28), 5.7, 5.71, 5.17, 5.36, ...)] \u505c\u724c\u53d1\u751f\u5728\u65e5\u7ebf\u7ea7\u522b\u4e0a\uff0c\u4f46\u6211\u4eec\u7684\u8bf7\u6c42\u53d1\u751f\u5728\u5468\u7ebf\u7ea7\u522b\u4e0a\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf94/29\u65e5\u8fdb\u884c\u586b\u5145\uff0c\u800c\u662f\u8fd4\u56de \u622a\u6b62\u52304\u670829\u65e5\u7684\u6570\u636e\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Union[datetime.date, datetime.datetime] \u6570\u636e\u622a\u6b62\u65e5 required n_bars int \u5f85\u83b7\u53d6\u7684\u6570\u636e\u6761\u6570 required frame_type FrameType \u6570\u636e\u6240\u5c5e\u7684\u5468\u671f required include_unclosed \u5982\u679c\u4e3a\u771f\uff0c\u5219\u4f1a\u5305\u542b\u5f53end\u6240\u5904\u7684\u90a3\u4e2aFrame\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5f53\u524d\u5b83\u8fd8\u672a\u7ed3\u675f True Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_bars ( cls , sec : str , end : Frame , n_bars : int , frame_type : FrameType , include_unclosed = True , ) -> np . ndarray : \"\"\"\u83b7\u53d6\u884c\u60c5\u6570\u636e\uff0c\u5e76\u5c06\u5df2\u7ed3\u675f\u7684\u5468\u671f\u6570\u636e\u5b58\u5165\u7f13\u5b58\u3002 \u5404\u79cd\u60c5\u51b5\uff1a 1. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\uff0c\u76d8\u4e2d\u3002\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u4e14`include_unclosed`\u4e3a `True`\uff1a ```python get_bars(\"000001.XSHE\", None, 1, FrameType.DAY) ``` \u5f97\u5230\u7684\u6570\u636e\u53ef\u80fd\u5982\u4e0b\uff1a ``` [(datetime.date(2021, 2, 24), 3638.9358, 3645.5288, 3617.44, 3620.3542, ...)] ``` \u5728\u6536\u76d8\u524d\u4e0d\u540c\u65f6\u95f4\u8c03\u7528\uff0c\u5f97\u5230\u7684\u6570\u636e\u9664\u5f00\u76d8\u4ef7\u5916\uff0c\u5176\u5b83\u90fd\u5b9e\u65f6\u5728\u53d8\u52a8\u3002 2. \u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-23\u65e5\uff0c\u76d8\u540e\uff0c\u6b64\u65f6\u8bf7\u6c42\u4e0a\u8bc1\u6307\u6570\u65e5\u7ebf\uff0c\u5c06\u5f97\u5230\u6536\u76d8\u540e\u56fa\u5b9a\u7684\u4ef7\u683c\u3002 3. \u4e0a\u8ff0\u8bf7\u6c42\u4e2d\uff0c`include_unclosed`\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u503c(`True`)\u3002\u5982\u679c\u53d6\u4e3a`False`\uff0c\u4ecd\u4ee5\u793a\u4f8b1 \u6307\u5b9a\u7684\u573a\u666f\u4e3a\u4f8b\uff0c\u5219: ```python get_bars(\"000001.XSHG\", None, 1, FrameType.DAY, False) ``` \u56e0\u4e3a2021-2-24\u65e5\u672a\u6536\u76d8\uff0c\u6240\u4ee5\u83b7\u53d6\u7684\u6700\u540e\u4e00\u6761\u6570\u636e\u662f2021-2-23\u65e5\u7684\u3002 4. \u540c\u6837\u5047\u8bbe\u73b0\u5728\u65f6\u95f4\u662f2021-2-24\u65e5\u76d8\u4e2d\uff0c\u5468\u4e09\u3002\u6b64\u65f6\u83b7\u53d6\u5468K\u7ebf\u3002\u5728`include_unclosed`\u5206\u522b\u4e3a `True`\u548c`False`\u7684\u60c5\u51b5\u4e0b\uff1a ``` [(datetime.date(2021, 2, 24), 3707.19, 3717.27, 3591.3647, 3592.3977, ...)] [(datetime.date(2021, 2, 19), 3721.09, 3731.69, 3634.01, 3696.17, ...)] ``` \u6ce8\u610f\u8fd9\u91cc\u5f53`include_unclosed`\u4e3aTrue\u65f6\uff0c\u8fd4\u56de\u7684\u5468K\u7ebf\u662f\u4ee52021-2-24\u4e3aFrame\u7684\u3002\u540c\u6837\uff0c\u5728\u76d8\u4e2d \u7684\u4e0d\u540c\u65f6\u95f4\u53d6\u8fd9\u4e2a\u6570\u636e\uff0c\u9664\u4e86`open`\u6570\u503c\u4e4b\u5916\uff0c\u5176\u5b83\u90fd\u662f\u5b9e\u65f6\u53d8\u5316\u7684\u3002 5. \u5982\u679c\u5728\u5df2\u7ed3\u675f\u7684\u5468\u671f\u4e2d\uff0c\u5305\u542b\u505c\u724c\u6570\u636e\uff0c\u5219\u4f1a\u5bf9\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u8fdb\u884cnan\u586b\u5145\uff0c\u4ee5\u65b9\u4fbf\u6570\u636e\u4f7f\u7528 \u8005\u53ef\u4ee5\u8f83\u5bb9\u6613\u5730\u5206\u8fa8\u51fa\u6570\u636e\u4e0d\u8fde\u8d2f\u7684\u539f\u56e0\uff1a\u54ea\u4e9b\u662f\u505c\u724c\u9020\u6210\u7684\uff0c\u54ea\u4e9b\u662f\u975e\u4ea4\u6613\u65e5\u9020\u6210\u7684\u3002\u8fd9\u79cd\u5904\u7406 \u4f1a\u7565\u5fae\u964d\u4f4e\u6570\u636e\u83b7\u53d6\u901f\u5ea6\uff0c\u5e76\u589e\u52a0\u5b58\u50a8\u7a7a\u95f4\u3002 \u6bd4\u5982\u4e0b\u9762\u7684\u8bf7\u6c42: ```python get_bars(\"000029.XSHE\", datetime.date(2020,8,18), 10, FrameType.DAY) ``` \u5c06\u83b7\u53d6\u52302020-8-5\u52302020-8-18\u95f4\u517110\u6761\u6570\u636e\u3002\u4f46\u7531\u4e8e\u671f\u95f4000029\u8fd9\u652f\u80a1\u7968\u5904\u4e8e\u505c\u724c\u671f\uff0c\u6240\u4ee5\u8fd4\u56de \u768410\u6761\u6570\u636e\u4e2d\uff0c\u6570\u503c\u90e8\u5206\u5168\u90e8\u586b\u5145\u4e3anp.nan\u3002 \u6ce8\u610f\u5982\u679c\u53d6\u5468\u7ebf\u548c\u6708\u7ebf\u6570\u636e\uff0c\u5982\u679c\u5f53\u5929\u505c\u724c\uff0c\u4f46\u53ea\u8981\u5468\u7ebf\u6709\u6570\u636e\uff0c\u5219\u4ecd\u80fd\u53d6\u5230\u3002\u5468\u7ebf\uff08\u6216\u8005\u6708\u7ebf\uff09\u7684 `frame`\u5c06\u662f\u505c\u724c\u524d\u4e00\u4ea4\u6613\u65e5\u3002\u6bd4\u5982\uff0c ```python sec = \"600721.XSHG\" frame_type = FrameType.WEEK end = arrow.get(\"2020-4-29 15:00\").datetime bars = await aq.get_bars(sec, end, 3, FrameType.WEEK) print(bars) ``` 2020\u5e744\u670830\u65e5\u662f\u8be5\u5468\u7684\u6700\u540e\u4e00\u4e2a\u4ea4\u6613\u65e5\u3002\u80a1\u7968600721\u57284\u670829\u65e5\u505c\u724c\u4e00\u5929\u3002\u4e0a\u8ff0\u8bf7\u6c42\u5c06\u5f97\u5230\u5982\u4e0b\u6570 \u636e\uff1a ``` [(datetime.date(2020, 4, 17), 6.02, 6.69, 5.84, 6.58, ...) (datetime.date(2020, 4, 24), 6.51, 6.57, 5.68, 5.72, ...) (datetime.date(2020, 4, 28), 5.7, 5.71, 5.17, 5.36, ...)] ``` \u505c\u724c\u53d1\u751f\u5728\u65e5\u7ebf\u7ea7\u522b\u4e0a\uff0c\u4f46\u6211\u4eec\u7684\u8bf7\u6c42\u53d1\u751f\u5728\u5468\u7ebf\u7ea7\u522b\u4e0a\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5bf94/29\u65e5\u8fdb\u884c\u586b\u5145\uff0c\u800c\u662f\u8fd4\u56de \u622a\u6b62\u52304\u670829\u65e5\u7684\u6570\u636e\u3002 args: sec: \u8bc1\u5238\u4ee3\u7801 end: \u6570\u636e\u622a\u6b62\u65e5 n_bars: \u5f85\u83b7\u53d6\u7684\u6570\u636e\u6761\u6570 frame_type: \u6570\u636e\u6240\u5c5e\u7684\u5468\u671f include_unclosed: \u5982\u679c\u4e3a\u771f\uff0c\u5219\u4f1a\u5305\u542b\u5f53end\u6240\u5904\u7684\u90a3\u4e2aFrame\u7684\u6570\u636e\uff0c\u5373\u4f7f\u5f53\u524d\u5b83\u8fd8\u672a\u7ed3\u675f \"\"\" now = arrow . now ( tz = cfg . tz ) end = end or now . datetime # \u5982\u679cend\u8d85\u51fa\u5f53\u524d\u65f6\u95f4\uff0c\u5219\u8ba4\u4e3a\u662f\u4e0d\u5408\u6cd5\u7684\u3002\u5982\u679c\u7528\u6237\u60f3\u53d6\u5230\u6700\u65b0\u7684\u6570\u636e\uff0c\u5e94\u8be5\u4f20\u5165None if type ( end ) == datetime . date : if end > now . date (): return None elif type ( end ) == datetime . datetime : if end > now : return None bars = await cls . get_instance () . get_bars ( sec , end , n_bars , frame_type . value , include_unclosed ) if len ( bars ) == 0 : return # \u6839\u636e\u6307\u5b9a\u7684end\uff0c\u8ba1\u7b97\u7ed3\u675f\u65f6\u7684frame last_closed_frame = tf . floor ( end , frame_type ) last_frame = bars [ - 1 ][ \"frame\" ] # \u8ba1\u7b97\u6709\u591a\u5c11\u6839k\u7ebf\u662f\u5df2\u7ed3\u675f\u7684 n_closed = n_bars - 1 if frame_type == FrameType . DAY : # \u76d8\u540e\u53d6\u65e5\u7ebf\uff0c\u8fd4\u56de\u7684\u4e00\u5b9a\u662f\u5168\u90e8\u90fd\u5df2closed\u7684\u6570\u636e # \u76d8\u4e2d\u53d6\u65e5\u7ebf\uff0c\u8fd4\u56de\u7684last_frame\u4f1a\u662f\u5f53\u5929\u7684\u65e5\u671f\uff0c\u4f46\u8be5\u65e5\u7ebf\u5e76\u672a\u7ed3\u675f if now . datetime . hour >= 15 or last_frame < now . date (): n_closed = n_bars else : # \u5982\u679clast_frame <= end\u7684\u4e0a\u9650\uff0c\u5219\u8fd4\u56de\u7684\u4e5f\u4e00\u5b9a\u662f\u5168\u90e8\u90fdclosed\u7684\u6570\u636e if last_frame <= tf . floor ( end , frame_type ): n_closed = n_bars remainder = [ bars [ - 1 ]] if n_closed < n_bars else None closed_bars = cls . _fill_na ( bars , n_closed , last_closed_frame , frame_type ) # \u53ea\u4fdd\u5b58\u5df2\u7ed3\u675f\u7684bar await cache . save_bars ( sec , closed_bars , frame_type ) if remainder is None : return closed_bars else : return np . concatenate ([ closed_bars , remainder ])","title":"get_bars()"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher.AbstractQuotesFetcher.get_security_list","text":"\u6309\u5982\u4e0b\u683c\u5f0f\u8fd4\u56de\u8bc1\u5238\u5217\u8868\u3002 code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock Returns: Type Description Optional[numpy.ndarray] Union[None, np.ndarray]: [description] Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_security_list ( cls ) -> Union [ None , np . ndarray ]: \"\"\"\u6309\u5982\u4e0b\u683c\u5f0f\u8fd4\u56de\u8bc1\u5238\u5217\u8868\u3002 code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock Returns: Union[None, np.ndarray]: [description] \"\"\" securities = await cls . get_instance () . get_security_list () if securities is None or len ( securities ) == 0 : logger . warning ( \"failed to update securities. %s is returned.\" , securities ) return securities key = \"securities\" pipeline = cache . security . pipeline () pipeline . delete ( key ) for code , display_name , name , start , end , _type in securities : pipeline . rpush ( key , f \" { code } , { display_name } , { name } , { start } ,\" f \" { end } , { _type } \" ) await pipeline . execute () return securities","title":"get_security_list()"},{"location":"api/#omega.fetcher.abstract_quotes_fetcher.AbstractQuotesFetcher.get_valuation","text":"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day date [description] required Returns: Type Description ndarray numpy.ndarray: [description] Source code in omega/fetcher/abstract_quotes_fetcher.py @classmethod async def get_valuation ( cls , code : Union [ str , List [ str ]], day : datetime . date , fields : List [ str ] = None , n : int = 1 , ) -> np . ndarray : valuation = await cls . get_instance () . get_valuation ( code , day , n ) await Valuation . save ( valuation ) if fields is None : return valuation if isinstance ( fields , str ): fields = [ fields ] mapping = dict ( valuation . dtype . descr ) fields = [( name , mapping [ name ]) for name in fields ] return rfn . require_fields ( valuation , fields )","title":"get_valuation()"},{"location":"api/#omega.fetcher.archive","text":"","title":"archive"},{"location":"api/#omega.fetcher.archive.adjust_range","text":"adjust secs's range after archive bars imported Source code in omega/fetcher/archive.py async def adjust_range ( batch : int = 500 ): \"\"\"adjust secs's range after archive bars imported\"\"\" cur = b \"0\" key = \"archive.ranges.*\" logger . info ( \"start adjust range\" ) while cur : cur , keys = await cache . sys . scan ( cur , match = key , count = batch ) if not keys : continue pl = cache . security . pipeline () for item in keys : try : values = [ int ( v ) for v in await cache . sys . lrange ( item , 0 , - 1 )] values . sort () arc_head , arc_tail = values [ 0 ], values [ - 1 ] code_frame_key = item . replace ( \"archive.ranges.\" , \"\" ) head , tail = await cache . security . hmget ( code_frame_key , \"head\" , \"tail\" ) head = int ( head ) if head is not None else None tail = int ( tail ) if tail is not None else None # head, tail, arc_head, arc_tail should be all frame-aligned if head is None or tail is None : head , tail = arc_head , arc_tail elif arc_tail < head or arc_head > tail : head , tail = arc_head , arc_tail else : head = min ( arc_head , head ) tail = max ( arc_tail , tail ) pl . hset ( code_frame_key , \"head\" , head ) pl . hset ( code_frame_key , \"tail\" , tail ) except Exception as e : logger . exception ( e ) logger . warning ( \"failed to set range for %s \" , code_frame_key ) await pl . execute ()","title":"adjust_range()"},{"location":"api/#omega.fetcher.archive.clear_range","text":"clear cached secs's range before/after import archive bars Source code in omega/fetcher/archive.py async def clear_range (): \"\"\"clear cached secs's range before/after import archive bars\"\"\" key = \"archive.ranges.*\" keys = await cache . sys . keys ( key ) if keys : await cache . sys . delete ( * keys )","title":"clear_range()"},{"location":"api/#omega.fetcher.archive.main","text":"\u5141\u8bb8\u5c06\u672c\u6a21\u5757\u4ee5\u72ec\u7acb\u8fdb\u7a0b\u8fd0\u884c\uff0c\u4ee5\u652f\u6301\u591a\u8fdb\u7a0b Parameters: Name Type Description Default months str \u9017\u53f7\u5206\u9694\u7684\u6708\u5217\u8868\u3002\u683c\u5f0f\u5982202012 required cats str \u9017\u53f7\u5206\u9694\u7684\u7c7b\u522b\u5217\u8868\uff0c\u5982\"stock,index\" required Source code in omega/fetcher/archive.py def main ( months : str , cats : str , archive_server : str = None ): \"\"\"\u5141\u8bb8\u5c06\u672c\u6a21\u5757\u4ee5\u72ec\u7acb\u8fdb\u7a0b\u8fd0\u884c\uff0c\u4ee5\u652f\u6301\u591a\u8fdb\u7a0b Args: months (str): \u9017\u53f7\u5206\u9694\u7684\u6708\u5217\u8868\u3002\u683c\u5f0f\u5982202012 cats (str): \u9017\u53f7\u5206\u9694\u7684\u7c7b\u522b\u5217\u8868\uff0c\u5982\"stock,index\" \"\"\" config_dir = get_config_dir () cfg = cfg4py . init ( config_dir , False ) if archive_server : cfg . omega . urls . archive = archive_server months = str ( months ) months = [ int ( x ) for x in months . split ( \",\" ) if x ] cats = [ x for x in cats . split ( \",\" )] asyncio . run ( _main ( months , cats ))","title":"main()"},{"location":"api/#omega.fetcher.quotes_fetcher","text":"Interface for quotes fetcher","title":"quotes_fetcher"},{"location":"api/#omega.fetcher.quotes_fetcher.QuotesFetcher","text":"","title":"QuotesFetcher"},{"location":"api/#omega.fetcher.quotes_fetcher.QuotesFetcher.get_all_trade_days","text":"\u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 Source code in omega/fetcher/quotes_fetcher.py async def get_all_trade_days ( self ): \"\"\" \u8fd4\u56de\u4ea4\u6613\u65e5\u5386\u3002\u4e0d\u540c\u7684\u670d\u52a1\u5668\u53ef\u80fd\u8fd4\u56de\u7684\u65f6\u95f4\u8de8\u5ea6\u4e0d\u4e00\u6837\uff0c\u4f46\u76f8\u540c\u8de8\u5ea6\u5185\u7684\u65f6\u95f4\u5e94\u8be5\u4e00\u6837\u3002\u5bf9\u5df2 \u7ecf\u8fc7\u53bb\u7684\u4ea4\u6613\u65e5\uff0c\u53ef\u4ee5\u7528\u4e0a\u8bc1\u6307\u6570\u6765\u9a8c\u8bc1\u3002 \"\"\" raise NotImplementedError","title":"get_all_trade_days()"},{"location":"api/#omega.fetcher.quotes_fetcher.QuotesFetcher.get_bars","text":"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Parameters: Name Type Description Default sec str \u8bc1\u5238\u4ee3\u7801 required end Union[datetime.date, datetime.datetime] required n_bars int required frame_type FrameType required allow_unclosed bool \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 True Returns: Type Description ndarray a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not Source code in omega/fetcher/quotes_fetcher.py async def get_bars ( self , sec : str , end : Frame , n_bars : int , frame_type : FrameType , allow_unclosed = True , ) -> numpy . ndarray : \"\"\"\u53d6n\u4e2a\u5355\u4f4d\u7684k\u7ebf\u6570\u636e\u3002 k\u7ebf\u5468\u671f\u7531frame_type\u6307\u5b9a\u3002\u6700\u540e\u7ed3\u675f\u5468\u671f\u4e3aend\u3002\u80a1\u7968\u505c\u724c\u671f\u95f4\u7684\u6570\u636e\u4f1a\u4f7f\u7528None\u586b\u5145\u3002 Args: sec (str): \u8bc1\u5238\u4ee3\u7801 end (Frame): n_bars (int): frame_type (FrameType): allow_unclosed (bool): \u4e3a\u771f\u65f6\uff0c\u5f53\u524d\u672a\u7ed3\u675f\u7684\u5e27\u6570\u636e\u4e5f\u83b7\u53d6 Returns: a numpy.ndarray, with each element is: 'frame': datetime.date or datetime.datetime, depends on frame_type. Denotes which time frame the data belongs . 'open, high, low, close': float 'volume': double 'amount': the buy/sell amount in total, double 'factor': float, may exist or not \"\"\" raise NotImplementedError","title":"get_bars()"},{"location":"api/#omega.fetcher.quotes_fetcher.QuotesFetcher.get_security_list","text":"fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: Type Description ndarray Source code in omega/fetcher/quotes_fetcher.py async def get_security_list ( self ) -> numpy . ndarray : \"\"\" fetch security list from server. The returned list is a numpy.ndarray, which each elements should look like: code display_name name start_date end_date type 000001.XSHE \u5e73\u5b89\u94f6\u884c PAYH 1991-04-03 2200-01-01 stock 000002.XSHE \u4e07\u79d1A WKA 1991-01-29 2200-01-01 stock all fields are string type Returns: \"\"\" raise NotImplementedError","title":"get_security_list()"},{"location":"api/#omega.fetcher.quotes_fetcher.QuotesFetcher.get_valuation","text":"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Parameters: Name Type Description Default code Union[str, List[str]] [description] required day Union[datetime.date, datetime.datetime] [description] required Returns: Type Description ndarray numpy.ndarray: [description] Source code in omega/fetcher/quotes_fetcher.py async def get_valuation ( self , code : Union [ str , List [ str ]], day : Frame ) -> numpy . ndarray : \"\"\"\u8bfb\u53d6code\u6307\u5b9a\u7684\u80a1\u7968\u5728date\u6307\u5b9a\u65e5\u671f\u7684\u5e02\u503c\u6570\u636e\u3002 \u8fd4\u56de\u6570\u636e\u5305\u62ec\uff1a code: \u80a1\u7968\u4ee3\u7801 day: \u65e5\u671f captialization: \u603b\u80a1\u672c circulating_cap: \u6d41\u901a\u80a1\u672c\uff08\u4e07\u80a1\uff09 market_cap: \u603b\u5e02\u503c\uff08\u4ebf\u5143\uff09 circulating_market_cap\uff1a \u6d41\u901a\u5e02\u503c\uff08\u4ebf\u5143\uff09 turnover_ration: \u6362\u624b\u7387\uff08%\uff09 pe_ratio: \u5e02\u76c8\u7387\uff08PE,TTM\uff09\u6bcf\u80a1\u5e02\u4ef7\u4e3a\u6bcf\u80a1\u6536\u76ca\u7684\u500d\u6570\uff0c\u53cd\u6620\u6295\u8d44\u4eba\u5bf9\u6bcf\u5143\u51c0\u5229\u6da6\u6240\u613f\u652f\u4ed8\u7684\u4ef7 \u683c\uff0c\u7528\u6765\u4f30\u8ba1\u80a1\u7968\u7684\u6295\u8d44\u62a5\u916c\u548c\u98ce\u9669 pe_ratio_lyr: \u5e02\u76c8\u7387\uff08PE\uff09\uff0c\u4ee5\u4e0a\u4e00\u5e74\u5ea6\u6bcf\u80a1\u76c8\u5229\u8ba1\u7b97\u7684\u9759\u6001\u5e02\u76c8\u7387. \u80a1\u4ef7/\u6700\u8fd1\u5e74\u5ea6\u62a5\u544aEPS pb_ratio: \u5e02\u51c0\u7387\uff08PB\uff09 ps_ratio: \u5e02\u9500\u7387(PS) pcf_ratio: \u5e02\u73b0\u7387\uff08PCF\uff09 Args: code (Union[str, List[str]]): [description] day (Frame): [description] Returns: numpy.ndarray: [description] \"\"\" raise NotImplementedError","title":"get_valuation()"},{"location":"api/#omega.jobs","text":"","title":"jobs"},{"location":"api/#omega.jobs.syncjobs","text":"","title":"syncjobs"},{"location":"api/#omega.jobs.syncjobs.closing_quotation_sync_bars","text":"\u6536\u76d8\u4e4b\u540e\u4ece\u65b0\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708 Returns: Type Description { \"frame\" \"1m\", \"start\": \"2020-01-02\", \"stop\": \"2020-01-02\", \"delay\": 3, \"cat\": [], \"include\": \"000001.XSHE\", \"exclude\": \"000001.XSHG\", }, Source code in omega/jobs/syncjobs.py async def closing_quotation_sync_bars ( all_params ): \"\"\" \u6536\u76d8\u4e4b\u540e\u4ece\u65b0\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708 Returns: { \"frame\": \"1m\", \"start\": \"2020-01-02\", \"stop\": \"2020-01-02\", \"delay\": 3, \"cat\": [], \"include\": \"000001.XSHE\", \"exclude\": \"000001.XSHG\", }, \"\"\" logger . info ( \"\u6b63\u5728\u540c\u6b65\u4eca\u5929\u7684\u5206\u949f\u7ebf\u6570\u636e\u548c\u65e5\u5468\u6708\" ) for params in all_params : codes , frame_type , start , stop , delay = parse_sync_params ( ** params ) start_date = await reset_tail ( codes , frame_type ) params [ \"start\" ] = start_date logger . info ( params ) await trigger_bars_sync ( params )","title":"closing_quotation_sync_bars()"},{"location":"api/#omega.jobs.syncjobs.load_sync_params","text":"\u6839\u636e\u6307\u5b9a\u7684frame_type\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u540c\u6b65\u53c2\u6570 Parameters: Name Type Description Default frame_type FrameType [description] required Returns: Type Description dict dict: see @[omega.jobs.syncjobs.parse_sync_params] Source code in omega/jobs/syncjobs.py def load_sync_params ( frame_type : FrameType ) -> dict : \"\"\"\u6839\u636e\u6307\u5b9a\u7684frame_type\uff0c\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u52a0\u8f7d\u540c\u6b65\u53c2\u6570 Args: frame_type (FrameType): [description] Returns: dict: see @[omega.jobs.syncjobs.parse_sync_params] \"\"\" for item in cfg . omega . sync . bars : if item . get ( \"frame\" ) == frame_type . value : try : secs , frame_type , start , stop , delay = parse_sync_params ( ** item ) return item except Exception as e : logger . exception ( e ) logger . warning ( \"failed to parse %s \" , item ) return None return None","title":"load_sync_params()"},{"location":"api/#omega.jobs.syncjobs.parse_sync_params","text":"\u6309\u7167 \u4f7f\u7528\u624b\u518c \u4e2d\u7684\u89c4\u5219\uff0c\u89e3\u6790\u548c\u8865\u5168\u540c\u6b65\u53c2\u6570\u3002 \u5982\u679c frame_type \u4e3a\u5206\u949f\u7ea7\uff0c\u5219\u5f53 start \u6307\u5b9a\u4e3a date \u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u8d77\u59cb\u5e27\uff1b \u5f53 stop \u4e3a date \u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u6700\u540e\u4e00\u5e27\u3002 Parameters: Name Type Description Default frame Union[str, datetime.date, datetime.datetime] frame type to be sync. The word frame is used here for easy understand by end user. It actually implies \"FrameType\". required cat List[str] which catetories is about to be synced. Should be one of ['stock', 'index']. Defaults to None. None start Union[str, datetime.date] [description]. Defaults to None. None stop Union[str, datetime.date, datetime.datetime] [description]. Defaults to None. None delay int [description]. Defaults to 5. 0 include str which securities should be included, seperated by space, for example, \"000001.XSHE 000004.XSHE\". Defaults to empty string. '' exclude str which securities should be excluded, seperated by a space. Defaults to empty string. '' Returns: Type Description Tuple codes (List[str]): \u5f85\u540c\u6b65\u8bc1\u5238\u5217\u8868 frame_type (FrameType): start (Frame): stop (Frame): delay (int): Source code in omega/jobs/syncjobs.py def parse_sync_params ( frame : Union [ str , Frame ], cat : List [ str ] = None , start : Union [ str , datetime . date ] = None , stop : Union [ str , Frame ] = None , delay : int = 0 , include : str = \"\" , exclude : str = \"\" , ) -> Tuple : \"\"\"\u6309\u7167[\u4f7f\u7528\u624b\u518c](usage.md#22-\u5982\u4f55\u540c\u6b65K\u7ebf\u6570\u636e)\u4e2d\u7684\u89c4\u5219\uff0c\u89e3\u6790\u548c\u8865\u5168\u540c\u6b65\u53c2\u6570\u3002 \u5982\u679c`frame_type`\u4e3a\u5206\u949f\u7ea7\uff0c\u5219\u5f53`start`\u6307\u5b9a\u4e3a`date`\u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u8d77\u59cb\u5e27\uff1b \u5f53`stop`\u4e3a`date`\u7c7b\u578b\u65f6\uff0c\u81ea\u52a8\u66f4\u6b63\u4e3a\u5bf9\u5e94\u4ea4\u6613\u65e5\u7684\u6700\u540e\u4e00\u5e27\u3002 Args: frame (Union[str, Frame]): frame type to be sync. The word ``frame`` is used here for easy understand by end user. It actually implies \"FrameType\". cat (List[str]): which catetories is about to be synced. Should be one of ['stock', 'index']. Defaults to None. start (Union[str, datetime.date], optional): [description]. Defaults to None. stop (Union[str, Frame], optional): [description]. Defaults to None. delay (int, optional): [description]. Defaults to 5. include (str, optional): which securities should be included, seperated by space, for example, \"000001.XSHE 000004.XSHE\". Defaults to empty string. exclude (str, optional): which securities should be excluded, seperated by a space. Defaults to empty string. Returns: - codes (List[str]): \u5f85\u540c\u6b65\u8bc1\u5238\u5217\u8868 - frame_type (FrameType): - start (Frame): - stop (Frame): - delay (int): \"\"\" frame_type = FrameType ( frame ) if frame_type in tf . minute_level_frames : if stop : stop = arrow . get ( stop , tzinfo = cfg . tz ) if stop . hour == 0 : # \u672a\u6307\u5b9a\u6709\u6548\u7684\u65f6\u95f4\u5e27\uff0c\u4f7f\u7528\u5f53\u65e5\u7ed3\u675f\u5e27 stop = tf . last_min_frame ( tf . day_shift ( stop . date (), 0 ), frame_type ) else : stop = tf . floor ( stop , frame_type ) else : stop = tf . floor ( arrow . now ( tz = cfg . tz ) . datetime , frame_type ) if stop > arrow . now ( tz = cfg . tz ): raise ValueError ( f \"\u8bf7\u52ff\u5c06\u540c\u6b65\u622a\u6b62\u65f6\u95f4\u8bbe\u7f6e\u5728\u672a\u6765: { stop } \" ) if start : start = arrow . get ( start , tzinfo = cfg . tz ) if start . hour == 0 : # \u672a\u6307\u5b9a\u6709\u6548\u7684\u4ea4\u6613\u5e27\uff0c\u4f7f\u7528\u5f53\u65e5\u7684\u8d77\u59cb\u5e27 start = tf . first_min_frame ( tf . day_shift ( start . date (), 0 ), frame_type ) else : start = tf . floor ( start , frame_type ) else : start = tf . shift ( stop , - 999 , frame_type ) else : stop = ( stop and arrow . get ( stop ) . date ()) or arrow . now () . date () if stop == arrow . now () . date (): stop = arrow . now ( tz = cfg . tz ) stop = tf . floor ( stop , frame_type ) start = tf . floor (( start and arrow . get ( start ) . date ()), frame_type ) or tf . shift ( stop , - 1000 , frame_type ) secs = Securities () codes = secs . choose ( cat or []) exclude = map ( lambda x : x , exclude . split ( \" \" )) codes = list ( set ( codes ) - set ( exclude )) include = list ( filter ( lambda x : x , include . split ( \" \" ))) codes . extend ( include ) return codes , frame_type , start , stop , int ( delay )","title":"parse_sync_params()"},{"location":"api/#omega.jobs.syncjobs.reset_tail","text":"\u91cd\u7f6etail\u7684\u503c\uff0c\u6765\u540c\u6b65\u6570\u636e Parameters: Name Type Description Default days \u9700\u8981\u91cd\u7f6e\u5230\u591a\u5c11\u5929\u4e4b\u524d -1 codes [] required frame_type FrameType required Source code in omega/jobs/syncjobs.py async def reset_tail ( codes : [], frame_type : FrameType , days =- 1 ): \"\"\" \u91cd\u7f6etail\u7684\u503c\uff0c\u6765\u540c\u6b65\u6570\u636e Args: days: \u9700\u8981\u91cd\u7f6e\u5230\u591a\u5c11\u5929\u4e4b\u524d codes: frame_type: Returns: \"\"\" now = arrow . now () _day = tf . day_shift ( now , days ) if frame_type in [ FrameType . MIN1 , FrameType . MIN5 , FrameType . MIN15 , FrameType . MIN30 , FrameType . MIN60 ]: date = datetime . datetime ( _day . year , _day . month , _day . day , 15 ) tail = tf . time2int ( date ) elif frame_type == FrameType . DAY : date = _day tail = tf . date2int ( date ) elif frame_type == FrameType . WEEK : date = tf . shift ( now , days , FrameType . WEEK ) tail = tf . date2int ( date ) elif frame_type == FrameType . MONTH : date = tf . shift ( now , days , FrameType . MONTH ) tail = tf . date2int ( date ) else : raise Exception ( \"\u4e0d\u652f\u6301\u7684frame_type\" ) # print(f\"reset tail to[m:{m}, day:{day}, week:{week}, month:{month}] \") for code in codes : key = f \" { code } : { frame_type . value } \" resp = await cache . security . hget ( key , \"tail\" ) if resp is None : continue _tail = int ( resp ) print ( _tail ) if _tail > tail : # \u53ea\u6709\u6570\u636e\u5e93\u91cc\u7684\u65f6\u95f4\u5927\u4e8etail \u624d\u53ef\u4ee5 await cache . security . hset ( key , 'tail' , tail ) return date . strftime ( '%Y-%m- %d ' )","title":"reset_tail()"},{"location":"api/#omega.jobs.syncjobs.sync_bars","text":"sync bars on signal OMEGA_DO_SYNC received Parameters: Name Type Description Default params dict composed of the following: { secs (List[str]): \u5f85\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684.\u5982\u679c\u4e3aNone\u6216\u8005\u4e3a\u7a7a\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u8f6e\u8be2 frame_type (FrameType):k\u7ebf\u7684\u5e27\u7c7b\u578b start (Frame): k\u7ebf\u8d77\u59cb\u65f6\u95f4 stop (Frame): k\u7ebf\u7ed3\u675f\u65f6\u95f4 } required Returns: Type Description [type] [description] Source code in omega/jobs/syncjobs.py async def sync_bars ( params : dict ): \"\"\"sync bars on signal OMEGA_DO_SYNC received Args: params (dict): composed of the following: ``` { secs (List[str]): \u5f85\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684.\u5982\u679c\u4e3aNone\u6216\u8005\u4e3a\u7a7a\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u8f6e\u8be2 frame_type (FrameType):k\u7ebf\u7684\u5e27\u7c7b\u578b start (Frame): k\u7ebf\u8d77\u59cb\u65f6\u95f4 stop (Frame): k\u7ebf\u7ed3\u675f\u65f6\u95f4 } ``` Returns: [type]: [description] \"\"\" secs , frame_type , start , stop = ( params . get ( \"secs\" ), params . get ( \"frame_type\" ), params . get ( \"start\" ), params . get ( \"stop\" ), ) if secs is not None : logger . info ( \"sync bars with %s ( %s ~ %s ) for given %s secs\" , frame_type , start , stop , len ( secs ), ) async def get_sec (): return secs . pop () if len ( secs ) else None else : logger . info ( \"sync bars with %s ( %s ~ %s ) in polling mode\" , frame_type , start , stop ) async def get_sec (): return await cache . sys . lpop ( key_scope ) key_scope = f \"jobs.bars_sync.scope. { frame_type . value } \" if start is None or frame_type is None : raise ValueError ( \"you must specify a start date/frame_type for sync\" ) if stop is None : stop = tf . floor ( arrow . now ( tz = cfg . tz ), frame_type ) while code := await get_sec (): try : await sync_bars_for_security ( code , frame_type , start , stop ) except FetcherQuotaError as e : logger . warning ( \"Quota exceeded when syncing %s . Sync aborted.\" , code ) logger . exception ( e ) return # stop the sync except Exception as e : logger . warning ( \"Failed to sync %s \" , code ) logger . exception ( e ) elapsed = await _stop_job_timer ( \"sync\" ) logger . info ( \" %s finished quotes sync in %s seconds\" , os . getpid (), elapsed )","title":"sync_bars()"},{"location":"api/#omega.jobs.syncjobs.sync_calendar","text":"\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u65e5\uff0c\u5e76\u8ba1\u7b97\u51fa\u5468\u7ebf\u5e27\u548c\u6708\u7ebf\u5e27 Source code in omega/jobs/syncjobs.py async def sync_calendar (): \"\"\"\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u6240\u6709\u4ea4\u6613\u65e5\uff0c\u5e76\u8ba1\u7b97\u51fa\u5468\u7ebf\u5e27\u548c\u6708\u7ebf\u5e27 Returns: \"\"\" trade_days = await aq . get_all_trade_days () if trade_days is None or len ( trade_days ) == 0 : logger . warning ( \"failed to fetch trade days.\" ) return None tf . day_frames = [ tf . date2int ( x ) for x in trade_days ] weeks = [] last = trade_days [ 0 ] for cur in trade_days : if cur . weekday () < last . weekday () or ( cur - last ) . days >= 7 : weeks . append ( last ) last = cur if weeks [ - 1 ] < last : weeks . append ( last ) tf . week_frames = [ tf . date2int ( x ) for x in weeks ] await cache . save_calendar ( \"week_frames\" , map ( tf . date2int , weeks )) months = [] last = trade_days [ 0 ] for cur in trade_days : if cur . day < last . day : months . append ( last ) last = cur months . append ( last ) tf . month_frames = [ tf . date2int ( x ) for x in months ] await cache . save_calendar ( \"month_frames\" , map ( tf . date2int , months )) logger . info ( \"trade_days is updated to %s \" , trade_days [ - 1 ])","title":"sync_calendar()"},{"location":"api/#omega.jobs.syncjobs.sync_security_list","text":"\u66f4\u65b0\u8bc1\u5238\u5217\u8868 \u6ce8\u610f\u8bc1\u5238\u5217\u8868\u5728AbstractQuotesServer\u53d6\u5f97\u65f6\u5c31\u5df2\u4fdd\u5b58\uff0c\u6b64\u5904\u53ea\u662f\u89e6\u53d1 Source code in omega/jobs/syncjobs.py async def sync_security_list (): \"\"\"\u66f4\u65b0\u8bc1\u5238\u5217\u8868 \u6ce8\u610f\u8bc1\u5238\u5217\u8868\u5728AbstractQuotesServer\u53d6\u5f97\u65f6\u5c31\u5df2\u4fdd\u5b58\uff0c\u6b64\u5904\u53ea\u662f\u89e6\u53d1 \"\"\" secs = await aq . get_security_list () logger . info ( \" %s secs are fetched and saved.\" , len ( secs ))","title":"sync_security_list()"},{"location":"api/#omega.jobs.syncjobs.trigger_bars_sync","text":"\u521d\u59cb\u5316bars_sync\u7684\u4efb\u52a1\uff0c\u53d1\u4fe1\u53f7\u7ed9\u5404quotes_fetcher\u8fdb\u7a0b\u4ee5\u542f\u52a8\u540c\u6b65\u3002 Parameters: Name Type Description Default frame_type FrameType \u8981\u540c\u6b65\u7684\u5e27\u7c7b\u578b required sync_params dict \u540c\u6b65\u53c2\u6570 { start: \u8d77\u59cb\u5e27 stop: \u622a\u6b62\u5e27 frame: \u5e27\u7c7b\u578b delay: \u5ef6\u8fdf\u542f\u52a8\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d cat: \u8bc1\u5238\u5206\u7c7b\uff0c\u5982stock, index\u7b49 delay: seconds for sync to wait. } see more @[omega.jobs.syncjobs.parse_sync_params][] None force \u5373\u4f7f\u5f53\u524d\u4e0d\u662f\u4ea4\u6613\u65e5\uff0c\u662f\u5426\u4e5f\u5f3a\u884c\u8fdb\u884c\u540c\u6b65\u3002 False Source code in omega/jobs/syncjobs.py async def trigger_bars_sync ( sync_params : dict = None , force = False ): \"\"\"\u521d\u59cb\u5316bars_sync\u7684\u4efb\u52a1\uff0c\u53d1\u4fe1\u53f7\u7ed9\u5404quotes_fetcher\u8fdb\u7a0b\u4ee5\u542f\u52a8\u540c\u6b65\u3002 Args: frame_type (FrameType): \u8981\u540c\u6b65\u7684\u5e27\u7c7b\u578b sync_params (dict): \u540c\u6b65\u53c2\u6570 ``` { start: \u8d77\u59cb\u5e27 stop: \u622a\u6b62\u5e27 frame: \u5e27\u7c7b\u578b delay: \u5ef6\u8fdf\u542f\u52a8\u65f6\u95f4\uff0c\u4ee5\u79d2\u4e3a\u5355\u4f4d cat: \u8bc1\u5238\u5206\u7c7b\uff0c\u5982stock, index\u7b49 delay: seconds for sync to wait. } ``` see more @[omega.jobs.syncjobs.parse_sync_params][] force: \u5373\u4f7f\u5f53\u524d\u4e0d\u662f\u4ea4\u6613\u65e5\uff0c\u662f\u5426\u4e5f\u5f3a\u884c\u8fdb\u884c\u540c\u6b65\u3002 Returns: \"\"\" if not force and not tf . is_trade_day ( arrow . now ()): return codes , frame_type , start , stop , delay = parse_sync_params ( ** sync_params ) key_scope = f \"jobs.bars_sync.scope. { frame_type . value } \" if len ( codes ) == 0 : logger . warning ( \"no securities are specified for sync %s \" , frame_type ) return fmt_str = \"sync from %s to %s in frame_type( %s ) for %s secs\" logger . info ( fmt_str , start , stop , frame_type , len ( codes )) # secs are stored into cache, so each fetcher can polling it pl = cache . sys . pipeline () pl . delete ( key_scope ) pl . lpush ( key_scope , * codes ) await pl . execute () await asyncio . sleep ( delay ) await _start_job_timer ( \"sync\" ) await emit . emit ( Events . OMEGA_DO_SYNC , { \"frame_type\" : frame_type , \"start\" : start , \"stop\" : stop } ) fmt_str = \"send trigger sync event to fetchers: from %s to %s in frame_type( %s ) for %s secs\" logger . info ( fmt_str , start , stop , frame_type , len ( codes ))","title":"trigger_bars_sync()"},{"location":"api/#omega.jobs.syncjobs.trigger_single_worker_sync","text":"\u542f\u52a8\u53ea\u9700\u8981\u5355\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u7684\u6570\u636e\u540c\u6b65\u4efb\u52a1 \u6bd4\u5982\u4ea4\u6613\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5982\u679c\u9700\u8981\u540c\u65f6\u542f\u52a8\u591a\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u6570\u636e\u540c\u6b65\u4efb\u52a1\uff0c\u5e94\u8be5\u901a\u8fc7 pyemit\u6765\u53d1\u9001\u5e7f\u64ad\u6d88\u606f\u3002 Parameters: Name Type Description Default _type str the type of data to be synced, either calendar or ecurity_list required Source code in omega/jobs/syncjobs.py async def trigger_single_worker_sync ( _type : str , params : dict = None ): \"\"\"\u542f\u52a8\u53ea\u9700\u8981\u5355\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u7684\u6570\u636e\u540c\u6b65\u4efb\u52a1 \u6bd4\u5982\u4ea4\u6613\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5982\u679c\u9700\u8981\u540c\u65f6\u542f\u52a8\u591a\u4e2aquotes fetcher\u8fdb\u7a0b\u6765\u5b8c\u6210\u6570\u636e\u540c\u6b65\u4efb\u52a1\uff0c\u5e94\u8be5\u901a\u8fc7 pyemit\u6765\u53d1\u9001\u5e7f\u64ad\u6d88\u606f\u3002 Args: _type: the type of data to be synced, either ``calendar`` or ``ecurity_list`` \"\"\" url = cfg . omega . urls . quotes_server if _type == \"calendar\" : url += \"/jobs/sync_calendar\" elif _type == \"security_list\" : url += \"/jobs/sync_security_list\" else : raise ValueError ( f \" { _type } is not supported sync type.\" ) async with aiohttp . ClientSession () as client : try : async with client . post ( url , data = params ) as resp : if resp . status != 200 : logger . warning ( \"failed to trigger %s sync\" , _type ) else : return await resp . json () except Exception as e : logger . exception ( e )","title":"trigger_single_worker_sync()"},{"location":"deployment/","text":"1. \u7cfb\u7edf\u8981\u6c42 \u00b6 1.1. \u786c\u4ef6\u6e05\u5355 \u00b6 1.1.1. \u5185\u5b58 \u00b6 Zillionare-Omega(\u4ee5\u4e0b\u7b80\u79f0Omega)\u5c06\u884c\u60c5\u6570\u636e\u4fdd\u5b58\u5728\u5185\u5b58\u6570\u636e\u5e93\u4e2d(redis-server)\u3002\u6839\u636e\u5b9e\u6d4b\u7ed3\u679c\uff0c\u6bcf\u5b58\u50a81000\u6761A\u80a1\u5168\u5e02\u573a\u65e5\u7ebf\u6570\u636e\uff08\u53ea\u5305\u62ec\u80a1\u7968\u6570\u636e\uff0c\u63095000\u652f\u8ba1\uff09\uff0c\u5927\u6982\u9700\u89810.75GB\u7684\u5185\u5b58\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b58\u50a8\u4e864\u5e74\u591a\u7684A\u80a1\u5168\u5e02\u573a\u6570\u636e\u3002 \u4ee5\u4e0b\u662f\u63a8\u7b97\u7684\u7269\u7406\u5185\u5b58\u9700\u6c42\u8868\uff1a \u884c\u60c5\u6570\u636e \u8bb0\u5f55\u6570\uff08\u6bcf\u54c1\u79cd\uff09 \u65f6\u957f\uff08\u5e74\uff09 \u7269\u7406\u5185\u5b58\uff08GB) \u65e5\u7ebf 1000 4 0.75 \u6708\u7ebf 120 10 0.09 \u5e74\u7ebf 10 10 0.0075 \u5c0f\u65f6\u7ebf 1000 1 0.75 30\u5206\u949f\u7ebf 1000 0.5 0.75 15\u5206\u949f\u7ebf 1000 0.25 0.75 5\u5206\u949f\u7ebf 960 0.08 0.72 1\u5206\u949f\u7ebf 960 0.016 0.72 \u5408\u8ba1 3.7875 \u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u52a8\u91cf\u7b56\u7565\u7684\u7814\u7a76\u800c\u8a00\uff0c\u6bcf\u652f\u54c1\u79cd\u67091000\u6761\u8bb0\u5f55\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u57fa\u672c\u4e0a\u662f\u8db3\u591f\u7684\u3002\u66f4\u591a\u7684\u884c\u60c5\u6570\u636e\uff0c\u53ef\u80fd\u4e5f\u4e00\u4e9bpattern\u7684\u81ea\u91cd\u590d\u800c\u5df2\u3002\u5f53\u7136Omega\u4e5f\u5141\u8bb8\u60a8\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u548c\u786c\u4ef6\u73af\u5883\uff0c\u6765\u9009\u62e9\u4fdd\u5b58\u54ea\u4e9b\u8bc1\u5238\u54c1\u79cd\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u8bc1\u5238\u54c1\u79cd\u4fdd\u5b58\u591a\u957f\u7684\u6570\u636e\uff08\u5305\u62ec\u5468\u671f\uff09\u3002 \u5982\u679c\u60a8\u7684\u5b66\u4e60\u6a21\u578b\u9700\u8981\u7ed3\u5408\u57fa\u672c\u9762\uff08\u8d22\u52a1\u6570\u636e\uff09\uff0c\u4ece\u800c\u53ef\u80fd\u9700\u8981\u76f8\u5e94\u66f4\u957f\u5468\u671f\u7684\u884c\u60c5\u6570\u636e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u60a8\u53ea\u4fdd\u5b58\u65e5\u7ebf\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684\u6570\u636e\u3002\u516c\u53f8\u57fa\u672c\u9762\u7684\u6570\u636e\uff0c\u5bf9\u65e5\u7ebf\u4ee5\u4e0b\u7ea7\u522b\u7684\u80a1\u4ef7\u6ce2\u52a8\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\u4fdd\u5b58\u5168\u5e02\u573a10\u5e74\u7684\u65e5\u7ebf\u6570\u636e\uff0c\u4e5f\u53ea\u89812GB\u5de6\u53f3\u7684\u5185\u5b58\u3002 Omega\u793e\u533a\u7248\u88ab\u8bbe\u8ba1\u4e3a\u652f\u6301\u4ece\u4e2a\u4eba\u5230\u5c0f\u578b\u56e2\u961f\u7684AI\u91cf\u5316\u7814\u7a76\u3002\u5982\u679c\u60a8\u9700\u8981\u4fdd\u5b58tick\u7ea7\u7684\u6570\u636e\uff0c\u6216\u8005\u8f83\u957f\u65f6\u95f4\u8303\u56f4\u7684\u5206\u949f\u7ea7\u522b\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u4f01\u4e1a\u7248\u3002 CPU \u00b6 Omega\u88ab\u8bbe\u8ba1\u4e3a\u80fd\u8fd0\u884c\u5728\u4ece\u53f0\u5f0f\u673a\u5230\u591a\u53f0\u670d\u52a1\u5668\u96c6\u7fa4\u4e0a\u3002\u7531\u4e8ePython\u672c\u8eab\u7684\u9650\u5236\uff0cPython\u7a0b\u5e8f\u4e00\u822c\u65e0\u6cd5\u6709\u6548\u5730\u4f7f\u7528\u673a\u5668\u7684\u591a\u4e2aCPU\uff08\u5185\u6838\uff09\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e00\u9650\u5236\uff0cOmega\u8bbe\u8ba1\u6210\u5f02\u6b65 \u591a\u8fdb\u7a0b \u534f\u4f5c\u6a21\u5f0f\uff0c\u4ece\u800c\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u60a8\u673a\u5668\u7684CPU\u3002\u56e0\u6b64\uff0c\u5728\u60a8\u914d\u7f6e\u673a\u5668\u65f6\uff0cCPU\u4ecd\u7136\u662f\u8d8a\u591a\u8d8a\u597d\u3002 \u786c\u76d8 \u00b6 Omega\u5bf9\u786c\u76d8\u7684\u6027\u80fd\u548c\u5bb9\u91cf\u51e0\u4e4e\u6ca1\u6709\u8981\u6c42\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5728\u5b89\u88c5Omega\u4e4b\u524d\uff0c\u7cfb\u7edf\u6700\u597d\u81f3\u5c11\u8fd8\u670950GB\u78c1\u76d8\u7a7a\u95f4\u3002 1.1.2. \u7f51\u7edc \u00b6 \u5982\u679c\u60a8\u4f7f\u7528\u5206\u5e03\u5f0f\u90e8\u7f72\uff0c\u5efa\u8baeZillionare\u5404\u670d\u52a1\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u5343\u5146\u5c40\u57df\u7f51\u5185\u3002 1.2. \u8f6f\u4ef6\u6e05\u5355 \u00b6 Note Omega\u4e0d\u9002\u5408\u90e8\u7f72\u5728Windows\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002Omega\u7684\u5404\u4e2a\u7248\u672c\u5747\u53ea\u5728Ubuntu 18\uff0c Ubuntu 20\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002\u56e0\u6b64\uff0c\u5373\u4f7fOmega\u80fd\u5728Windows\u4e0a\u8fd0\u884c\u8d77\u6765\uff0c\u6211\u4eec\u4e5f\u4e0d\u63a8\u8350\u60a8\u8fd9\u6837\u4f7f\u7528\u3002 \u5982\u679c\u60a8\u662f\u4e2a\u4eba\u7814\u7a76\u4f7f\u7528\uff0c\u53ea\u6709Windows\u673a\u5668\uff0c\u5efa\u8bae\u60a8\u542f\u7528Windows\u7684WSL\u5e73\u53f0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u540c\u65f6\u4f7f\u7528Ubuntu\u548cWindows\u4e86\u3002\u5173\u4e8e\u5982\u4f55\u5728Windows\u4e0a\u542f\u7528WSL\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 \u5f00\u53d1\u73af\u5883\u548cIDE Omega\u4f7f\u7528Python 3.8\u5f00\u53d1\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u90e8\u7f72\u5728\u4efb\u4f55\u7c7bUnix\u7684\u673a\u5668\u4e0a\u3002\u4f46\u53ea\u5728Ubuntu\u4e0a\u7ecf\u8fc7\u4e25\u683c\u7684\u6d4b\u8bd5\u3002\u4ee5\u4e0b\u4e3a\u8f6f\u4ef6\u73af\u5883\u7c7b\u6e05\u5355\uff1a \u8f6f\u4ef6\u7c7b\u522b \u8f6f\u4ef6 \u7248\u672c \u8bf4\u660e \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18/20 \u8fd0\u884c\u65f6 Python >=3.8 \u5185\u5b58\u6570\u636e\u5e93 Redis >=4.0 \u6570\u636e\u5e93 Postgres >=10 \u9009\u88c5 \u8d1f\u8f7d\u5747\u8861 Nginx \u9009\u88c5 \u884c\u60c5\u670d\u52a1 jqdatasdk >=1.8 \u7f16\u8bd1\u5de5\u5177 gcc latest jqdatasdk\u4f7f\u7528\u4e86thrift2\uff0c\u9700\u8981gcc\u8fdb\u884c\u7f16\u8bd1 \u5982\u679c\u60a8\u7684\u6a21\u578b\u4e2d\u4e0d\u6253\u7b97\u4f7f\u7528\u8d22\u52a1\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u5728\u52a8\u91cf\u7b56\u7565\u7814\u7a76\u4e2d\uff0c\u60a8\u4e5f\u53ef\u80fd\u4f7f\u7528\u8d22\u52a1\u6570\u636e\u3002\u56e0\u4e3a\u6d41\u901a\u80a1\u672c\u5c5e\u4e8e\u8d22\u52a1\u6570\u636e\uff0c\u6240\u4ee5\u5728\u6362\u624b\u7387\u7684\u8ba1\u7b97\u4e2d\uff0c\u8fd8\u5fc5\u987b\u4f7f\u7528\u8d22\u52a1\u6570\u636e\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u5982\u679c\u60a8\u5bf9\u6027\u80fd\u6ca1\u6709\u592a\u9ad8\u8981\u6c42\u7684\u8bdd\uff0c\u4ecd\u7136\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u6570\u636e\u5e93\u3002\u5f53\u60a8\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u8d22\u52a1\u6570\u636e\u65f6\uff0cOmega\u4f1a\u4ece\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u5668\u83b7\u53d6\u76f8\u5173\u6570\u636e\u7528\u4e8e\u8ba1\u7b97\uff08\u4f46\u8fd9\u4e9b\u6570\u636e\u4e0d\u4f1a\u5728\u672c\u5730\u4fdd\u5b58\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u6027\u80fd\u7684\u5f3a\u5f31\uff0c\u53ef\u80fd\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e0a\u6e38\u884c\u60c5\u670d\u52a1\u5668\u7684\u6570\u636e\u670d\u52a1\u80fd\u529b\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u5c3d\u7ba1Omega\u88ab\u8bbe\u8ba1\u6210\u652f\u6301\u5206\u5e03\u5f0f\u90e8\u7f72\uff08\u5373\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u76f8\u4e92\u534f\u4f5c\uff09\uff0c\u4f46\u81ea\u5df1\u53ea\u5b9e\u73b0\u4e86\u7b80\u5355\u7684\u4efb\u52a1\u7ba1\u7406\u3002\u8d1f\u8f7d\u5747\u8861\u7684\u5b9e\u73b0\uff0c\u76ee\u524d\u662f\u7531Nginx\u8fd9\u6837\u7684\u4ee3\u7406\u5728HTTP\u5c42\u5b8c\u6210\u7684\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6765\u9009\u62e9\u662f\u5426\u8fd9\u6837\u8fdb\u884c\u90e8\u7f72\u3002 2. \u63a8\u8350\u7684\u90e8\u7f72\u6a21\u5f0f \u00b6 Omega\u7684\u90e8\u7f72\u5168\u666f\u56fe\u5982\u4e0b\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u8fdb\u884c\u5b9a\u5236\u3002 2.1. \u4e2a\u4eba\u7814\u7a76 \u00b6 \u5bf9\u4e8e\u4e2a\u4eba\u7814\u7a76\uff0c\u6211\u4eec\u63a8\u8350\u53ef\u4ee5\u5728\u5355\u53f0\u7b14\u8bb0\u672c\u3001\u53f0\u5f0f\u673a\u4e0a\u8fdb\u884c\u90e8\u7f72\u3002\u60a8\u53ef\u4ee5\u5c06Omega, redis\u548cPostgres\u5b89\u88c5\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u3002\u5982\u679c\u60a8\u53ea\u505a\u52a8\u91cf\u7814\u7a76\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u3002 \u5982\u679c\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u662fWindows\u7684\u8bdd\uff0c\u5efa\u8bae\u60a8\u6309\u7167 \u5f00\u53d1\u73af\u5883\u548cIDE \u6765\u5b89\u88c5WSL\uff0c\u4ee5\u83b7\u5f97Omega\u5b89\u88c5\u9700\u8981\u7684Ubuntu\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u3002 \u5982\u679c\u60a8\u4f7f\u7528Mac\u673a\u5668\u7684\u8bdd\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5Omega\u3002 2.2. \u56e2\u961f\u4f7f\u7528 \u00b6 \u5982\u679c\u60a8\u6709\u4e00\u4e2a\u56e2\u961f\u9700\u8981\u4f7f\u7528Omega\u63d0\u4f9b\u7684\u884c\u60c5\u670d\u52a1\uff0c\u975e\u5e38\u68d2\uff01Omega\u5b8c\u5168\u9002\u5408\u8fd9\u79cd\u573a\u666f\u4e0b\u7684\u5e94\u7528\u3002\u5efa\u8bae\u60a8\u6839\u636e\u56e2\u961f\u4f7f\u7528\u6570\u636e\u7684\u9891\u5ea6\u3001\u91cf\u7ea7\u548c\u4eba\u6570\uff0c\u6765\u51b3\u5b9a\u9700\u8981\u591a\u5c11\u53f0\u673a\u5668\u5b89\u88c5Omega\uff0c\u4ee5\u53ca\u5b89\u88c5Nginx\u4f5c\u4e3aOmega\u7684\u524d\u7f6e\u4ee3\u7406\u3002 3. \u5b89\u88c5\u6b65\u9aa4 \u00b6 3.1. \u521b\u5efaPython\u865a\u62df\u73af\u5883 \u00b6 \u4e3a\u907f\u514d\u4e0e\u5176\u5b83Python\u7a0b\u5e8f\u4ea7\u751f\u51b2\u7a81\uff0c\u63a8\u8350\u60a8\u4e3aOmega\u521b\u5efa\u4e13\u5c5e\u7684\u8fd0\u884c\u73af\u5883\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 conda \u6216\u8005venv\u6765\u521b\u5efa\u4e13\u5c5e\u8fd0\u884c\u73af\u5883\u3002\u8fd9\u91cc\u4ee5conda\u4e3a\u4f8b\uff1a \u4ece \u8fd9\u91cc \u4e0b\u8f7dminiconda\u5230\u672c\u5730\uff0c\u5e76\u8fd0\u884c\u5b89\u88c5\u3002\u4e0b\u8f7d\u9875\u9762\u63d0\u4f9b\u4e86\u591a\u4e2a\u7248\u672c\uff0c\u8bf7\u4e0b\u8f7dPython3.8\u7684Linux installer\u7248\u672c\uff08\u5047\u5b9a\u60a8\u4f7f\u7528Ubuntu\u3002\u5982\u679c\u4f7f\u7528windows\uff0c\u8bf7\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u5728Windows\u4e0a\u542f\u7528WSL\u548cUbuntu\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u4ee5\u521b\u5efaOmega\u8fd0\u884c\u73af\u5883: 1 2 conda create -n omega python=3.8 conda activate omega 3.2. \u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272 \u00b6 Omega\u4f7f\u7528cfg4py\u6765\u89e3\u6790\u548c\u7ba1\u7406\u914d\u7f6e\u3002\u4f5c\u4e3a\u6700\u4f73\u5b9e\u8df5\uff0ccfg4py\u8981\u6c42\u60a8\u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272\uff0c\u4ee5\u4fbf\u4e3a\u60a8\u52a0\u8f7d\u6b63\u786e\u7684\u914d\u7f6e\u3002\u5728\u5f00\u59cb\u5b89\u88c5\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272\u3002 \u60a8\u53ef\u4ee5\u5728/etc/profile\uff0c\u6216\u8005~/.bashrc\u4e2d\u52a0\u4e0a\u8fd9\u6837\u4e00\u884c\uff1a 1 2 # \u53ef\u9009\u9879\u5305\u62ec PRODUCTION, TEST, DEV export __cfg4py_server_role__ = PRODUCTION \u5982\u679c\u60a8\u53ea\u662f\u666e\u901a\u7528\u6237\uff0c\u90a3\u4e48\u4e00\u822c\u6765\u8bf4\uff0c\u5e94\u8be5\u8bbe\u7f6e\u4e3aPRODUCTION\u3002 3.3. \u5b89\u88c5\u7b2c\u4e09\u65b9\u8f6f\u4ef6 \u00b6 \u8bf7\u53c2\u7167Redis\u548cPostgres\u7684\u5b89\u88c5\u6307\u5357\uff0c\u5206\u522b\u5b8c\u6210Redis\u548cPostgres\u7684\u5b89\u88c5\u3002 Note \u5982\u679c\u60a8\u7684\u673a\u5668\u4e0a\u5df2\u7ecf\u6709\u5176\u5b83\u7a0b\u5e8f\u5728\u4f7f\u7528Redis\u670d\u52a1\uff0c\u4e3a\u907f\u514d\u51b2\u7a81\uff0c\u8bf7\u5728\u672c\u673a\u4e0a\u542f\u52a8\u7b2c\u4e8c\u4e2aRedis\u5b9e\u4f8b\uff0c \u72ec\u7acb\u4e3aOmega\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u4e2a\u5b9e\u4f8b\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u3002 \u60a8\u53ef\u4ee5\u4e3aOmega\u5b89\u88c5\u4e00\u4e2a\u5168\u65b0\u7684Postgres\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u4e5f\u91cd\u590d\u4f7f\u7528\u73b0\u6709\u7684Postgres\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c \u53ea\u8981\u4e3aOmega\u51c6\u5907\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u5e93\u5373\u53ef\u3002Omega\u5c06\u5728\u8be5\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u7cfb\u5217\u8868\uff08table)\u3002 \u5b89\u88c5\u5b8c\u6210Postgres\u540e\uff0c\u8bf7\u4e3aZillionare\u521b\u5efa\u6570\u636e\u5e93\uff0c\u63a8\u8350\u4f7f\u7528zillionare\u4f5c\u4e3a\u6570\u636e\u5e93\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 # \u4f7f\u7528psql\uff0c\u672c\u5730\u4ee5postgres\u8d26\u6237\u767b\u5f55\u8fdb\u6765 sudo su - Postgres psql # \u8fdb\u5165\u6570\u636e\u5e93\u4ee5\u540e create user zillionare with password 'your_secret' ; create database zillionare ; grant all privileges on database 'zillionare' to zillionare ; \u8bb0\u4e0b\u8fd9\u91cc\u4f7f\u7528\u7684\u7528\u6237\u540d\u548c\u53e3\u4ee4\uff0c\u5728\u5b89\u88c5Omega\u65f6\u9700\u8981\u4f7f\u7528\u3002 3.4. \u5b89\u88c5Omega \u00b6 3.4.1. \u4ecepip\u5b89\u88c5Omega \u00b6 \u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u4ecepip\u5b89\u88c5zillionare-omega(\u4ee5\u4e0b\u79f0\u4e3aOmega): 1 $ pip install zillionare-omega 3.4.2. \u4ece\u6e90\u4ee3\u7801\u5b89\u88c5Omega \u00b6 Omega\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u4ece github \u4e0b\u8f7d\uff1a \u4f60\u53ef\u4ee5clone\u4ee3\u7801\u5e93\uff1a 1 $ git clone git://github.com/zillionare/omega \u6216\u8005\u4e0b\u8f7d \u6e90\u7801\u5305 : 1 $ curl -OJL https://github.com/zillionare/omega/tarball/master \u4e00\u65e6\u6e90\u4ee3\u7801\u590d\u5236\u5230\u672c\u5730\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\uff1a 1 $ python setup.py install \u9664\u975e\u60a8\u662fOmega\u7684\u534f\u540c\u5f00\u53d1\u8005\uff0c\u6216\u8005\u9047\u5230\u7d27\u6025\u4fee\u590d\u7684bug\uff0c\u5426\u5219\u90fd\u5e94\u8be5\u901a\u8fc7 pip \u7684\u65b9\u5f0f\u6765\u5b89\u88c5\u7a33\u5b9a\u7248\uff0c\u800c\u4e0d\u5e94\u8be5\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5\u3002 3.5. \u521d\u59cb\u5316 \u00b6 \u7531\u4e8epip\u6267\u884c\u5b89\u88c5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\uff08\u8fd9\u662fwheel\u683c\u5f0f\u5305\u7684\u7f3a\u9677\uff09\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u901a\u8fc7 omega setup \u547d\u4ee4\u6765\u5b8c\u6210\uff1a \u521d\u59cb\u5316\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u4efb\u52a1\uff1a \u68c0\u6d4b\u5b89\u88c5\u73af\u5883\u3002 \u914d\u7f6e\u884c\u60c5\u670d\u52a1\u5668 \u914d\u7f6eRedis\u6570\u636e\u5e93 \u914d\u7f6ePostgres\u6570\u636e\u5e93 \u5176\u5b83\u8bbe\u7f6e\uff08\u5982\u65e5\u5fd7\u7b49\uff09 \u5bfc\u5165\u5386\u53f2K\u7ebf\u6570\u636e 3.5.1. \u521d\u59cb\u5316\u524d\u7684\u68c0\u67e5 \u00b6 \u73b0\u5728\uff0c\u8bf7\u786e\u8ba4\u60a8\u5df2\u7ecf\u51c6\u5907\u597d\uff1a \u8bbe\u7f6e\u597d\u4e86\u670d\u52a1\u5668\u89d2\u8272 \u5df2\u5207\u6362\u81f3\u4e13\u95e8\u4e3aOmega\u521b\u5efa\u7684\u865a\u62df\u8fd0\u884c\u73af\u5883 Redis\u670d\u52a1\u3001Postgres\u670d\u52a1\u5df2\u5b89\u88c5\u597d\uff0c\u5e76\u4e14\u90fd\u5df2\u7ecf\u542f\u52a8\u3002 zillionare\u6570\u636e\u5e93\u5df2\u7ecf\u521b\u5efa\uff0c\u5e76\u4e14\u5df2\u5f97\u5230\u6570\u636e\u5e93\u8d26\u6237\u3002 \u5df2\u5b89\u88c5\u4e86Omega \u73b0\u5728\uff0c\u60a8\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u5165\u5230\u542f\u52a8Omega\u524d\u7684\u6700\u540e\u4e00\u6b65\u4e86\u3002\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u8fdb\u884c\u521d\u59cb\u5316\uff1a 1 omega setup 3.5.2. \u68c0\u6d4b\u5b89\u88c5\u73af\u5883 \u00b6 \u4f5c\u4e3a\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff0cOmega\u63a8\u8350\u60a8\u4e3aOmega\u521b\u5efa\u4e13\u5c5e\u865a\u62df\u8fd0\u884c\u73af\u5883\uff0c\u5e76\u59cb\u7ec8\u5728\u8be5\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884cOmega\u3002\u5b89\u88c5\u7a0b\u5e8f\u4e5f\u4f1a\u68c0\u6d4b\u5f53\u524d\u662f\u5426\u5728\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884c\u3002 Omega\u4f7f\u7528 cfg4py_ \u6765\u7ba1\u7406\u914d\u7f6e\u3002Cfg4py\u8981\u6c42\u60a8\u4e3a\u90e8\u7f72\u673a\u5668\u8bbe\u7f6e\u573a\u666f\uff08\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u751f\u4ea7\u73af\u5883\uff09\uff0c\u4ee5\u4fbf\u6839\u636e\u5bf9\u5e94\u7684\u573a\u666f\u6765\u5e94\u7528\u914d\u7f6e\u3002\u56e0\u6b64\uff0c\u5728Omega\u5b89\u88c5\u65f6\uff0c\u4e5f\u4f1a\u68c0\u6d4b\u5f53\u524d\u673a\u5668\u662f\u5426\u6b63\u786e\u5730\u8bbe\u7f6e\u4e86\u573a\u666f\u3002 3.5.3. \u914d\u7f6e\u884c\u60c5\u670d\u52a1\u5668 \u00b6 Omega\u901a\u8fc7\u63d2\u4ef6\u6765\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u884c\u60c5\u6570\u636e\u3002\u5f53\u524d\u652f\u6301\u7684\u6570\u636e\u63d0\u4f9b\u6e90\u662f\u805a\u5bbd(JoinQuant)\u3002 \u5728\u4f7f\u7528\u805a\u5bbd\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5728 \u805a\u5bbd\u5b98\u7f51 \u4e0a\u7533\u8bf7 jqdatasdk \u7684\u4f7f\u7528\u6743\u9650\u3002\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u9700\u8981\u60a8\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f\u3002\u6bcf\u4e2a\u805a\u5bbd\u8d26\u53f7\u6700\u591a\u5141\u8bb83\u4e2a\u5e76\u53d1\u8fde\u63a5\u3002\u5728\u5b89\u88c5\u65f6\uff0cOmega\u9700\u8981\u60a8\u4e3a\u6bcf\u4e2a\u8d26\u53f7\u51b3\u5b9a\u540c\u65f6\u5141\u8bb8\u7684\u6700\u5927\u4f1a\u8bdd\uff08\u8fde\u63a5\uff09\u6570\u3002 Omega\u652f\u6301\u591a\u4e2a\u6570\u636e\u6e90\u540c\u65f6\u5de5\u4f5c\uff08\u4f46\u5f53\u524d\u53ea\u63d0\u4f9b\u4e86\u5bf9\u805a\u5bbd\u7684\u63a5\u53e3\u9002\u914d\uff09\uff0c\u5e76\u4e14\u652f\u6301\u5728\u540c\u4e00\u6570\u636e\u6e90\u4e0b\uff0c\u914d\u7f6e\u591a\u4e2a\u8d26\u53f7\uff0c\u591a\u4e2a\u4f1a\u8bdd\uff08\u5982\u679c\u60a8\u8fd9\u6837\u505a\uff0c\u8bf7\u786e\u4fdd\u5f97\u5230\u4e86\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u8bb8\u53ef\uff09\uff0c\u4ece\u800c\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5b9e\u65f6\u884c\u60c5\u3002\u6240\u4ee5\u5728\u4e0a\u9762\u7684\u5b89\u88c5\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u63d0\u793a\u60a8\u8f93\u5165\u5e76\u53d1\u4f1a\u8bdd\u6570\uff0c\u4ee5\u53ca\u662f\u5426\u914d\u7f6e\u591a\u4e2a\u8d26\u53f7\u3002 Tip Omega\u901a\u8fc7HTTP\u5fae\u670d\u52a1\u5411Zillionare\u7684\u5176\u5b83\u7ec4\u4ef6\u63d0\u4f9b\u884c\u60c5\u6570\u636e\uff0c\u56e0\u6b64Omega\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u884c\u60c5\u670d\u52a1\u5668\u3002\u9ed8\u8ba4\u5730\uff0cOmega\u7684\u670d\u52a1\u7aef\u53e3\u4ece3181\u5f00\u59cb\uff0c\u5982\u679c\u60a8\u6709\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u6216\u8005\u591a\u4e2a\u8d26\u53f7\uff0c\u90a3\u4e48Omega\u5c06\u4e3a\u4e0d\u540c\u7684\u6570\u636e\u6e90\u3001\u6216\u8005\u540c\u4e00\u6570\u636e\u6e90\u7684\u4e0d\u540c\u8d26\u53f7\uff0c\u542f\u7528\u65b0\u7684\u7aef\u53e3\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u60a8\u62e5\u6709\u4e24\u4e2ajqdatasdk\u7684\u8d26\u53f7\uff0c\u5e76\u914d\u7f6e\u5728Omega\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\uff0cOmega\u5c06\u542f\u52a8\u4e24\u4e2aHTTP\u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u76d1\u542c\u57283181\u7aef\u53e3\uff0c\u53e6\u4e00\u4e2a\u76d1\u542c\u57283182\u7aef\u53e3\u3002 \u5b89\u88c5\u7a0b\u5e8f\u6ca1\u6709\u63d0\u4f9b\u7aef\u53e3\u5b9a\u5236\u7684\u529f\u80fd\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u627e\u5230\u5b83\u4eec\u5e76\u8fdb\u884c\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 omega : urls : quotes_server : http://localhost:3181 quotes_fetchers : - impl : jqadaptor # there must be a create_instance method in this module workers : - account : ${jq_account} password : ${jq_password} port : 3181 sessions : 2 \u8fd9\u91cc\u6709\u51e0\u70b9\u9700\u8981\u6ce8\u610f\uff1a Omega\u4f7f\u7528Sanic\u4f5c\u4e3aHTTP\u670d\u52a1\u5668\u3002\u7531\u4e8eSanic\u7684\u539f\u56e0\uff0c\u5982\u679c\u60a8\u9700\u8981Omega\u4e0e\u4e0a\u6e38\u670d\u52a1\u5668\u540c\u65f6\u5efa\u7acb3\u4e2a\u5e76\u53d1\u4f1a\u8bdd\uff0c\u90a3\u4e48\u4f1a\u8bdd\u8bbe\u7f6e\u5e94\u8be5\u8bbe\u7f6e\u4e3a2\uff0c\u800c\u4e0d\u662f3\uff0c\u5373\u60a8\u5f97\u5230\u7684\u4f1a\u8bdd\u6570\uff0c\u603b\u4f1a\u6bd4\u8bbe\u7f6e\u503c\u59271\u3002 \u5728\u4e0a\u9762\u7684\u914d\u7f6e\u793a\u4f8b\u4e2d\uff0c\u51fa\u73b0\u4e86${jq_account}\u8fd9\u6837\u7684\u5b8f\uff0c\u8fd9\u662f cfg4py \u652f\u6301\u7684\u529f\u80fd\uff0c\u5982\u679c\u60a8\u8bbe\u7f6e\u4e86\u540c\u540d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5219 cfg4py \u5c06\u4f1a\u5c06\u5176\u66ff\u6362\u6210\u4e3a\u73af\u5883\u53d8\u91cf\u786e\u5b9a\u7684\u503c\u3002\u5efa\u8baeOmega\u7684\u534f\u4f5c\u5f00\u53d1\u8005\u59cb\u7ec8\u4f7f\u7528\u8fd9\u4e00\u8bed\u6cd5\uff0c\u4ee5\u907f\u514d\u8bef\u5c06\u8d26\u53f7\u548c\u53e3\u4ee4\u516c\u5f00\u7684\u4e92\u8054\u7f51\u4e0a\u3002 Omega\u4f5c\u4e3a\u672c\u5730\u884c\u60c5\u670d\u52a1\u5668\uff0c\u5176\u5b83\u7ec4\u4ef6\u5728\u8bbf\u95ee\u5b83\u65f6\uff0c\u9700\u8981\u5f97\u5230\u670d\u52a1\u5730\u5740\u3002\u5b89\u88c5\u7a0b\u5e8f\u6ca1\u6709\u63d0\u4f9b\u914d\u7f6e\u9879\uff0c\u9ed8\u8ba4\u5730\uff0c\u5b83\u88ab\u914d\u7f6e\u5728 http://localhost:3181 \u4e0a\uff0c\u8fd9\u4e2a\u914d\u7f6e\u662f\u4f9b\u72ec\u7acb\u7814\u7a76\u8005\u4f7f\u7528\u7684\uff0c\u4f46\u65e0\u6cd5\u4f7f\u7528\u591a\u8d26\u53f7\u3001\u591a\u6570\u636e\u6e90\u529f\u80fd\uff0c\u4e5f\u6ca1\u6709\u8d1f\u8f7d\u5747\u8861\u529f\u80fd\u3002\u4e3a\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0c\u60a8\u9700\u8981\u81ea\u884c\u5b89\u88c5nginx\u505a\u4ee3\u7406\uff0c\u5e76\u5c06nginx\u7684\u4ee3\u7406\u5730\u5740\u914d\u7f6e\u5728\u4e0b\u9762\u7684\u914d\u7f6e\u5f53\u4e2d\uff1a 1 2 3 omega: urls: quotes_fetchers: http://your_nginx_address \u8fd9\u4e9b\u914d\u7f6e\u770b\u4e0a\u53bb\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u60a8\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5b8c\u5168\u6309\u9ed8\u8ba4\u8bbe\u7f6e\u6765\u4f7f\u7528\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u6b65--\u5982\u679c\u60a8\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u4e86\u805a\u5bbd\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u7684\u8bdd\u3002 3.5.4. \u914d\u7f6eRedis\u670d\u52a1\u5668 \u00b6 \u884c\u60c5\u6570\u636e\u90fd\u5b58\u653e\u5728Redis\u6570\u636e\u5e93\u91cc\u3002\u60a8\u9700\u8981\u4e8b\u5148\u5b89\u88c5\u597dRedis\u670d\u52a1\u5668\uff0c\u5e76\u544a\u8bc9Omega\u5982\u4f55\u8fde\u63a5\uff1a 3.5.5. \u914d\u7f6ePostgres\u6570\u636e\u5e93 \u00b6 \u5982\u679c\u60a8\u6025\u4e8e\u5f00\u59cb\u4f7f\u7528Omega,\u60a8\u53ef\u4ee5\u7565\u8fc7Postgres\u7684\u5b89\u88c5\u548c\u914d\u7f6e\u3002\u4f46\u662f\u914d\u7f6e\u6570\u636e\u5e93\u5c06\u4f7f\u5f97\u60a8\u8bbf\u95ee\u8d22\u52a1\u6570\u636e\u65f6\uff0c\u80fd\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u56e0\u4e3a\u5982\u679c\u60a8\u6ca1\u6709\u914d\u7f6ePostgres\u6570\u636e\u5e93\u7684\u8bdd\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u5c06\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u53bb\u5b9e\u65f6\u83b7\u53d6\u3002 3.5.6. \u5bfc\u5165\u5386\u53f2\u884c\u60c5\u6570\u636e \u00b6 \u6211\u4eec\u63d0\u4f9b\u4e86\u4ece2015\u5e74\u4ee5\u676530\u5206\u949f\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684A\u80a1\u5386\u53f2\u884c\u60c5\u6570\u636e\uff08\u4e0d\u542b\u6307\u6570\uff09\uff0c\u5e76\u4e14\u5728\u6bcf\u4e2a\u6708\u7ed3\u675f\u540e\u66f4\u65b0\u4e0a\u4e00\u4e2a\u6708\u7684\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u63d0\u793a\u9009\u62e9\u5bfc\u5165\u8fd9\u4e9b\u6570\u636e\u3002 \u5b89\u88c5\u5411\u5bfc\u5c06\u63d0\u793a\u60a8\u8f93\u5165\u5bfc\u5165\u591a\u5c11\u4e2a\u6708\u7684\u6570\u636e\u3002\u6570\u636e\u662f\u4ece\u670d\u52a1\u5668\u4e0a\u6700\u65b0\u7684\u6570\u636e\uff0c\u6309\u6708\u5f80\u524d\u8ba1\u7b97\u7684\u3002\u5982\u679c\u5f53\u524d\u662f2021\u5e743\u6708\uff0c\u5219\u670d\u52a1\u5668\u4e0a\u5b58\u57282015\u5e741\u6708\u52302021\u5e742\u6708\u7684\u5168\u90e8\u6570\u636e\u3002\u5982\u679c\u60a8\u9009\u62e9\u5bfc\u51652\u4e2a\u6708\u7684\u6570\u636e\uff0c\u5219\u5c06\u4e3a\u60a8\u5bfc\u5165\u4ece2021\u5e741\u6708\u52302021\u5e742\u6708\u7684\u6240\u6709\u6570\u636e\u3002\u5176\u5b83\u6570\u636e\uff0c\u60a8\u5c06\u901a\u8fc7\u6b63\u5e38\u7684\u540c\u6b65\u6765\u83b7\u5f97\u3002 \u6700\u540e\uff0c\u5b89\u88c5\u5168\u90e8\u7ed3\u675f\uff0cOmega\u5c06\u4e3a\u60a8\u542f\u52a8\u670d\u52a1\uff0c\u5e76\u663e\u793a\u670d\u52a1\u72b6\u6001\uff1a","title":"\u5b89\u88c5"},{"location":"deployment/#1-\u7cfb\u7edf\u8981\u6c42","text":"","title":"1. \u7cfb\u7edf\u8981\u6c42"},{"location":"deployment/#11-\u786c\u4ef6\u6e05\u5355","text":"","title":"1.1. \u786c\u4ef6\u6e05\u5355"},{"location":"deployment/#111-\u5185\u5b58","text":"Zillionare-Omega(\u4ee5\u4e0b\u7b80\u79f0Omega)\u5c06\u884c\u60c5\u6570\u636e\u4fdd\u5b58\u5728\u5185\u5b58\u6570\u636e\u5e93\u4e2d(redis-server)\u3002\u6839\u636e\u5b9e\u6d4b\u7ed3\u679c\uff0c\u6bcf\u5b58\u50a81000\u6761A\u80a1\u5168\u5e02\u573a\u65e5\u7ebf\u6570\u636e\uff08\u53ea\u5305\u62ec\u80a1\u7968\u6570\u636e\uff0c\u63095000\u652f\u8ba1\uff09\uff0c\u5927\u6982\u9700\u89810.75GB\u7684\u5185\u5b58\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b58\u50a8\u4e864\u5e74\u591a\u7684A\u80a1\u5168\u5e02\u573a\u6570\u636e\u3002 \u4ee5\u4e0b\u662f\u63a8\u7b97\u7684\u7269\u7406\u5185\u5b58\u9700\u6c42\u8868\uff1a \u884c\u60c5\u6570\u636e \u8bb0\u5f55\u6570\uff08\u6bcf\u54c1\u79cd\uff09 \u65f6\u957f\uff08\u5e74\uff09 \u7269\u7406\u5185\u5b58\uff08GB) \u65e5\u7ebf 1000 4 0.75 \u6708\u7ebf 120 10 0.09 \u5e74\u7ebf 10 10 0.0075 \u5c0f\u65f6\u7ebf 1000 1 0.75 30\u5206\u949f\u7ebf 1000 0.5 0.75 15\u5206\u949f\u7ebf 1000 0.25 0.75 5\u5206\u949f\u7ebf 960 0.08 0.72 1\u5206\u949f\u7ebf 960 0.016 0.72 \u5408\u8ba1 3.7875 \u5bf9\u4e8e\u7edd\u5927\u591a\u6570\u52a8\u91cf\u7b56\u7565\u7684\u7814\u7a76\u800c\u8a00\uff0c\u6bcf\u652f\u54c1\u79cd\u67091000\u6761\u8bb0\u5f55\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u57fa\u672c\u4e0a\u662f\u8db3\u591f\u7684\u3002\u66f4\u591a\u7684\u884c\u60c5\u6570\u636e\uff0c\u53ef\u80fd\u4e5f\u4e00\u4e9bpattern\u7684\u81ea\u91cd\u590d\u800c\u5df2\u3002\u5f53\u7136Omega\u4e5f\u5141\u8bb8\u60a8\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u548c\u786c\u4ef6\u73af\u5883\uff0c\u6765\u9009\u62e9\u4fdd\u5b58\u54ea\u4e9b\u8bc1\u5238\u54c1\u79cd\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u8bc1\u5238\u54c1\u79cd\u4fdd\u5b58\u591a\u957f\u7684\u6570\u636e\uff08\u5305\u62ec\u5468\u671f\uff09\u3002 \u5982\u679c\u60a8\u7684\u5b66\u4e60\u6a21\u578b\u9700\u8981\u7ed3\u5408\u57fa\u672c\u9762\uff08\u8d22\u52a1\u6570\u636e\uff09\uff0c\u4ece\u800c\u53ef\u80fd\u9700\u8981\u76f8\u5e94\u66f4\u957f\u5468\u671f\u7684\u884c\u60c5\u6570\u636e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5efa\u8bae\u60a8\u53ea\u4fdd\u5b58\u65e5\u7ebf\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684\u6570\u636e\u3002\u516c\u53f8\u57fa\u672c\u9762\u7684\u6570\u636e\uff0c\u5bf9\u65e5\u7ebf\u4ee5\u4e0b\u7ea7\u522b\u7684\u80a1\u4ef7\u6ce2\u52a8\u662f\u6ca1\u6709\u5f71\u54cd\u7684\u3002\u4fdd\u5b58\u5168\u5e02\u573a10\u5e74\u7684\u65e5\u7ebf\u6570\u636e\uff0c\u4e5f\u53ea\u89812GB\u5de6\u53f3\u7684\u5185\u5b58\u3002 Omega\u793e\u533a\u7248\u88ab\u8bbe\u8ba1\u4e3a\u652f\u6301\u4ece\u4e2a\u4eba\u5230\u5c0f\u578b\u56e2\u961f\u7684AI\u91cf\u5316\u7814\u7a76\u3002\u5982\u679c\u60a8\u9700\u8981\u4fdd\u5b58tick\u7ea7\u7684\u6570\u636e\uff0c\u6216\u8005\u8f83\u957f\u65f6\u95f4\u8303\u56f4\u7684\u5206\u949f\u7ea7\u522b\u6570\u636e\uff0c\u8bf7\u4f7f\u7528\u4f01\u4e1a\u7248\u3002","title":"1.1.1. \u5185\u5b58"},{"location":"deployment/#cpu","text":"Omega\u88ab\u8bbe\u8ba1\u4e3a\u80fd\u8fd0\u884c\u5728\u4ece\u53f0\u5f0f\u673a\u5230\u591a\u53f0\u670d\u52a1\u5668\u96c6\u7fa4\u4e0a\u3002\u7531\u4e8ePython\u672c\u8eab\u7684\u9650\u5236\uff0cPython\u7a0b\u5e8f\u4e00\u822c\u65e0\u6cd5\u6709\u6548\u5730\u4f7f\u7528\u673a\u5668\u7684\u591a\u4e2aCPU\uff08\u5185\u6838\uff09\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u4e00\u9650\u5236\uff0cOmega\u8bbe\u8ba1\u6210\u5f02\u6b65 \u591a\u8fdb\u7a0b \u534f\u4f5c\u6a21\u5f0f\uff0c\u4ece\u800c\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u60a8\u673a\u5668\u7684CPU\u3002\u56e0\u6b64\uff0c\u5728\u60a8\u914d\u7f6e\u673a\u5668\u65f6\uff0cCPU\u4ecd\u7136\u662f\u8d8a\u591a\u8d8a\u597d\u3002","title":"CPU"},{"location":"deployment/#\u786c\u76d8","text":"Omega\u5bf9\u786c\u76d8\u7684\u6027\u80fd\u548c\u5bb9\u91cf\u51e0\u4e4e\u6ca1\u6709\u8981\u6c42\u3002\u4e00\u822c\u800c\u8a00\uff0c\u5728\u5b89\u88c5Omega\u4e4b\u524d\uff0c\u7cfb\u7edf\u6700\u597d\u81f3\u5c11\u8fd8\u670950GB\u78c1\u76d8\u7a7a\u95f4\u3002","title":"\u786c\u76d8"},{"location":"deployment/#112-\u7f51\u7edc","text":"\u5982\u679c\u60a8\u4f7f\u7528\u5206\u5e03\u5f0f\u90e8\u7f72\uff0c\u5efa\u8baeZillionare\u5404\u670d\u52a1\u90fd\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u5343\u5146\u5c40\u57df\u7f51\u5185\u3002","title":"1.1.2. \u7f51\u7edc"},{"location":"deployment/#12-\u8f6f\u4ef6\u6e05\u5355","text":"Note Omega\u4e0d\u9002\u5408\u90e8\u7f72\u5728Windows\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u3002Omega\u7684\u5404\u4e2a\u7248\u672c\u5747\u53ea\u5728Ubuntu 18\uff0c Ubuntu 20\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002\u56e0\u6b64\uff0c\u5373\u4f7fOmega\u80fd\u5728Windows\u4e0a\u8fd0\u884c\u8d77\u6765\uff0c\u6211\u4eec\u4e5f\u4e0d\u63a8\u8350\u60a8\u8fd9\u6837\u4f7f\u7528\u3002 \u5982\u679c\u60a8\u662f\u4e2a\u4eba\u7814\u7a76\u4f7f\u7528\uff0c\u53ea\u6709Windows\u673a\u5668\uff0c\u5efa\u8bae\u60a8\u542f\u7528Windows\u7684WSL\u5e73\u53f0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u540c\u65f6\u4f7f\u7528Ubuntu\u548cWindows\u4e86\u3002\u5173\u4e8e\u5982\u4f55\u5728Windows\u4e0a\u542f\u7528WSL\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0 \u5f00\u53d1\u73af\u5883\u548cIDE Omega\u4f7f\u7528Python 3.8\u5f00\u53d1\uff0c\u7406\u8bba\u4e0a\u53ef\u4ee5\u90e8\u7f72\u5728\u4efb\u4f55\u7c7bUnix\u7684\u673a\u5668\u4e0a\u3002\u4f46\u53ea\u5728Ubuntu\u4e0a\u7ecf\u8fc7\u4e25\u683c\u7684\u6d4b\u8bd5\u3002\u4ee5\u4e0b\u4e3a\u8f6f\u4ef6\u73af\u5883\u7c7b\u6e05\u5355\uff1a \u8f6f\u4ef6\u7c7b\u522b \u8f6f\u4ef6 \u7248\u672c \u8bf4\u660e \u64cd\u4f5c\u7cfb\u7edf Ubuntu 18/20 \u8fd0\u884c\u65f6 Python >=3.8 \u5185\u5b58\u6570\u636e\u5e93 Redis >=4.0 \u6570\u636e\u5e93 Postgres >=10 \u9009\u88c5 \u8d1f\u8f7d\u5747\u8861 Nginx \u9009\u88c5 \u884c\u60c5\u670d\u52a1 jqdatasdk >=1.8 \u7f16\u8bd1\u5de5\u5177 gcc latest jqdatasdk\u4f7f\u7528\u4e86thrift2\uff0c\u9700\u8981gcc\u8fdb\u884c\u7f16\u8bd1 \u5982\u679c\u60a8\u7684\u6a21\u578b\u4e2d\u4e0d\u6253\u7b97\u4f7f\u7528\u8d22\u52a1\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u5728\u52a8\u91cf\u7b56\u7565\u7814\u7a76\u4e2d\uff0c\u60a8\u4e5f\u53ef\u80fd\u4f7f\u7528\u8d22\u52a1\u6570\u636e\u3002\u56e0\u4e3a\u6d41\u901a\u80a1\u672c\u5c5e\u4e8e\u8d22\u52a1\u6570\u636e\uff0c\u6240\u4ee5\u5728\u6362\u624b\u7387\u7684\u8ba1\u7b97\u4e2d\uff0c\u8fd8\u5fc5\u987b\u4f7f\u7528\u8d22\u52a1\u6570\u636e\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u5982\u679c\u60a8\u5bf9\u6027\u80fd\u6ca1\u6709\u592a\u9ad8\u8981\u6c42\u7684\u8bdd\uff0c\u4ecd\u7136\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u6570\u636e\u5e93\u3002\u5f53\u60a8\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u8d22\u52a1\u6570\u636e\u65f6\uff0cOmega\u4f1a\u4ece\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u5668\u83b7\u53d6\u76f8\u5173\u6570\u636e\u7528\u4e8e\u8ba1\u7b97\uff08\u4f46\u8fd9\u4e9b\u6570\u636e\u4e0d\u4f1a\u5728\u672c\u5730\u4fdd\u5b58\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8ba1\u7b97\u6027\u80fd\u7684\u5f3a\u5f31\uff0c\u53ef\u80fd\u4e3b\u8981\u53d6\u51b3\u4e8e\u4e0a\u6e38\u884c\u60c5\u670d\u52a1\u5668\u7684\u6570\u636e\u670d\u52a1\u80fd\u529b\u548c\u54cd\u5e94\u901f\u5ea6\u3002 \u5c3d\u7ba1Omega\u88ab\u8bbe\u8ba1\u6210\u652f\u6301\u5206\u5e03\u5f0f\u90e8\u7f72\uff08\u5373\u53ef\u4ee5\u8fd0\u884c\u5728\u591a\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u76f8\u4e92\u534f\u4f5c\uff09\uff0c\u4f46\u81ea\u5df1\u53ea\u5b9e\u73b0\u4e86\u7b80\u5355\u7684\u4efb\u52a1\u7ba1\u7406\u3002\u8d1f\u8f7d\u5747\u8861\u7684\u5b9e\u73b0\uff0c\u76ee\u524d\u662f\u7531Nginx\u8fd9\u6837\u7684\u4ee3\u7406\u5728HTTP\u5c42\u5b8c\u6210\u7684\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6765\u9009\u62e9\u662f\u5426\u8fd9\u6837\u8fdb\u884c\u90e8\u7f72\u3002","title":"1.2. \u8f6f\u4ef6\u6e05\u5355"},{"location":"deployment/#2-\u63a8\u8350\u7684\u90e8\u7f72\u6a21\u5f0f","text":"Omega\u7684\u90e8\u7f72\u5168\u666f\u56fe\u5982\u4e0b\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u8fdb\u884c\u5b9a\u5236\u3002","title":"2. \u63a8\u8350\u7684\u90e8\u7f72\u6a21\u5f0f"},{"location":"deployment/#21-\u4e2a\u4eba\u7814\u7a76","text":"\u5bf9\u4e8e\u4e2a\u4eba\u7814\u7a76\uff0c\u6211\u4eec\u63a8\u8350\u53ef\u4ee5\u5728\u5355\u53f0\u7b14\u8bb0\u672c\u3001\u53f0\u5f0f\u673a\u4e0a\u8fdb\u884c\u90e8\u7f72\u3002\u60a8\u53ef\u4ee5\u5c06Omega, redis\u548cPostgres\u5b89\u88c5\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u3002\u5982\u679c\u60a8\u53ea\u505a\u52a8\u91cf\u7814\u7a76\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5b89\u88c5Postgres\u3002 \u5982\u679c\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u662fWindows\u7684\u8bdd\uff0c\u5efa\u8bae\u60a8\u6309\u7167 \u5f00\u53d1\u73af\u5883\u548cIDE \u6765\u5b89\u88c5WSL\uff0c\u4ee5\u83b7\u5f97Omega\u5b89\u88c5\u9700\u8981\u7684Ubuntu\u64cd\u4f5c\u7cfb\u7edf\u73af\u5883\u3002 \u5982\u679c\u60a8\u4f7f\u7528Mac\u673a\u5668\u7684\u8bdd\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5b89\u88c5Omega\u3002","title":"2.1. \u4e2a\u4eba\u7814\u7a76"},{"location":"deployment/#22-\u56e2\u961f\u4f7f\u7528","text":"\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u56e2\u961f\u9700\u8981\u4f7f\u7528Omega\u63d0\u4f9b\u7684\u884c\u60c5\u670d\u52a1\uff0c\u975e\u5e38\u68d2\uff01Omega\u5b8c\u5168\u9002\u5408\u8fd9\u79cd\u573a\u666f\u4e0b\u7684\u5e94\u7528\u3002\u5efa\u8bae\u60a8\u6839\u636e\u56e2\u961f\u4f7f\u7528\u6570\u636e\u7684\u9891\u5ea6\u3001\u91cf\u7ea7\u548c\u4eba\u6570\uff0c\u6765\u51b3\u5b9a\u9700\u8981\u591a\u5c11\u53f0\u673a\u5668\u5b89\u88c5Omega\uff0c\u4ee5\u53ca\u5b89\u88c5Nginx\u4f5c\u4e3aOmega\u7684\u524d\u7f6e\u4ee3\u7406\u3002","title":"2.2. \u56e2\u961f\u4f7f\u7528"},{"location":"deployment/#3-\u5b89\u88c5\u6b65\u9aa4","text":"","title":"3. \u5b89\u88c5\u6b65\u9aa4"},{"location":"deployment/#31-\u521b\u5efapython\u865a\u62df\u73af\u5883","text":"\u4e3a\u907f\u514d\u4e0e\u5176\u5b83Python\u7a0b\u5e8f\u4ea7\u751f\u51b2\u7a81\uff0c\u63a8\u8350\u60a8\u4e3aOmega\u521b\u5efa\u4e13\u5c5e\u7684\u8fd0\u884c\u73af\u5883\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 conda \u6216\u8005venv\u6765\u521b\u5efa\u4e13\u5c5e\u8fd0\u884c\u73af\u5883\u3002\u8fd9\u91cc\u4ee5conda\u4e3a\u4f8b\uff1a \u4ece \u8fd9\u91cc \u4e0b\u8f7dminiconda\u5230\u672c\u5730\uff0c\u5e76\u8fd0\u884c\u5b89\u88c5\u3002\u4e0b\u8f7d\u9875\u9762\u63d0\u4f9b\u4e86\u591a\u4e2a\u7248\u672c\uff0c\u8bf7\u4e0b\u8f7dPython3.8\u7684Linux installer\u7248\u672c\uff08\u5047\u5b9a\u60a8\u4f7f\u7528Ubuntu\u3002\u5982\u679c\u4f7f\u7528windows\uff0c\u8bf7\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u5728Windows\u4e0a\u542f\u7528WSL\u548cUbuntu\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u4ee5\u521b\u5efaOmega\u8fd0\u884c\u73af\u5883: 1 2 conda create -n omega python=3.8 conda activate omega","title":"3.1. \u521b\u5efaPython\u865a\u62df\u73af\u5883"},{"location":"deployment/#32-\u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272","text":"Omega\u4f7f\u7528cfg4py\u6765\u89e3\u6790\u548c\u7ba1\u7406\u914d\u7f6e\u3002\u4f5c\u4e3a\u6700\u4f73\u5b9e\u8df5\uff0ccfg4py\u8981\u6c42\u60a8\u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272\uff0c\u4ee5\u4fbf\u4e3a\u60a8\u52a0\u8f7d\u6b63\u786e\u7684\u914d\u7f6e\u3002\u5728\u5f00\u59cb\u5b89\u88c5\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6765\u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272\u3002 \u60a8\u53ef\u4ee5\u5728/etc/profile\uff0c\u6216\u8005~/.bashrc\u4e2d\u52a0\u4e0a\u8fd9\u6837\u4e00\u884c\uff1a 1 2 # \u53ef\u9009\u9879\u5305\u62ec PRODUCTION, TEST, DEV export __cfg4py_server_role__ = PRODUCTION \u5982\u679c\u60a8\u53ea\u662f\u666e\u901a\u7528\u6237\uff0c\u90a3\u4e48\u4e00\u822c\u6765\u8bf4\uff0c\u5e94\u8be5\u8bbe\u7f6e\u4e3aPRODUCTION\u3002","title":"3.2. \u8bbe\u7f6e\u670d\u52a1\u5668\u89d2\u8272"},{"location":"deployment/#33-\u5b89\u88c5\u7b2c\u4e09\u65b9\u8f6f\u4ef6","text":"\u8bf7\u53c2\u7167Redis\u548cPostgres\u7684\u5b89\u88c5\u6307\u5357\uff0c\u5206\u522b\u5b8c\u6210Redis\u548cPostgres\u7684\u5b89\u88c5\u3002 Note \u5982\u679c\u60a8\u7684\u673a\u5668\u4e0a\u5df2\u7ecf\u6709\u5176\u5b83\u7a0b\u5e8f\u5728\u4f7f\u7528Redis\u670d\u52a1\uff0c\u4e3a\u907f\u514d\u51b2\u7a81\uff0c\u8bf7\u5728\u672c\u673a\u4e0a\u542f\u52a8\u7b2c\u4e8c\u4e2aRedis\u5b9e\u4f8b\uff0c \u72ec\u7acb\u4e3aOmega\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u4e2a\u5b9e\u4f8b\u5e94\u8be5\u4f7f\u7528\u4e0d\u540c\u7684\u7aef\u53e3\u3002 \u60a8\u53ef\u4ee5\u4e3aOmega\u5b89\u88c5\u4e00\u4e2a\u5168\u65b0\u7684Postgres\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c\u4e5f\u91cd\u590d\u4f7f\u7528\u73b0\u6709\u7684Postgres\u6570\u636e\u5e93\u670d\u52a1\u5668\uff0c \u53ea\u8981\u4e3aOmega\u51c6\u5907\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u5e93\u5373\u53ef\u3002Omega\u5c06\u5728\u8be5\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u4e00\u7cfb\u5217\u8868\uff08table)\u3002 \u5b89\u88c5\u5b8c\u6210Postgres\u540e\uff0c\u8bf7\u4e3aZillionare\u521b\u5efa\u6570\u636e\u5e93\uff0c\u63a8\u8350\u4f7f\u7528zillionare\u4f5c\u4e3a\u6570\u636e\u5e93\u540d\u79f0\uff1a 1 2 3 4 5 6 7 8 # \u4f7f\u7528psql\uff0c\u672c\u5730\u4ee5postgres\u8d26\u6237\u767b\u5f55\u8fdb\u6765 sudo su - Postgres psql # \u8fdb\u5165\u6570\u636e\u5e93\u4ee5\u540e create user zillionare with password 'your_secret' ; create database zillionare ; grant all privileges on database 'zillionare' to zillionare ; \u8bb0\u4e0b\u8fd9\u91cc\u4f7f\u7528\u7684\u7528\u6237\u540d\u548c\u53e3\u4ee4\uff0c\u5728\u5b89\u88c5Omega\u65f6\u9700\u8981\u4f7f\u7528\u3002","title":"3.3. \u5b89\u88c5\u7b2c\u4e09\u65b9\u8f6f\u4ef6"},{"location":"deployment/#34-\u5b89\u88c5omega","text":"","title":"3.4. \u5b89\u88c5Omega"},{"location":"deployment/#341-\u4ecepip\u5b89\u88c5omega","text":"\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u4ecepip\u5b89\u88c5zillionare-omega(\u4ee5\u4e0b\u79f0\u4e3aOmega): 1 $ pip install zillionare-omega","title":"3.4.1. \u4ecepip\u5b89\u88c5Omega"},{"location":"deployment/#342-\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5omega","text":"Omega\u7684\u6e90\u4ee3\u7801\u53ef\u4ee5\u4ece github \u4e0b\u8f7d\uff1a \u4f60\u53ef\u4ee5clone\u4ee3\u7801\u5e93\uff1a 1 $ git clone git://github.com/zillionare/omega \u6216\u8005\u4e0b\u8f7d \u6e90\u7801\u5305 : 1 $ curl -OJL https://github.com/zillionare/omega/tarball/master \u4e00\u65e6\u6e90\u4ee3\u7801\u590d\u5236\u5230\u672c\u5730\uff0c\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fdb\u884c\u5b89\u88c5\uff1a 1 $ python setup.py install \u9664\u975e\u60a8\u662fOmega\u7684\u534f\u540c\u5f00\u53d1\u8005\uff0c\u6216\u8005\u9047\u5230\u7d27\u6025\u4fee\u590d\u7684bug\uff0c\u5426\u5219\u90fd\u5e94\u8be5\u901a\u8fc7 pip \u7684\u65b9\u5f0f\u6765\u5b89\u88c5\u7a33\u5b9a\u7248\uff0c\u800c\u4e0d\u5e94\u8be5\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5\u3002","title":"3.4.2. \u4ece\u6e90\u4ee3\u7801\u5b89\u88c5Omega"},{"location":"deployment/#35-\u521d\u59cb\u5316","text":"\u7531\u4e8epip\u6267\u884c\u5b89\u88c5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u65e0\u6cd5\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u4e92\uff08\u8fd9\u662fwheel\u683c\u5f0f\u5305\u7684\u7f3a\u9677\uff09\uff0c\u6240\u4ee5\u521d\u59cb\u5316\u7684\u4efb\u52a1\uff0c\u6211\u4eec\u901a\u8fc7 omega setup \u547d\u4ee4\u6765\u5b8c\u6210\uff1a \u521d\u59cb\u5316\u4e3b\u8981\u5b8c\u6210\u4ee5\u4e0b\u4efb\u52a1\uff1a \u68c0\u6d4b\u5b89\u88c5\u73af\u5883\u3002 \u914d\u7f6e\u884c\u60c5\u670d\u52a1\u5668 \u914d\u7f6eRedis\u6570\u636e\u5e93 \u914d\u7f6ePostgres\u6570\u636e\u5e93 \u5176\u5b83\u8bbe\u7f6e\uff08\u5982\u65e5\u5fd7\u7b49\uff09 \u5bfc\u5165\u5386\u53f2K\u7ebf\u6570\u636e","title":"3.5. \u521d\u59cb\u5316"},{"location":"deployment/#351-\u521d\u59cb\u5316\u524d\u7684\u68c0\u67e5","text":"\u73b0\u5728\uff0c\u8bf7\u786e\u8ba4\u60a8\u5df2\u7ecf\u51c6\u5907\u597d\uff1a \u8bbe\u7f6e\u597d\u4e86\u670d\u52a1\u5668\u89d2\u8272 \u5df2\u5207\u6362\u81f3\u4e13\u95e8\u4e3aOmega\u521b\u5efa\u7684\u865a\u62df\u8fd0\u884c\u73af\u5883 Redis\u670d\u52a1\u3001Postgres\u670d\u52a1\u5df2\u5b89\u88c5\u597d\uff0c\u5e76\u4e14\u90fd\u5df2\u7ecf\u542f\u52a8\u3002 zillionare\u6570\u636e\u5e93\u5df2\u7ecf\u521b\u5efa\uff0c\u5e76\u4e14\u5df2\u5f97\u5230\u6570\u636e\u5e93\u8d26\u6237\u3002 \u5df2\u5b89\u88c5\u4e86Omega \u73b0\u5728\uff0c\u60a8\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fdb\u5165\u5230\u542f\u52a8Omega\u524d\u7684\u6700\u540e\u4e00\u6b65\u4e86\u3002\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u8fdb\u884c\u521d\u59cb\u5316\uff1a 1 omega setup","title":"3.5.1. \u521d\u59cb\u5316\u524d\u7684\u68c0\u67e5"},{"location":"deployment/#352-\u68c0\u6d4b\u5b89\u88c5\u73af\u5883","text":"\u4f5c\u4e3a\u4e00\u79cd\u6700\u4f73\u5b9e\u8df5\uff0cOmega\u63a8\u8350\u60a8\u4e3aOmega\u521b\u5efa\u4e13\u5c5e\u865a\u62df\u8fd0\u884c\u73af\u5883\uff0c\u5e76\u59cb\u7ec8\u5728\u8be5\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884cOmega\u3002\u5b89\u88c5\u7a0b\u5e8f\u4e5f\u4f1a\u68c0\u6d4b\u5f53\u524d\u662f\u5426\u5728\u865a\u62df\u73af\u5883\u4e2d\u8fd0\u884c\u3002 Omega\u4f7f\u7528 cfg4py_ \u6765\u7ba1\u7406\u914d\u7f6e\u3002Cfg4py\u8981\u6c42\u60a8\u4e3a\u90e8\u7f72\u673a\u5668\u8bbe\u7f6e\u573a\u666f\uff08\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u751f\u4ea7\u73af\u5883\uff09\uff0c\u4ee5\u4fbf\u6839\u636e\u5bf9\u5e94\u7684\u573a\u666f\u6765\u5e94\u7528\u914d\u7f6e\u3002\u56e0\u6b64\uff0c\u5728Omega\u5b89\u88c5\u65f6\uff0c\u4e5f\u4f1a\u68c0\u6d4b\u5f53\u524d\u673a\u5668\u662f\u5426\u6b63\u786e\u5730\u8bbe\u7f6e\u4e86\u573a\u666f\u3002","title":"3.5.2. \u68c0\u6d4b\u5b89\u88c5\u73af\u5883"},{"location":"deployment/#353-\u914d\u7f6e\u884c\u60c5\u670d\u52a1\u5668","text":"Omega\u901a\u8fc7\u63d2\u4ef6\u6765\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u83b7\u53d6\u884c\u60c5\u6570\u636e\u3002\u5f53\u524d\u652f\u6301\u7684\u6570\u636e\u63d0\u4f9b\u6e90\u662f\u805a\u5bbd(JoinQuant)\u3002 \u5728\u4f7f\u7528\u805a\u5bbd\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5728 \u805a\u5bbd\u5b98\u7f51 \u4e0a\u7533\u8bf7 jqdatasdk \u7684\u4f7f\u7528\u6743\u9650\u3002\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u9700\u8981\u60a8\u63d0\u4f9b\u8fd9\u4e9b\u4fe1\u606f\u3002\u6bcf\u4e2a\u805a\u5bbd\u8d26\u53f7\u6700\u591a\u5141\u8bb83\u4e2a\u5e76\u53d1\u8fde\u63a5\u3002\u5728\u5b89\u88c5\u65f6\uff0cOmega\u9700\u8981\u60a8\u4e3a\u6bcf\u4e2a\u8d26\u53f7\u51b3\u5b9a\u540c\u65f6\u5141\u8bb8\u7684\u6700\u5927\u4f1a\u8bdd\uff08\u8fde\u63a5\uff09\u6570\u3002 Omega\u652f\u6301\u591a\u4e2a\u6570\u636e\u6e90\u540c\u65f6\u5de5\u4f5c\uff08\u4f46\u5f53\u524d\u53ea\u63d0\u4f9b\u4e86\u5bf9\u805a\u5bbd\u7684\u63a5\u53e3\u9002\u914d\uff09\uff0c\u5e76\u4e14\u652f\u6301\u5728\u540c\u4e00\u6570\u636e\u6e90\u4e0b\uff0c\u914d\u7f6e\u591a\u4e2a\u8d26\u53f7\uff0c\u591a\u4e2a\u4f1a\u8bdd\uff08\u5982\u679c\u60a8\u8fd9\u6837\u505a\uff0c\u8bf7\u786e\u4fdd\u5f97\u5230\u4e86\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u8bb8\u53ef\uff09\uff0c\u4ece\u800c\u53ef\u4ee5\u5feb\u901f\u83b7\u53d6\u5b9e\u65f6\u884c\u60c5\u3002\u6240\u4ee5\u5728\u4e0a\u9762\u7684\u5b89\u88c5\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u63d0\u793a\u60a8\u8f93\u5165\u5e76\u53d1\u4f1a\u8bdd\u6570\uff0c\u4ee5\u53ca\u662f\u5426\u914d\u7f6e\u591a\u4e2a\u8d26\u53f7\u3002 Tip Omega\u901a\u8fc7HTTP\u5fae\u670d\u52a1\u5411Zillionare\u7684\u5176\u5b83\u7ec4\u4ef6\u63d0\u4f9b\u884c\u60c5\u6570\u636e\uff0c\u56e0\u6b64Omega\u672c\u8eab\u4e5f\u662f\u4e00\u79cd\u884c\u60c5\u670d\u52a1\u5668\u3002\u9ed8\u8ba4\u5730\uff0cOmega\u7684\u670d\u52a1\u7aef\u53e3\u4ece3181\u5f00\u59cb\uff0c\u5982\u679c\u60a8\u6709\u591a\u4e2a\u6570\u636e\u6e90\uff0c\u6216\u8005\u591a\u4e2a\u8d26\u53f7\uff0c\u90a3\u4e48Omega\u5c06\u4e3a\u4e0d\u540c\u7684\u6570\u636e\u6e90\u3001\u6216\u8005\u540c\u4e00\u6570\u636e\u6e90\u7684\u4e0d\u540c\u8d26\u53f7\uff0c\u542f\u7528\u65b0\u7684\u7aef\u53e3\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u60a8\u62e5\u6709\u4e24\u4e2ajqdatasdk\u7684\u8d26\u53f7\uff0c\u5e76\u914d\u7f6e\u5728Omega\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\uff0cOmega\u5c06\u542f\u52a8\u4e24\u4e2aHTTP\u670d\u52a1\u5668\uff0c\u4e00\u4e2a\u76d1\u542c\u57283181\u7aef\u53e3\uff0c\u53e6\u4e00\u4e2a\u76d1\u542c\u57283182\u7aef\u53e3\u3002 \u5b89\u88c5\u7a0b\u5e8f\u6ca1\u6709\u63d0\u4f9b\u7aef\u53e3\u5b9a\u5236\u7684\u529f\u80fd\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u627e\u5230\u5b83\u4eec\u5e76\u8fdb\u884c\u4fee\u6539\uff1a 1 2 3 4 5 6 7 8 9 10 omega : urls : quotes_server : http://localhost:3181 quotes_fetchers : - impl : jqadaptor # there must be a create_instance method in this module workers : - account : ${jq_account} password : ${jq_password} port : 3181 sessions : 2 \u8fd9\u91cc\u6709\u51e0\u70b9\u9700\u8981\u6ce8\u610f\uff1a Omega\u4f7f\u7528Sanic\u4f5c\u4e3aHTTP\u670d\u52a1\u5668\u3002\u7531\u4e8eSanic\u7684\u539f\u56e0\uff0c\u5982\u679c\u60a8\u9700\u8981Omega\u4e0e\u4e0a\u6e38\u670d\u52a1\u5668\u540c\u65f6\u5efa\u7acb3\u4e2a\u5e76\u53d1\u4f1a\u8bdd\uff0c\u90a3\u4e48\u4f1a\u8bdd\u8bbe\u7f6e\u5e94\u8be5\u8bbe\u7f6e\u4e3a2\uff0c\u800c\u4e0d\u662f3\uff0c\u5373\u60a8\u5f97\u5230\u7684\u4f1a\u8bdd\u6570\uff0c\u603b\u4f1a\u6bd4\u8bbe\u7f6e\u503c\u59271\u3002 \u5728\u4e0a\u9762\u7684\u914d\u7f6e\u793a\u4f8b\u4e2d\uff0c\u51fa\u73b0\u4e86${jq_account}\u8fd9\u6837\u7684\u5b8f\uff0c\u8fd9\u662f cfg4py \u652f\u6301\u7684\u529f\u80fd\uff0c\u5982\u679c\u60a8\u8bbe\u7f6e\u4e86\u540c\u540d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5219 cfg4py \u5c06\u4f1a\u5c06\u5176\u66ff\u6362\u6210\u4e3a\u73af\u5883\u53d8\u91cf\u786e\u5b9a\u7684\u503c\u3002\u5efa\u8baeOmega\u7684\u534f\u4f5c\u5f00\u53d1\u8005\u59cb\u7ec8\u4f7f\u7528\u8fd9\u4e00\u8bed\u6cd5\uff0c\u4ee5\u907f\u514d\u8bef\u5c06\u8d26\u53f7\u548c\u53e3\u4ee4\u516c\u5f00\u7684\u4e92\u8054\u7f51\u4e0a\u3002 Omega\u4f5c\u4e3a\u672c\u5730\u884c\u60c5\u670d\u52a1\u5668\uff0c\u5176\u5b83\u7ec4\u4ef6\u5728\u8bbf\u95ee\u5b83\u65f6\uff0c\u9700\u8981\u5f97\u5230\u670d\u52a1\u5730\u5740\u3002\u5b89\u88c5\u7a0b\u5e8f\u6ca1\u6709\u63d0\u4f9b\u914d\u7f6e\u9879\uff0c\u9ed8\u8ba4\u5730\uff0c\u5b83\u88ab\u914d\u7f6e\u5728 http://localhost:3181 \u4e0a\uff0c\u8fd9\u4e2a\u914d\u7f6e\u662f\u4f9b\u72ec\u7acb\u7814\u7a76\u8005\u4f7f\u7528\u7684\uff0c\u4f46\u65e0\u6cd5\u4f7f\u7528\u591a\u8d26\u53f7\u3001\u591a\u6570\u636e\u6e90\u529f\u80fd\uff0c\u4e5f\u6ca1\u6709\u8d1f\u8f7d\u5747\u8861\u529f\u80fd\u3002\u4e3a\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0c\u60a8\u9700\u8981\u81ea\u884c\u5b89\u88c5nginx\u505a\u4ee3\u7406\uff0c\u5e76\u5c06nginx\u7684\u4ee3\u7406\u5730\u5740\u914d\u7f6e\u5728\u4e0b\u9762\u7684\u914d\u7f6e\u5f53\u4e2d\uff1a 1 2 3 omega: urls: quotes_fetchers: http://your_nginx_address \u8fd9\u4e9b\u914d\u7f6e\u770b\u4e0a\u53bb\u6bd4\u8f83\u590d\u6742\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u60a8\u4e00\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5b8c\u5168\u6309\u9ed8\u8ba4\u8bbe\u7f6e\u6765\u4f7f\u7528\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u6b65--\u5982\u679c\u60a8\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u4e86\u805a\u5bbd\u7684\u8d26\u53f7\u548c\u5bc6\u7801\u7684\u8bdd\u3002","title":"3.5.3. \u914d\u7f6e\u884c\u60c5\u670d\u52a1\u5668"},{"location":"deployment/#354-\u914d\u7f6eredis\u670d\u52a1\u5668","text":"\u884c\u60c5\u6570\u636e\u90fd\u5b58\u653e\u5728Redis\u6570\u636e\u5e93\u91cc\u3002\u60a8\u9700\u8981\u4e8b\u5148\u5b89\u88c5\u597dRedis\u670d\u52a1\u5668\uff0c\u5e76\u544a\u8bc9Omega\u5982\u4f55\u8fde\u63a5\uff1a","title":"3.5.4. \u914d\u7f6eRedis\u670d\u52a1\u5668"},{"location":"deployment/#355-\u914d\u7f6epostgres\u6570\u636e\u5e93","text":"\u5982\u679c\u60a8\u6025\u4e8e\u5f00\u59cb\u4f7f\u7528Omega,\u60a8\u53ef\u4ee5\u7565\u8fc7Postgres\u7684\u5b89\u88c5\u548c\u914d\u7f6e\u3002\u4f46\u662f\u914d\u7f6e\u6570\u636e\u5e93\u5c06\u4f7f\u5f97\u60a8\u8bbf\u95ee\u8d22\u52a1\u6570\u636e\u65f6\uff0c\u80fd\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd\u3002\u56e0\u4e3a\u5982\u679c\u60a8\u6ca1\u6709\u914d\u7f6ePostgres\u6570\u636e\u5e93\u7684\u8bdd\uff0c\u8fd9\u4e9b\u6570\u636e\u90fd\u5c06\u4ece\u4e0a\u6e38\u670d\u52a1\u5668\u53bb\u5b9e\u65f6\u83b7\u53d6\u3002","title":"3.5.5. \u914d\u7f6ePostgres\u6570\u636e\u5e93"},{"location":"deployment/#356-\u5bfc\u5165\u5386\u53f2\u884c\u60c5\u6570\u636e","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u4ece2015\u5e74\u4ee5\u676530\u5206\u949f\u53ca\u4ee5\u4e0a\u7ea7\u522b\u7684A\u80a1\u5386\u53f2\u884c\u60c5\u6570\u636e\uff08\u4e0d\u542b\u6307\u6570\uff09\uff0c\u5e76\u4e14\u5728\u6bcf\u4e2a\u6708\u7ed3\u675f\u540e\u66f4\u65b0\u4e0a\u4e00\u4e2a\u6708\u7684\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u63d0\u793a\u9009\u62e9\u5bfc\u5165\u8fd9\u4e9b\u6570\u636e\u3002 \u5b89\u88c5\u5411\u5bfc\u5c06\u63d0\u793a\u60a8\u8f93\u5165\u5bfc\u5165\u591a\u5c11\u4e2a\u6708\u7684\u6570\u636e\u3002\u6570\u636e\u662f\u4ece\u670d\u52a1\u5668\u4e0a\u6700\u65b0\u7684\u6570\u636e\uff0c\u6309\u6708\u5f80\u524d\u8ba1\u7b97\u7684\u3002\u5982\u679c\u5f53\u524d\u662f2021\u5e743\u6708\uff0c\u5219\u670d\u52a1\u5668\u4e0a\u5b58\u57282015\u5e741\u6708\u52302021\u5e742\u6708\u7684\u5168\u90e8\u6570\u636e\u3002\u5982\u679c\u60a8\u9009\u62e9\u5bfc\u51652\u4e2a\u6708\u7684\u6570\u636e\uff0c\u5219\u5c06\u4e3a\u60a8\u5bfc\u5165\u4ece2021\u5e741\u6708\u52302021\u5e742\u6708\u7684\u6240\u6709\u6570\u636e\u3002\u5176\u5b83\u6570\u636e\uff0c\u60a8\u5c06\u901a\u8fc7\u6b63\u5e38\u7684\u540c\u6b65\u6765\u83b7\u5f97\u3002 \u6700\u540e\uff0c\u5b89\u88c5\u5168\u90e8\u7ed3\u675f\uff0cOmega\u5c06\u4e3a\u60a8\u542f\u52a8\u670d\u52a1\uff0c\u5e76\u663e\u793a\u670d\u52a1\u72b6\u6001\uff1a","title":"3.5.6. \u5bfc\u5165\u5386\u53f2\u884c\u60c5\u6570\u636e"},{"location":"history/","text":"\u7248\u672c\u5386\u53f2 \u00b6 0.1.0 (2020-04-28) \u00b6 First release on PyPI. 0.5.0 (2020-11-09) \u00b6 \u589e\u52a0\u5e02\u503c\u6570\u636e Update omicron to 0.2.0 Update jq-adaptor to 0.2.1 0.6.0 (2020-11-25) \u00b6 \u91cd\u6784\u4e86[omega.app.start][]\u63a5\u53e3\uff0c\u5141\u8bb8\u4ece\u7236\u8fdb\u7a0b\u7ee7\u627f cfg \u8bbe\u7f6e web interface\u589e\u52a0[omega.app.get_version][]\u63a5\u53e3\u3002\u6b64\u63a5\u53e3\u4e5f\u53ef\u4ee5\u7528\u6765\u5224\u65adOmega\u670d\u52a1\u5668\u662f\u5426\u5728\u7ebf \u672c\u7248\u672c\u9002\u914dzillionare-omicron 0.3\u548czillionare-omega-adaptors-jq 0.2.4 1.0 (2020-?) \u00b6 first stable release \u53ef\u5bfc\u5165\u4ece2015\u5e74\u4ee5\u6765\u7684A\u80a130\u5206\u949f\u53ca\u4ee5\u4e0a\u80a1\u7968\u6570\u636e\u3002 \u9ad8\u901f\u884c\u60c5\u540c\u6b65\u3002\u652f\u6301\u591a\u8d26\u53f7\u3001\u591asession\u3001\u591a\u8fdb\u7a0b\u3002 \u5411\u5916\u63d0\u4f9b\u670d\u52a1\u65f6\uff0c\u652f\u6301load-balance\uff08\u9700\u8981\u914d\u7f6ehttp\u7f51\u5173\uff0c\u5982nginx)\u3002 \u81ea\u52a8\u5b9e\u65f6\u884c\u60c5\u540c\u6b65\u3002 \u4ec5\u652f\u6301JoinQuant\u4f5c\u4e3a\u4e0a\u6e38\u6570\u636e\u6e90","title":"\u7248\u672c\u5386\u53f2"},{"location":"history/#\u7248\u672c\u5386\u53f2","text":"","title":"\u7248\u672c\u5386\u53f2"},{"location":"history/#010-2020-04-28","text":"First release on PyPI.","title":"0.1.0 (2020-04-28)"},{"location":"history/#050-2020-11-09","text":"\u589e\u52a0\u5e02\u503c\u6570\u636e Update omicron to 0.2.0 Update jq-adaptor to 0.2.1","title":"0.5.0 (2020-11-09)"},{"location":"history/#060-2020-11-25","text":"\u91cd\u6784\u4e86[omega.app.start][]\u63a5\u53e3\uff0c\u5141\u8bb8\u4ece\u7236\u8fdb\u7a0b\u7ee7\u627f cfg \u8bbe\u7f6e web interface\u589e\u52a0[omega.app.get_version][]\u63a5\u53e3\u3002\u6b64\u63a5\u53e3\u4e5f\u53ef\u4ee5\u7528\u6765\u5224\u65adOmega\u670d\u52a1\u5668\u662f\u5426\u5728\u7ebf \u672c\u7248\u672c\u9002\u914dzillionare-omicron 0.3\u548czillionare-omega-adaptors-jq 0.2.4","title":"0.6.0 (2020-11-25)"},{"location":"history/#10-2020-","text":"first stable release \u53ef\u5bfc\u5165\u4ece2015\u5e74\u4ee5\u6765\u7684A\u80a130\u5206\u949f\u53ca\u4ee5\u4e0a\u80a1\u7968\u6570\u636e\u3002 \u9ad8\u901f\u884c\u60c5\u540c\u6b65\u3002\u652f\u6301\u591a\u8d26\u53f7\u3001\u591asession\u3001\u591a\u8fdb\u7a0b\u3002 \u5411\u5916\u63d0\u4f9b\u670d\u52a1\u65f6\uff0c\u652f\u6301load-balance\uff08\u9700\u8981\u914d\u7f6ehttp\u7f51\u5173\uff0c\u5982nginx)\u3002 \u81ea\u52a8\u5b9e\u65f6\u884c\u60c5\u540c\u6b65\u3002 \u4ec5\u652f\u6301JoinQuant\u4f5c\u4e3a\u4e0a\u6e38\u6570\u636e\u6e90","title":"1.0 (2020-?)"},{"location":"usage/","text":"1. \u914d\u7f6e\u6587\u4ef6 \u00b6 \u5bf9\u666e\u901a\u7528\u6237\u800c\u8a00\uff0cOmega\u4f1a\u4ece~/zillionare/omega/config\u4e0b\u52a0\u8f7d\u914d\u7f6e\u3002 Note \u5982\u679c\u60a8\u662fOmega\u7684\u5f00\u53d1\u8005\uff0c\u5e94\u8be5\u5c06\u73af\u5883\u53d8\u91cf __cfg4py_server_role__ \u8bbe\u7f6e\u4e3aDEV\uff0c\u8fd9\u6837Omega\u4f1a \u4ece\u6e90\u4ee3\u7801\u6240\u5728\u6587\u4ef6\u5939\u4e0b\u9762\u7684omega/config\u4e0b\u8bfb\u53d6\u914d\u7f6e\u3002 \u5982\u679c\u60a8\u662fOmega\u7684\u6d4b\u8bd5\u8005\uff0c\u5efa\u8bae\u60a8\u5c06\u73af\u5883\u53d8\u91cf __cfg4py_server_role__ \u8bbe\u7f6e\u4e3aTEST\uff0c\u8fd9\u6837Omega \u4f1a\u4ece~/.zillionare/omega/config\u4e0b\u52a0\u8f7d\u914d\u7f6e\u3002 \u4e0a\u8ff0\u8bbe\u7f6e\u5e76\u975e\u5fc5\u987b\uff0c\u5982\u679c\u60a8\u4e0d\u61c2\u5f97\u8fd9\u79cd\u8bbe\u7f6e\u7684\u610f\u4e49\uff0c\u60a8\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\u4f4d\u7f6e\uff0c\u5373~/zillionare/omega/config \u914d\u7f6e\u6587\u4ef6\u4f7f\u7528YAML\u6587\u4ef6\u683c\u5f0f\uff0c\u5e76\u652f\u6301\u73af\u5883\u53d8\u91cf\u3002\u6bd4\u5982\uff0c\u5982\u679c\u60a8\u901a\u8fc7\u73af\u5883\u53d8\u91cf POSTGRES_USER \u6765\u8bbe\u7f6e\u4e86\u6570\u636e\u5e93 \u8d26\u53f7\uff0c\u5219\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a 1 2 postgres : dsn : postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost/zillionare \u4e0a\u8ff0\u73af\u5883\u53d8\u91cf\u7684\u6269\u5c55\u662f\u901a\u8fc7 cfg4py \u6765\u652f\u6301\u7684\u3002 2. \u6570\u636e\u540c\u6b65 \u00b6 \u6570\u636e\u540c\u6b65\u662fOmega\u6700\u6838\u5fc3\u7684\u5de5\u4f5c\u4e4b\u4e00\u3002Omega\u4e13\u95e8\u914d\u7f6e\u4e86\u4e00\u4e2aJobs\u8fdb\u7a0b\u6765\u7ba1\u7406\u6570\u636e\u540c\u6b65\u53ca\u5176\u5b83\u5de5\u4f5c\u3002Jobs\u901a\u8fc7 \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u6765\u786e\u5b9a\u5e94\u8be5\u5982\u4f55\u8fdb\u884c\u540c\u6b65\uff0c\u5e76\u5411Omega Fetcher\u8fdb\u7a0b\u53d1\u51fa\u6570\u636e\u540c\u6b65\u8bf7\u6c42\u3002 \u5bf9\u4e8e\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5c11\u91cf\u6570\u636e\u7684\u540c\u6b65\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u901a\u5e38\u53ea\u4f1a\u53d1\u7ed9\u4e00\u4e2aOmega Fetcher\u8fdb\u7a0b\uff0c\u800c\u5bf9K\u7ebf\u8fd9\u6837\u7684\u5927 \u6279\u91cf\u6570\u636e\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u5219\u4f1a\u53d1\u7ed9\u6240\u6709\u5728\u7ebf\u7684Omega Fetcher\u8fdb\u7a0b\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528Omega\u53ef\u4ee5\u5f97\u5230\u6781\u4e3a\u4f18\u79c0\u7684\u6570\u636e\u540c \u6b65\u6027\u80fd\u3002 2.1. \u6570\u636e\u540c\u6b65\u53d1\u751f\u7684\u65f6\u95f4 \u00b6 \u5bf9\u65e5\u5386\u548c\u8bc1\u5238\u5217\u8868\u7b49\u6570\u636e\uff0cOmega\u6bcf\u5929\u8fdb\u884c\u4e00\u6b21\uff0c\u5177\u4f53\u540c\u6b65\u65f6\u95f4\u9ed8\u8ba4\u4e3a\u5348\u591c2\u70b9\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u4fee\u6539: 1 2 3 4 omega : # omega\u670d\u52a1\u81ea\u8eab\u76f8\u5173\u7684\u914d\u7f6e sync : # \u540c\u6b65\u76f8\u5173\u7684\u914d\u7f6e\u90fd\u5728sync\u8282\u4e0b security_list : 02:00 calendar : 02:00 \u5efa\u8bae\u5728\u6bcf\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u8fdb\u884c\u540c\u6b65\u3002\u5982\u65e0\u7279\u522b\u9700\u6c42\uff0c\u8bf7\u4fdd\u6301\u9ed8\u8ba4\u503c\u5c31\u597d\u3002 K\u7ebf\u6570\u636e\u4f1a\u5728\u6bcf\u4e2aFrame\u7ed3\u675f\u65f6\u95f4\u8fdb\u884c\u540c\u6b65\u3002\u6bd4\u5982\uff0c\u5bf960\u5206\u949fk\u7ebf\uff0c\u4f1a\u5206\u522b\u572810:30, 11:30, 14:00\u548c15\uff1a00 \u5404\u8fdb\u884c\u4e00\u6b21\u540c\u6b65\uff1b\u5bf9\u65e5\u7ebf\u6570\u636e\uff0c\u4f1a\u572815\uff1a00\u65f6\u8fdb\u884c\u540c\u6b65\uff0c\u8fd9\u6837\u786e\u4fdd\u60a8\u59cb\u7ec8\u53ef\u4ee5\u5f97\u5230\u6700\u65b0\u7684\u6570\u636e\u3002 \u60a8\u7684\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u5728\u6bcf\u4e2aFrame\u7ed3\u675f\u65f6\uff0c\u5c31\u521a\u597d\u628a\u6240\u6709\u7684\u6570\u636e\u51c6\u5907\u597d\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 \u8bbe\u7f6edelay\u6765\u7a0d\u7a0d\u5ef6\u8fdf\u540c\u6b65\u65f6\u95f4\u3002\u5982\u679c\u60a8\u6ca1\u6709\u8bbe\u7f6edelay\uff0c\u800c\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u63d0\u4f9b\u8005\u53c8\u4e0d\u80fd\u5728Frame\u521a\u597d\u7ed3\u675f\u65f6 \u63d0\u4f9b\u6570\u636e\u7684\u8bdd\uff0c\u6570\u636e\u540c\u6b65\u4ecd\u7136\u4f1a\u89e6\u53d1\uff0c\u53ea\u4e0d\u8fc7\u60a8\u53ea\u80fd\u5f97\u5230\u4e0a\u4e00\u5e27\u7684\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u5e94\u7528\u7684\u5b9e\u65f6\u6027\u8981\u6c42\u548c\u4e0a \u6e38\u6570\u636e\u63d0\u4f9b\u8005\u7684\u670d\u52a1\u80fd\u529b\u6765\u8bbe\u7f6e\u8fd9\u4e2a\u5ef6\u65f6\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u662f5\u79d2\u949f\u3002 \u5173\u4e8e delay \u7684\u8bbe\u7f6e\uff0c\u6211\u4eec\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002 2.2. \u5982\u4f55\u540c\u6b65K\u7ebf\u6570\u636e \u00b6 Omega\u63a7\u5236K\u7ebf\u6570\u636e\u540c\u6b65\u7684\u914d\u7f6e\u683c\u5f0f\u5982\u4e0b\uff08\u6ce8\u610f\u5176\u4e2d\u5305\u62ec\u4e86\u4e0a\u4e00\u8282\u5df2\u7ecf\u63d0\u5230\u7684 delay \u53c2\u6570\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 omega : sync : # \u540c\u6b65\u76f8\u5173\u7684\u914d\u7f6e\u90fd\u5728sync\u8282\u4e0b bars : # K\u7ebf\u6570\u636e\u540c\u6b65\u914d\u7f6e\u90fd\u5728bars\u8282\u4e0b - frame : '1d' # k\u7ebf\u5e27\u7c7b\u578b start : '2005-1-1' # \u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u7cfb\u7edf\u4f1a\u4ece\u5f53\u524d\u65e5\u671f\u5012\u63a8\u52301000\u4e2a\u6570\u636e\u8bb0\u5f55\u524d\u7684\u65f6\u95f4 stop : 2020-12-30 # \u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u4ee5\u4fbf\u540c\u6b65\u5230\u6700\u65b0\u7684\u65e5\u671f include : 000001.XSHG 399001.XSHE exclude : 000001.XSHE 600001.XSHG delay : 5 cat : # \u8bc1\u5238\u5206\u7c7b\uff0c\u5982\u80a1\u7968(stock), \u6307\u6570(index)\u7b49 - stock - frame : '1m' start : '2005-1-1' cat : - stock \u4e0a\u8ff0\u914d\u7f6e\u683c\u5f0f\u63d0\u4f9b\u4e86\u8981\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684\u3001K\u7ebf\u7684\u5e27\u7c7b\u578b(\u6bd4\u5982\uff0c\u662f30\u5206\u949f\u7ebf\u8fd8\u662f\u65e5\u7ebf)\uff0c\u8d77\u59cb\u65f6\u95f4\u548c\u5ef6\u8fdf\u7b49\u5173\u952e \u4fe1\u606f\u3002\u5176\u4e2d\u8bc1\u5238\u6807\u7684\u53c8\u662f\u7531 cat \u3001 exclude \u548c include \u5171\u540c\u51b3\u5b9a\u7684\u3002 \u4e0a\u8ff0\u914d\u7f6e\u4e2d\uff0c\u6bcf\u79cdK\u7ebf\u90fd\u6709\u81ea\u5df1\u7684\u8bbe\u7f6e\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u4e00\u4e2a\u6570\u7ec4\u3002 frame \u952e\u8868\u660ek\u7ebf\u7684\u5e27\u7c7b\u578b\u3002Omega\u652f\u6301\u7684\u5e27\u7c7b\u578b\u5982\u4e0b\uff08\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\uff09\uff1a K\u7ebf\u7c7b\u578b \u6807\u8bc6 \u8bf4\u660e \u5e74\u7ebf 1Y \u6bcf\u5e74\u4e00\u6761\u8bb0\u5f55\uff0c\u5f53\u5e74\u505c\u724c\u7684\u9664\u5916\uff0c\u4e0b\u540c \u5b63\u7ebf 1Q \u6bcf\u5e74\u4ea7\u751f4\u6761\u8bb0\u5f55 \u6708\u7ebf 1M \u6bcf\u6708\u4ea7\u751f1\u6761\u8bb0\u5f55 \u5468\u7ebf 1W \u6bcf\u5468\u4ea7\u751f1\u6761\u8bb0\u5f55 \u65e5\u7ebf 1d \u6bcf\u5929\u4ea7\u751f1\u6761\u8bb0\u5f55\uff0c\u5168\u5e74\u7ea6250\u6761\u8bb0\u5f55 60\u5206\u949f\u7ebf 60m \u6bcf\u5929\u4ea7\u751f4\u6761\u8bb0\u5f55 30\u5206\u949f\u7ebf 30m \u6bcf\u5929\u4ea7\u751f8\u6761\u8bb0\u5f55 15\u5206\u949f\u7ebf 15m \u6bcf\u5929\u4ea7\u751f16\u6761\u8bb0\u5f55 5\u5206\u949f\u7ebf 5m \u6bcf\u5929\u4ea7\u751f48\u6761\u8bb0\u5f55 1\u5206\u949f\u7ebf 1m \u6bcf\u5929\u4ea7\u751f240\u6761\u8bb0\u5f55 start \u6307\u5b9a\u8be5\u79cdk\u7ebf\u83b7\u53d6\u6570\u636e\u7684\u8d77\u70b9\u65f6\u95f4\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u7cfb\u7edf\u4f1a\u4ece\u5f53\u524d\u65e5\u671f\u5012\u63a81000\u4e2a\u6570\u636e\u8bb0\u5f55\u3002\u60a8\u65e0 \u987b\u6307\u5b9a\u7cbe\u786e\u7684\u65f6\u95f4\uff0c\u6bd4\u5982\u5bf930\u5206\u949f\u7ebf\u6307\u5b9a\u7cbe\u786e\u52302020\u5e741\u67083\u65e510:00\u5f00\u59cb\uff0c\u6216\u8005\u62c5\u5fc32020\u5e741\u67084\u65e5\u662f\u5426\u521a\u597d\u662f \u5468\u7ebf\u7684\u7ed3\u675f\u65e5\u3002\u5bf9\u4e8e\u540c\u6b65\u6570\u636e\u6765\u8bf4\uff0c\u591a\u53d6\u4e00\u4e2a\u5e27\u7684\u6570\u636e\u5e76\u4e0d\u4f1a\u589e\u52a0\u4ec0\u4e48\u8d1f\u62c5\uff0c\u6240\u4ee5\u7cfb\u7edf\u4f1a\u53d6\u5230\u4e00\u4e2a\u6700\u5408\u9002\u7684\u8d77 \u59cb\u65f6\u95f4\uff0c\u521a\u597d\u4fdd\u8bc1\u60a8\u8981\u6c42\u7684\u6570\u636e\u90fd\u80fd\u88ab\u540c\u6b65\u3002 stop \u6307\u5b9a\u8be5\u79cdk\u7ebf\u83b7\u53d6\u6570\u636e\u7684\u7ec8\u70b9\u3002\u901a\u5e38\u60a8\u65e0\u987b\u8fdb\u884c\u8bbe\u7f6e\uff0c\u7cfb\u7edf\u5e94\u8be5\u81ea\u52a8\u4e3a\u60a8\u540c\u6b65\u5230\u6700\u65b0\u65f6\u95f4\u3002\u4f46 \u5982\u679c\u60a8\u8bbe\u7f6e\u4e86\uff0c\u5219\u7cfb\u7edf\u5c06 \u4e0d\u4f1a\u4e3a\u60a8\u83b7\u53d6\u5728 stop \u4e4b\u540e\u7684\u4efb\u4f55\u6570\u636e \u3002\u5b9e\u9645\u6548\u679c\u662f\uff0c\u5728\u9996\u6b21\u540c\u6b65\u5b8c\u6210\u540e\uff0c\u7981 \u6b62\u4e86\u4eca\u540e\u7684\u6570\u636e\u540c\u6b65\u3002 \u5f85\u540c\u6b65\u8bc1\u5238\u7684\u6807\u7684\u7531 cat \u3001 include \u548c exclude \u5171\u540c\u51b3\u5b9a\u3002\u7cfb\u7edf\u5148\u6839\u636e cat \u9009\u51fa\u4e00\u4e9b\u6807\u7684\uff0c \u7136\u540e\u6392\u9664\u5728 exclude \u4e2d\u7684\u6807\u7684\uff0c\u518d\u52a0\u5165 include \u4e2d\u7684\u6807\u7684\u3002 \u5982\u679c cat \u4e3a\u7a7a\uff0c\u5219\u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u5c06\u53ea\u6709 include \u4e2d\u7684\u6807\u7684\u88ab\u52a0\u5165\u3002\u5982\u679c\u4e00\u652f\u6807\u7684\u5728 exclude \u548c include \u4e2d\u540c\u65f6\u5b58\u5728\uff0c\u5219 include \u62e5\u6709\u66f4\u9ad8\u7684\u4f18\u9009\u7ea7\u3002 \u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u5982\u679c\u60a8\u6709\u4ee5\u4e0b\u540c\u6b65\u9700\u6c42\uff1a\u540c\u6b65\u9664\u4e86\u94f6\u884c\u80a1\u4ee5\u5916\u7684\u6240\u6709\u80a1\u7968\u7684\u65e5\u7ebf\u6570\u636e\uff0c\u5e76\u4e14\u5305\u62ec\u4e0a\u8bc1\u6307\u6570\u548c\u6df1 \u6210\u6307\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u914d\u7f6e\uff1a 1 2 3 4 5 6 7 8 omega : sync : bars : - frame : 1d # \u8981\u6c42\u540c\u6b65\u65e5\u7ebf\u6570\u636e include : 000001.XSHG 399001.XSHE # \u4f7f\u7528\u7a7a\u683c\u5206\u9694 exclude : 600001.XSHG 000001.XSHE ... cat : - stock # \u4ec5\u5305\u542b\u80a1\u7968 3. \u7ba1\u7406omega \u00b6 \u8981\u542f\u52a8Omega\u7684\u884c\u60c5\u670d\u52a1\uff0c\u8bf7\u5728\u547d\u4ee4\u884c\u4e0b\u8f93\u5165: 1 omega start \u884c\u60c5\u540c\u6b65\u7b49\u4efb\u52a1\u662f\u7531jobs\u8fdb\u7a0b\u7ba1\u7406\u7684\uff0c\u6240\u4ee5\u60a8\u8fd8\u9700\u8981\u542f\u52a8jobs\u8fdb\u7a0b 1 omega start jobs \u8981\u67e5\u770b\u5f53\u524d\u6709\u54ea\u4e9bfetcher\u548cjobs\u8fdb\u7a0b\u5728\u8fd0\u884c\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff1a 1 omega status \u6b64\u5916\uff0cOmega\u8fd8\u63d0\u4f9b\u4e86stop\u548crestart\u547d\u4ee4: 1 2 3 4 omega stop jobs omega stop omega restart jobs omega restart 4. \u4f7f\u7528\u884c\u60c5\u6570\u636e \u00b6 \u867d\u7136Omega\u63d0\u4f9b\u4e86HTTP\u63a5\u53e3\uff0c\u4f46\u56e0\u4e3a\u6027\u80fd\u4f18\u5316\u7684\u539f\u56e0\uff0c\u5176\u901a\u8fc7HTTP\u63a5\u53e3\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u3002 \u4f7f\u7528\u884c\u60c5\u6570\u636e\u7684\u6b63\u786e\u65b9\u5f0f\u662f\u901a\u8fc7Omicron SDK\u6765\u8bbf\u95ee\u6570\u636e\u3002\u8bf7\u8df3\u8f6c\u81f3 Omicron\u5e2e\u52a9\u6587\u6863 \u7ee7\u7eed\u9605\u8bfb\u3002","title":"\u4f7f\u7528\u624b\u518c"},{"location":"usage/#1-\u914d\u7f6e\u6587\u4ef6","text":"\u5bf9\u666e\u901a\u7528\u6237\u800c\u8a00\uff0cOmega\u4f1a\u4ece~/zillionare/omega/config\u4e0b\u52a0\u8f7d\u914d\u7f6e\u3002 Note \u5982\u679c\u60a8\u662fOmega\u7684\u5f00\u53d1\u8005\uff0c\u5e94\u8be5\u5c06\u73af\u5883\u53d8\u91cf __cfg4py_server_role__ \u8bbe\u7f6e\u4e3aDEV\uff0c\u8fd9\u6837Omega\u4f1a \u4ece\u6e90\u4ee3\u7801\u6240\u5728\u6587\u4ef6\u5939\u4e0b\u9762\u7684omega/config\u4e0b\u8bfb\u53d6\u914d\u7f6e\u3002 \u5982\u679c\u60a8\u662fOmega\u7684\u6d4b\u8bd5\u8005\uff0c\u5efa\u8bae\u60a8\u5c06\u73af\u5883\u53d8\u91cf __cfg4py_server_role__ \u8bbe\u7f6e\u4e3aTEST\uff0c\u8fd9\u6837Omega \u4f1a\u4ece~/.zillionare/omega/config\u4e0b\u52a0\u8f7d\u914d\u7f6e\u3002 \u4e0a\u8ff0\u8bbe\u7f6e\u5e76\u975e\u5fc5\u987b\uff0c\u5982\u679c\u60a8\u4e0d\u61c2\u5f97\u8fd9\u79cd\u8bbe\u7f6e\u7684\u610f\u4e49\uff0c\u60a8\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\u4f4d\u7f6e\uff0c\u5373~/zillionare/omega/config \u914d\u7f6e\u6587\u4ef6\u4f7f\u7528YAML\u6587\u4ef6\u683c\u5f0f\uff0c\u5e76\u652f\u6301\u73af\u5883\u53d8\u91cf\u3002\u6bd4\u5982\uff0c\u5982\u679c\u60a8\u901a\u8fc7\u73af\u5883\u53d8\u91cf POSTGRES_USER \u6765\u8bbe\u7f6e\u4e86\u6570\u636e\u5e93 \u8d26\u53f7\uff0c\u5219\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a 1 2 postgres : dsn : postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost/zillionare \u4e0a\u8ff0\u73af\u5883\u53d8\u91cf\u7684\u6269\u5c55\u662f\u901a\u8fc7 cfg4py \u6765\u652f\u6301\u7684\u3002","title":"1. \u914d\u7f6e\u6587\u4ef6"},{"location":"usage/#2-\u6570\u636e\u540c\u6b65","text":"\u6570\u636e\u540c\u6b65\u662fOmega\u6700\u6838\u5fc3\u7684\u5de5\u4f5c\u4e4b\u4e00\u3002Omega\u4e13\u95e8\u914d\u7f6e\u4e86\u4e00\u4e2aJobs\u8fdb\u7a0b\u6765\u7ba1\u7406\u6570\u636e\u540c\u6b65\u53ca\u5176\u5b83\u5de5\u4f5c\u3002Jobs\u901a\u8fc7 \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u6765\u786e\u5b9a\u5e94\u8be5\u5982\u4f55\u8fdb\u884c\u540c\u6b65\uff0c\u5e76\u5411Omega Fetcher\u8fdb\u7a0b\u53d1\u51fa\u6570\u636e\u540c\u6b65\u8bf7\u6c42\u3002 \u5bf9\u4e8e\u65e5\u5386\u3001\u8bc1\u5238\u5217\u8868\u7b49\u5c11\u91cf\u6570\u636e\u7684\u540c\u6b65\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u901a\u5e38\u53ea\u4f1a\u53d1\u7ed9\u4e00\u4e2aOmega Fetcher\u8fdb\u7a0b\uff0c\u800c\u5bf9K\u7ebf\u8fd9\u6837\u7684\u5927 \u6279\u91cf\u6570\u636e\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u5219\u4f1a\u53d1\u7ed9\u6240\u6709\u5728\u7ebf\u7684Omega Fetcher\u8fdb\u7a0b\uff0c\u56e0\u6b64\uff0c\u4f7f\u7528Omega\u53ef\u4ee5\u5f97\u5230\u6781\u4e3a\u4f18\u79c0\u7684\u6570\u636e\u540c \u6b65\u6027\u80fd\u3002","title":"2. \u6570\u636e\u540c\u6b65"},{"location":"usage/#21-\u6570\u636e\u540c\u6b65\u53d1\u751f\u7684\u65f6\u95f4","text":"\u5bf9\u65e5\u5386\u548c\u8bc1\u5238\u5217\u8868\u7b49\u6570\u636e\uff0cOmega\u6bcf\u5929\u8fdb\u884c\u4e00\u6b21\uff0c\u5177\u4f53\u540c\u6b65\u65f6\u95f4\u9ed8\u8ba4\u4e3a\u5348\u591c2\u70b9\uff0c\u60a8\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fdb\u884c\u4fee\u6539: 1 2 3 4 omega : # omega\u670d\u52a1\u81ea\u8eab\u76f8\u5173\u7684\u914d\u7f6e sync : # \u540c\u6b65\u76f8\u5173\u7684\u914d\u7f6e\u90fd\u5728sync\u8282\u4e0b security_list : 02:00 calendar : 02:00 \u5efa\u8bae\u5728\u6bcf\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u8fdb\u884c\u540c\u6b65\u3002\u5982\u65e0\u7279\u522b\u9700\u6c42\uff0c\u8bf7\u4fdd\u6301\u9ed8\u8ba4\u503c\u5c31\u597d\u3002 K\u7ebf\u6570\u636e\u4f1a\u5728\u6bcf\u4e2aFrame\u7ed3\u675f\u65f6\u95f4\u8fdb\u884c\u540c\u6b65\u3002\u6bd4\u5982\uff0c\u5bf960\u5206\u949fk\u7ebf\uff0c\u4f1a\u5206\u522b\u572810:30, 11:30, 14:00\u548c15\uff1a00 \u5404\u8fdb\u884c\u4e00\u6b21\u540c\u6b65\uff1b\u5bf9\u65e5\u7ebf\u6570\u636e\uff0c\u4f1a\u572815\uff1a00\u65f6\u8fdb\u884c\u540c\u6b65\uff0c\u8fd9\u6837\u786e\u4fdd\u60a8\u59cb\u7ec8\u53ef\u4ee5\u5f97\u5230\u6700\u65b0\u7684\u6570\u636e\u3002 \u60a8\u7684\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u63d0\u4f9b\u8005\u53ef\u80fd\u6ca1\u6765\u5f97\u53ca\u5728\u6bcf\u4e2aFrame\u7ed3\u675f\u65f6\uff0c\u5c31\u521a\u597d\u628a\u6240\u6709\u7684\u6570\u636e\u51c6\u5907\u597d\u3002\u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 \u8bbe\u7f6edelay\u6765\u7a0d\u7a0d\u5ef6\u8fdf\u540c\u6b65\u65f6\u95f4\u3002\u5982\u679c\u60a8\u6ca1\u6709\u8bbe\u7f6edelay\uff0c\u800c\u4e0a\u6e38\u6570\u636e\u670d\u52a1\u63d0\u4f9b\u8005\u53c8\u4e0d\u80fd\u5728Frame\u521a\u597d\u7ed3\u675f\u65f6 \u63d0\u4f9b\u6570\u636e\u7684\u8bdd\uff0c\u6570\u636e\u540c\u6b65\u4ecd\u7136\u4f1a\u89e6\u53d1\uff0c\u53ea\u4e0d\u8fc7\u60a8\u53ea\u80fd\u5f97\u5230\u4e0a\u4e00\u5e27\u7684\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u5e94\u7528\u7684\u5b9e\u65f6\u6027\u8981\u6c42\u548c\u4e0a \u6e38\u6570\u636e\u63d0\u4f9b\u8005\u7684\u670d\u52a1\u80fd\u529b\u6765\u8bbe\u7f6e\u8fd9\u4e2a\u5ef6\u65f6\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u662f5\u79d2\u949f\u3002 \u5173\u4e8e delay \u7684\u8bbe\u7f6e\uff0c\u6211\u4eec\u5728\u4e0b\u4e00\u8282\u4e2d\u4ecb\u7ecd\u3002","title":"2.1. \u6570\u636e\u540c\u6b65\u53d1\u751f\u7684\u65f6\u95f4"},{"location":"usage/#22-\u5982\u4f55\u540c\u6b65k\u7ebf\u6570\u636e","text":"Omega\u63a7\u5236K\u7ebf\u6570\u636e\u540c\u6b65\u7684\u914d\u7f6e\u683c\u5f0f\u5982\u4e0b\uff08\u6ce8\u610f\u5176\u4e2d\u5305\u62ec\u4e86\u4e0a\u4e00\u8282\u5df2\u7ecf\u63d0\u5230\u7684 delay \u53c2\u6570\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 omega : sync : # \u540c\u6b65\u76f8\u5173\u7684\u914d\u7f6e\u90fd\u5728sync\u8282\u4e0b bars : # K\u7ebf\u6570\u636e\u540c\u6b65\u914d\u7f6e\u90fd\u5728bars\u8282\u4e0b - frame : '1d' # k\u7ebf\u5e27\u7c7b\u578b start : '2005-1-1' # \u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u7cfb\u7edf\u4f1a\u4ece\u5f53\u524d\u65e5\u671f\u5012\u63a8\u52301000\u4e2a\u6570\u636e\u8bb0\u5f55\u524d\u7684\u65f6\u95f4 stop : 2020-12-30 # \u53ef\u4ee5\u4e0d\u6307\u5b9a\uff0c\u4ee5\u4fbf\u540c\u6b65\u5230\u6700\u65b0\u7684\u65e5\u671f include : 000001.XSHG 399001.XSHE exclude : 000001.XSHE 600001.XSHG delay : 5 cat : # \u8bc1\u5238\u5206\u7c7b\uff0c\u5982\u80a1\u7968(stock), \u6307\u6570(index)\u7b49 - stock - frame : '1m' start : '2005-1-1' cat : - stock \u4e0a\u8ff0\u914d\u7f6e\u683c\u5f0f\u63d0\u4f9b\u4e86\u8981\u540c\u6b65\u7684\u8bc1\u5238\u6807\u7684\u3001K\u7ebf\u7684\u5e27\u7c7b\u578b(\u6bd4\u5982\uff0c\u662f30\u5206\u949f\u7ebf\u8fd8\u662f\u65e5\u7ebf)\uff0c\u8d77\u59cb\u65f6\u95f4\u548c\u5ef6\u8fdf\u7b49\u5173\u952e \u4fe1\u606f\u3002\u5176\u4e2d\u8bc1\u5238\u6807\u7684\u53c8\u662f\u7531 cat \u3001 exclude \u548c include \u5171\u540c\u51b3\u5b9a\u7684\u3002 \u4e0a\u8ff0\u914d\u7f6e\u4e2d\uff0c\u6bcf\u79cdK\u7ebf\u90fd\u6709\u81ea\u5df1\u7684\u8bbe\u7f6e\uff0c\u5b83\u4eec\u6784\u6210\u4e86\u4e00\u4e2a\u6570\u7ec4\u3002 frame \u952e\u8868\u660ek\u7ebf\u7684\u5e27\u7c7b\u578b\u3002Omega\u652f\u6301\u7684\u5e27\u7c7b\u578b\u5982\u4e0b\uff08\u6ce8\u610f\u533a\u5206\u5927\u5c0f\u5199\uff09\uff1a K\u7ebf\u7c7b\u578b \u6807\u8bc6 \u8bf4\u660e \u5e74\u7ebf 1Y \u6bcf\u5e74\u4e00\u6761\u8bb0\u5f55\uff0c\u5f53\u5e74\u505c\u724c\u7684\u9664\u5916\uff0c\u4e0b\u540c \u5b63\u7ebf 1Q \u6bcf\u5e74\u4ea7\u751f4\u6761\u8bb0\u5f55 \u6708\u7ebf 1M \u6bcf\u6708\u4ea7\u751f1\u6761\u8bb0\u5f55 \u5468\u7ebf 1W \u6bcf\u5468\u4ea7\u751f1\u6761\u8bb0\u5f55 \u65e5\u7ebf 1d \u6bcf\u5929\u4ea7\u751f1\u6761\u8bb0\u5f55\uff0c\u5168\u5e74\u7ea6250\u6761\u8bb0\u5f55 60\u5206\u949f\u7ebf 60m \u6bcf\u5929\u4ea7\u751f4\u6761\u8bb0\u5f55 30\u5206\u949f\u7ebf 30m \u6bcf\u5929\u4ea7\u751f8\u6761\u8bb0\u5f55 15\u5206\u949f\u7ebf 15m \u6bcf\u5929\u4ea7\u751f16\u6761\u8bb0\u5f55 5\u5206\u949f\u7ebf 5m \u6bcf\u5929\u4ea7\u751f48\u6761\u8bb0\u5f55 1\u5206\u949f\u7ebf 1m \u6bcf\u5929\u4ea7\u751f240\u6761\u8bb0\u5f55 start \u6307\u5b9a\u8be5\u79cdk\u7ebf\u83b7\u53d6\u6570\u636e\u7684\u8d77\u70b9\u65f6\u95f4\u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u7cfb\u7edf\u4f1a\u4ece\u5f53\u524d\u65e5\u671f\u5012\u63a81000\u4e2a\u6570\u636e\u8bb0\u5f55\u3002\u60a8\u65e0 \u987b\u6307\u5b9a\u7cbe\u786e\u7684\u65f6\u95f4\uff0c\u6bd4\u5982\u5bf930\u5206\u949f\u7ebf\u6307\u5b9a\u7cbe\u786e\u52302020\u5e741\u67083\u65e510:00\u5f00\u59cb\uff0c\u6216\u8005\u62c5\u5fc32020\u5e741\u67084\u65e5\u662f\u5426\u521a\u597d\u662f \u5468\u7ebf\u7684\u7ed3\u675f\u65e5\u3002\u5bf9\u4e8e\u540c\u6b65\u6570\u636e\u6765\u8bf4\uff0c\u591a\u53d6\u4e00\u4e2a\u5e27\u7684\u6570\u636e\u5e76\u4e0d\u4f1a\u589e\u52a0\u4ec0\u4e48\u8d1f\u62c5\uff0c\u6240\u4ee5\u7cfb\u7edf\u4f1a\u53d6\u5230\u4e00\u4e2a\u6700\u5408\u9002\u7684\u8d77 \u59cb\u65f6\u95f4\uff0c\u521a\u597d\u4fdd\u8bc1\u60a8\u8981\u6c42\u7684\u6570\u636e\u90fd\u80fd\u88ab\u540c\u6b65\u3002 stop \u6307\u5b9a\u8be5\u79cdk\u7ebf\u83b7\u53d6\u6570\u636e\u7684\u7ec8\u70b9\u3002\u901a\u5e38\u60a8\u65e0\u987b\u8fdb\u884c\u8bbe\u7f6e\uff0c\u7cfb\u7edf\u5e94\u8be5\u81ea\u52a8\u4e3a\u60a8\u540c\u6b65\u5230\u6700\u65b0\u65f6\u95f4\u3002\u4f46 \u5982\u679c\u60a8\u8bbe\u7f6e\u4e86\uff0c\u5219\u7cfb\u7edf\u5c06 \u4e0d\u4f1a\u4e3a\u60a8\u83b7\u53d6\u5728 stop \u4e4b\u540e\u7684\u4efb\u4f55\u6570\u636e \u3002\u5b9e\u9645\u6548\u679c\u662f\uff0c\u5728\u9996\u6b21\u540c\u6b65\u5b8c\u6210\u540e\uff0c\u7981 \u6b62\u4e86\u4eca\u540e\u7684\u6570\u636e\u540c\u6b65\u3002 \u5f85\u540c\u6b65\u8bc1\u5238\u7684\u6807\u7684\u7531 cat \u3001 include \u548c exclude \u5171\u540c\u51b3\u5b9a\u3002\u7cfb\u7edf\u5148\u6839\u636e cat \u9009\u51fa\u4e00\u4e9b\u6807\u7684\uff0c \u7136\u540e\u6392\u9664\u5728 exclude \u4e2d\u7684\u6807\u7684\uff0c\u518d\u52a0\u5165 include \u4e2d\u7684\u6807\u7684\u3002 \u5982\u679c cat \u4e3a\u7a7a\uff0c\u5219\u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u5c06\u53ea\u6709 include \u4e2d\u7684\u6807\u7684\u88ab\u52a0\u5165\u3002\u5982\u679c\u4e00\u652f\u6807\u7684\u5728 exclude \u548c include \u4e2d\u540c\u65f6\u5b58\u5728\uff0c\u5219 include \u62e5\u6709\u66f4\u9ad8\u7684\u4f18\u9009\u7ea7\u3002 \u6839\u636e\u4e0a\u8ff0\u89c4\u5219\uff0c\u5982\u679c\u60a8\u6709\u4ee5\u4e0b\u540c\u6b65\u9700\u6c42\uff1a\u540c\u6b65\u9664\u4e86\u94f6\u884c\u80a1\u4ee5\u5916\u7684\u6240\u6709\u80a1\u7968\u7684\u65e5\u7ebf\u6570\u636e\uff0c\u5e76\u4e14\u5305\u62ec\u4e0a\u8bc1\u6307\u6570\u548c\u6df1 \u6210\u6307\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u914d\u7f6e\uff1a 1 2 3 4 5 6 7 8 omega : sync : bars : - frame : 1d # \u8981\u6c42\u540c\u6b65\u65e5\u7ebf\u6570\u636e include : 000001.XSHG 399001.XSHE # \u4f7f\u7528\u7a7a\u683c\u5206\u9694 exclude : 600001.XSHG 000001.XSHE ... cat : - stock # \u4ec5\u5305\u542b\u80a1\u7968","title":"2.2. \u5982\u4f55\u540c\u6b65K\u7ebf\u6570\u636e"},{"location":"usage/#3-\u7ba1\u7406omega","text":"\u8981\u542f\u52a8Omega\u7684\u884c\u60c5\u670d\u52a1\uff0c\u8bf7\u5728\u547d\u4ee4\u884c\u4e0b\u8f93\u5165: 1 omega start \u884c\u60c5\u540c\u6b65\u7b49\u4efb\u52a1\u662f\u7531jobs\u8fdb\u7a0b\u7ba1\u7406\u7684\uff0c\u6240\u4ee5\u60a8\u8fd8\u9700\u8981\u542f\u52a8jobs\u8fdb\u7a0b 1 omega start jobs \u8981\u67e5\u770b\u5f53\u524d\u6709\u54ea\u4e9bfetcher\u548cjobs\u8fdb\u7a0b\u5728\u8fd0\u884c\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff1a 1 omega status \u6b64\u5916\uff0cOmega\u8fd8\u63d0\u4f9b\u4e86stop\u548crestart\u547d\u4ee4: 1 2 3 4 omega stop jobs omega stop omega restart jobs omega restart","title":"3. \u7ba1\u7406omega"},{"location":"usage/#4-\u4f7f\u7528\u884c\u60c5\u6570\u636e","text":"\u867d\u7136Omega\u63d0\u4f9b\u4e86HTTP\u63a5\u53e3\uff0c\u4f46\u56e0\u4e3a\u6027\u80fd\u4f18\u5316\u7684\u539f\u56e0\uff0c\u5176\u901a\u8fc7HTTP\u63a5\u53e3\u63d0\u4f9b\u7684\u6570\u636e\uff0c\u90fd\u662f\u4e8c\u8fdb\u5236\u7684\u3002 \u4f7f\u7528\u884c\u60c5\u6570\u636e\u7684\u6b63\u786e\u65b9\u5f0f\u662f\u901a\u8fc7Omicron SDK\u6765\u8bbf\u95ee\u6570\u636e\u3002\u8bf7\u8df3\u8f6c\u81f3 Omicron\u5e2e\u52a9\u6587\u6863 \u7ee7\u7eed\u9605\u8bfb\u3002","title":"4. \u4f7f\u7528\u884c\u60c5\u6570\u636e"}]}